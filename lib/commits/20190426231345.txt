{"fetchDate": "2019-12-19", "content": [{"sha": "58efa571ab40e1e01ed126bcc66fe9a12b03b705", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6NThlZmE1NzFhYjQwZTFlMDFlZDEyNmJjYzY2ZmU5YTEyYjAzYjcwNQ==", "commit": {"author": {"name": "GustavCrypter", "email": "alonygrbb@hotmail.com", "date": "2019-04-26T23:13:45Z"}, "committer": {"name": "GustavCrypter", "email": "alonygrbb@hotmail.com", "date": "2019-04-26T23:13:45Z"}, "message": "Update MapleItemInformationProvider.java\n\nchanges to clean slate recover vicius hammer slots", "tree": {"sha": "d0f718dff1b21592b711077472b9e7ed74f5e834", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/d0f718dff1b21592b711077472b9e7ed74f5e834"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/58efa571ab40e1e01ed126bcc66fe9a12b03b705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/58efa571ab40e1e01ed126bcc66fe9a12b03b705", "html_url": "https://github.com/ronancpl/HeavenMS/commit/58efa571ab40e1e01ed126bcc66fe9a12b03b705", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/58efa571ab40e1e01ed126bcc66fe9a12b03b705/comments", "author": {"login": "CrypterDEV", "id": 40148260, "node_id": "MDQ6VXNlcjQwMTQ4MjYw", "avatar_url": "https://avatars0.githubusercontent.com/u/40148260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrypterDEV", "html_url": "https://github.com/CrypterDEV", "followers_url": "https://api.github.com/users/CrypterDEV/followers", "following_url": "https://api.github.com/users/CrypterDEV/following{/other_user}", "gists_url": "https://api.github.com/users/CrypterDEV/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrypterDEV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrypterDEV/subscriptions", "organizations_url": "https://api.github.com/users/CrypterDEV/orgs", "repos_url": "https://api.github.com/users/CrypterDEV/repos", "events_url": "https://api.github.com/users/CrypterDEV/events{/privacy}", "received_events_url": "https://api.github.com/users/CrypterDEV/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CrypterDEV", "id": 40148260, "node_id": "MDQ6VXNlcjQwMTQ4MjYw", "avatar_url": "https://avatars0.githubusercontent.com/u/40148260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrypterDEV", "html_url": "https://github.com/CrypterDEV", "followers_url": "https://api.github.com/users/CrypterDEV/followers", "following_url": "https://api.github.com/users/CrypterDEV/following{/other_user}", "gists_url": "https://api.github.com/users/CrypterDEV/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrypterDEV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrypterDEV/subscriptions", "organizations_url": "https://api.github.com/users/CrypterDEV/orgs", "repos_url": "https://api.github.com/users/CrypterDEV/repos", "events_url": "https://api.github.com/users/CrypterDEV/events{/privacy}", "received_events_url": "https://api.github.com/users/CrypterDEV/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df2a22422702536ab90b49ff3270631a2a9a723", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/4df2a22422702536ab90b49ff3270631a2a9a723", "html_url": "https://github.com/ronancpl/HeavenMS/commit/4df2a22422702536ab90b49ff3270631a2a9a723"}], "stats": {"total": 371, "additions": 190, "deletions": 181}, "files": [{"sha": "1881e8c7f1b9121f87142d67311a1ca3ac6d01fa", "filename": "src/server/MapleItemInformationProvider.java", "status": "modified", "additions": 190, "deletions": 181, "changes": 371, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/58efa571ab40e1e01ed126bcc66fe9a12b03b705/src/server/MapleItemInformationProvider.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/58efa571ab40e1e01ed126bcc66fe9a12b03b705/src/server/MapleItemInformationProvider.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/MapleItemInformationProvider.java?ref=58efa571ab40e1e01ed126bcc66fe9a12b03b705", "patch": "@@ -78,11 +78,11 @@\n  */\n public class MapleItemInformationProvider {\n     private final static MapleItemInformationProvider instance = new MapleItemInformationProvider();\n-    \n+\n     public static MapleItemInformationProvider getInstance() {\n         return instance;\n     }\n-    \n+\n     protected MapleDataProvider itemData;\n     protected MapleDataProvider equipData;\n     protected MapleDataProvider stringData;\n@@ -149,7 +149,7 @@ private MapleItemInformationProvider() {\n         etcStringData = stringData.getData(\"Etc.img\");\n         insStringData = stringData.getData(\"Ins.img\");\n         petStringData = stringData.getData(\"Pet.img\");\n-        \n+\n         isQuestItemCache.put(0, false);\n         isPartyQuestItemCache.put(0, false);\n     }\n@@ -194,17 +194,17 @@ private MapleItemInformationProvider() {\n         if (!itemNameCache.isEmpty()) {\n             return itemNameCache;\n         }\n-        \n+\n         List<Pair<Integer, String>> itemPairs = new ArrayList<>();\n         MapleData itemsData;\n-        \n+\n         itemsData = stringData.getData(\"Etc.img\").getChildByPath(\"Etc\");\n         for (MapleData itemFolder : itemsData.getChildren()) {\n             itemPairs.add(new Pair<>(Integer.parseInt(itemFolder.getName()), MapleDataTool.getString(\"name\", itemFolder, \"NO-NAME\")));\n         }\n         return itemPairs;\n     }\n-    \n+\n     private MapleData getStringData(int itemId) {\n         String cat = \"null\";\n         MapleData theData;\n@@ -278,13 +278,13 @@ public boolean noCancelMouse(int itemId) {\n         if (noCancelMouseCache.containsKey(itemId)) {\n             return noCancelMouseCache.get(itemId);\n         }\n-        \n+\n         MapleData item = getItemData(itemId);\n         if (item == null) {\n             noCancelMouseCache.put(itemId, false);\n             return false;\n         }\n-        \n+\n         boolean blockMouse = MapleDataTool.getIntConvert(\"info/noCancelMouse\", item, 0) == 1;\n         noCancelMouseCache.put(itemId, blockMouse);\n         return blockMouse;\n@@ -318,10 +318,10 @@ private MapleData getItemData(int itemId) {\n         }\n         return ret;\n     }\n-    \n+\n     public List<Integer> getItemIdsInRange(int minId, int maxId, boolean ignoreCashItem) {\n         List<Integer> list = new ArrayList<>();\n-        \n+\n         if(ignoreCashItem) {\n             for(int i = minId; i <= maxId; i++) {\n                 if(getItemData(i) != null && !isCash(i)) {\n@@ -336,14 +336,14 @@ private MapleData getItemData(int itemId) {\n                 }\n             }\n         }\n-        \n-        \n+\n+\n         return list;\n     }\n \n     private static short getExtraSlotMaxFromPlayer(MapleClient c, int itemId) {\n         short ret = 0;\n-        \n+\n         // thanks GMChuck for detecting player sensitive data being cached into getSlotMax\n         if (ItemConstants.isThrowingStar(itemId)) {\n             if(c.getPlayer().getJob().isA(MapleJob.NIGHTWALKER1)) {\n@@ -354,10 +354,10 @@ private static short getExtraSlotMaxFromPlayer(MapleClient c, int itemId) {\n         } else if (ItemConstants.isBullet(itemId)) {\n             ret += c.getPlayer().getSkillLevel(SkillFactory.getSkill(Gunslinger.GUN_MASTERY)) * 10;\n         }\n-        \n+\n         return ret;\n     }\n-    \n+\n     public short getSlotMax(MapleClient c, int itemId) {\n         Short slotMax = slotMaxCache.get(itemId);\n         if (slotMax != null) {\n@@ -377,7 +377,7 @@ public short getSlotMax(MapleClient c, int itemId) {\n                 ret = (short) MapleDataTool.getInt(smEntry);\n             }\n         }\n-        \n+\n         slotMaxCache.put(itemId, ret);\n         return (short)(ret + getExtraSlotMaxFromPlayer(c, itemId));\n     }\n@@ -404,51 +404,51 @@ private static double getRoundedUnitPrice(double unitPrice, int max) {\n         double intPart = Math.floor(unitPrice);\n         double fractPart = unitPrice - intPart;\n         if(fractPart == 0.0) return intPart;\n-        \n+\n         double fractMask = 0.0;\n         double lastFract, curFract = 1.0;\n         int i = 1;\n-        \n+\n         do {\n             lastFract = curFract;\n             curFract /= 2;\n-            \n+\n             if(fractPart == curFract) {\n                 break;\n             } else if(fractPart > curFract) {\n                 fractMask += curFract;\n                 fractPart -= curFract;\n             }\n-            \n+\n             i++;\n         } while(i <= max);\n-        \n+\n         if(i > max) {\n             lastFract = curFract;\n             curFract = 0.0;\n         }\n-        \n+\n         if(Math.abs(fractPart - curFract) < Math.abs(fractPart - lastFract)) {\n             return intPart + fractMask + curFract;\n         } else {\n             return intPart + fractMask + lastFract;\n         }\n     }\n-    \n+\n     private Pair<Integer, Double> getItemPriceData(int itemId) {\n         MapleData item = getItemData(itemId);\n         if (item == null) {\n             wholePriceCache.put(itemId, -1);\n             unitPriceCache.put(itemId, 0.0);\n             return new Pair<>(-1, 0.0);\n         }\n-        \n+\n         int pEntry = -1;\n         MapleData pData = item.getChildByPath(\"info/price\");\n         if (pData != null) {\n             pEntry = MapleDataTool.getInt(pData);\n         }\n-        \n+\n         double fEntry = 0.0f;\n         pData = item.getChildByPath(\"info/unitPrice\");\n         if (pData != null) {\n@@ -458,25 +458,25 @@ private static double getRoundedUnitPrice(double unitPrice, int max) {\n                 fEntry = (double) MapleDataTool.getInt(pData);\n             }\n         }\n-        \n+\n         wholePriceCache.put(itemId, pEntry);\n         unitPriceCache.put(itemId, fEntry);\n         return new Pair<>(pEntry, fEntry);\n     }\n-    \n+\n     public int getWholePrice(int itemId) {\n         if (wholePriceCache.containsKey(itemId)) {\n             return wholePriceCache.get(itemId);\n         }\n-        \n+\n         return getItemPriceData(itemId).getLeft();\n     }\n-    \n+\n     public double getUnitPrice(int itemId) {\n         if (unitPriceCache.containsKey(itemId)) {\n             return unitPriceCache.get(itemId);\n         }\n-        \n+\n         return getItemPriceData(itemId).getRight();\n     }\n \n@@ -485,54 +485,54 @@ public int getPrice(int itemId, int quantity) {\n         if(retPrice == -1) {\n             return -1;\n         }\n-        \n+\n         if(!ItemConstants.isRechargeable(itemId)) {\n             retPrice *= quantity;\n         } else {\n             retPrice += Math.ceil(quantity * getUnitPrice(itemId));\n         }\n-        \n+\n         return retPrice;\n     }\n-    \n+\n     public Pair<Integer, String> getReplaceOnExpire(int itemId) {   // thanks to GabrielSin\n         if (replaceOnExpireCache.containsKey(itemId)) {\n             return replaceOnExpireCache.get(itemId);\n         }\n- \n+\n         MapleData data = getItemData(itemId);\n         int itemReplacement = MapleDataTool.getInt(\"info/replace/itemid\", data, 0);\n         String msg = MapleDataTool.getString(\"info/replace/msg\", data, \"\");\n- \n+\n         Pair<Integer, String> ret = new Pair<>(itemReplacement, msg);\n         replaceOnExpireCache.put(itemId, ret);\n- \n+\n         return ret;\n     }\n-    \n+\n     protected String getEquipmentSlot(int itemId) {\n         if (equipmentSlotCache.containsKey(itemId)) {\n             return equipmentSlotCache.get(itemId);\n         }\n-        \n+\n         String ret = \"\";\n-        \n+\n         MapleData item = getItemData(itemId);\n-        \n+\n         if (item == null) {\n             return null;\n         }\n-        \n+\n         MapleData info = item.getChildByPath(\"info\");\n-        \n+\n         if (info == null) {\n             return null;\n         }\n \n         ret = MapleDataTool.getString(\"islot\", info, \"\");\n-        \n+\n         equipmentSlotCache.put(itemId, ret);\n-        \n+\n         return ret;\n     }\n \n@@ -571,12 +571,12 @@ protected String getEquipmentSlot(int itemId) {\n         equipStatsCache.put(itemId, ret);\n         return ret;\n     }\n-    \n+\n     public Integer getEquipLevelReq(int itemId) {\n         if (equipLevelReqCache.containsKey(itemId)) {\n             return equipLevelReqCache.get(itemId);\n         }\n-        \n+\n         int ret = 0;\n         MapleData item = getItemData(itemId);\n         if (item != null) {\n@@ -585,7 +585,7 @@ public Integer getEquipLevelReq(int itemId) {\n                 ret = MapleDataTool.getInt(\"reqLevel\", info, 0);\n             }\n         }\n-        \n+\n         equipLevelReqCache.put(itemId, ret);\n         return ret;\n     }\n@@ -615,27 +615,27 @@ public MapleWeaponType getWeaponType(int itemId) {\n     private static double testYourLuck(double prop, int dices) {   // revamped testYourLuck author: David A.\n         return Math.pow(1.0 - prop, dices);\n     }\n-    \n+\n     public static boolean rollSuccessChance(double propPercent) {\n         return Math.random() >= testYourLuck(propPercent / 100.0, ServerConstants.SCROLL_CHANCE_RATE);\n     }\n-    \n+\n     private static short getMaximumShortMaxIfOverflow(int value1, int value2) {\n         return (short) Math.min(Short.MAX_VALUE, Math.max(value1, value2));\n     }\n-    \n+\n     private static short getShortMaxIfOverflow(int value) {\n         return (short) Math.min(Short.MAX_VALUE, value);\n     }\n-    \n+\n     private static short chscrollRandomizedStat(int range) {\n         return (short) Randomizer.rand(-range, range);\n     }\n-    \n+\n     public void scrollOptionEquipWithChaos(Equip nEquip, int range, boolean option) {\n         // option: watk, matk, wdef, mdef, spd, jump, hp, mp\n         //   stat: dex, luk, str, int, avoid, acc\n-        \n+\n         if(!option) {\n             if (nEquip.getStr() > 0) {\n                 if(ServerConstants.USE_ENHANCED_CHSCROLL) nEquip.setStr(getMaximumShortMaxIfOverflow(nEquip.getStr(), (nEquip.getStr() + chscrollRandomizedStat(range))));\n@@ -697,12 +697,12 @@ public void scrollOptionEquipWithChaos(Equip nEquip, int range, boolean option)\n             }\n         }\n     }\n-    \n+\n     private void scrollEquipWithChaos(Equip nEquip, int range) {\n         if(ServerConstants.CHSCROLL_STAT_RATE > 0) {\n             int temp;\n             short curStr, curDex, curInt, curLuk, curWatk, curWdef, curMatk, curMdef, curAcc, curAvoid, curSpeed, curJump, curHp, curMp;\n-            \n+\n             if(ServerConstants.USE_ENHANCED_CHSCROLL) {\n                 curStr = nEquip.getStr();\n                 curDex = nEquip.getDex();\n@@ -734,107 +734,107 @@ private void scrollEquipWithChaos(Equip nEquip, int range) {\n                 curHp = Short.MIN_VALUE;\n                 curMp = Short.MIN_VALUE;\n             }\n-            \n+\n             for(int i = 0; i < ServerConstants.CHSCROLL_STAT_RATE; i++) {\n                 if (nEquip.getStr() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curStr + chscrollRandomizedStat(range);\n                     else temp = nEquip.getStr() + chscrollRandomizedStat(range);\n-                    \n+\n                     curStr = getMaximumShortMaxIfOverflow(temp, curStr);\n                 }\n-                \n+\n                 if (nEquip.getDex() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curDex + chscrollRandomizedStat(range);\n                     else temp = nEquip.getDex() + chscrollRandomizedStat(range);\n-                    \n+\n                     curDex = getMaximumShortMaxIfOverflow(temp, curDex);\n                 }\n-                \n+\n                 if (nEquip.getInt() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curInt + chscrollRandomizedStat(range);\n                     else temp = nEquip.getInt() + chscrollRandomizedStat(range);\n-                    \n+\n                     curInt = getMaximumShortMaxIfOverflow(temp, curInt);\n                 }\n-                \n+\n                 if (nEquip.getLuk() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curLuk + chscrollRandomizedStat(range);\n                     else temp = nEquip.getLuk() + chscrollRandomizedStat(range);\n-                    \n+\n                     curLuk = getMaximumShortMaxIfOverflow(temp, curLuk);\n                 }\n-                \n+\n                 if (nEquip.getWatk() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curWatk + chscrollRandomizedStat(range);\n                     else temp = nEquip.getWatk() + chscrollRandomizedStat(range);\n-                    \n+\n                     curWatk = getMaximumShortMaxIfOverflow(temp, curWatk);\n                 }\n-                \n+\n                 if (nEquip.getWdef() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curWdef + chscrollRandomizedStat(range);\n                     else temp = nEquip.getWdef() + chscrollRandomizedStat(range);\n-                    \n+\n                     curWdef = getMaximumShortMaxIfOverflow(temp, curWdef);\n                 }\n-                \n+\n                 if (nEquip.getMatk() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curMatk + chscrollRandomizedStat(range);\n                     else temp = nEquip.getMatk() + chscrollRandomizedStat(range);\n-                    \n+\n                     curMatk = getMaximumShortMaxIfOverflow(temp, curMatk);\n                 }\n-                \n+\n                 if (nEquip.getMdef() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curMdef + chscrollRandomizedStat(range);\n                     else temp = nEquip.getMdef() + chscrollRandomizedStat(range);\n-                    \n+\n                     curMdef = getMaximumShortMaxIfOverflow(temp, curMdef);\n                 }\n-                \n+\n                 if (nEquip.getAcc() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curAcc + chscrollRandomizedStat(range);\n                     else temp = nEquip.getAcc() + chscrollRandomizedStat(range);\n-                    \n+\n                     curAcc = getMaximumShortMaxIfOverflow(temp, curAcc);\n                 }\n-                \n+\n                 if (nEquip.getAvoid() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curAvoid + chscrollRandomizedStat(range);\n                     else temp = nEquip.getAvoid() + chscrollRandomizedStat(range);\n-                    \n+\n                     curAvoid = getMaximumShortMaxIfOverflow(temp, curAvoid);\n                 }\n-                \n+\n                 if (nEquip.getSpeed() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curSpeed + chscrollRandomizedStat(range);\n                     else temp = nEquip.getSpeed() + chscrollRandomizedStat(range);\n-                    \n+\n                     curSpeed = getMaximumShortMaxIfOverflow(temp, curSpeed);\n                 }\n-                \n+\n                 if (nEquip.getJump() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curJump + chscrollRandomizedStat(range);\n                     else temp = nEquip.getJump() + chscrollRandomizedStat(range);\n-                    \n+\n                     curJump = getMaximumShortMaxIfOverflow(temp, curJump);\n                 }\n-                \n+\n                 if (nEquip.getHp() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curHp + chscrollRandomizedStat(range);\n                     else temp = nEquip.getHp() + chscrollRandomizedStat(range);\n-                    \n+\n                     curHp = getMaximumShortMaxIfOverflow(temp, curHp);\n                 }\n-                \n+\n                 if (nEquip.getMp() > 0) {\n                     if(ServerConstants.USE_ENHANCED_CHSCROLL) temp = curMp + chscrollRandomizedStat(range);\n                     else temp = nEquip.getMp() + chscrollRandomizedStat(range);\n-                    \n+\n                     curMp = getMaximumShortMaxIfOverflow(temp, curMp);\n                 }\n             }\n-            \n+\n             nEquip.setStr((short) Math.max(0, curStr));\n             nEquip.setDex((short) Math.max(0, curDex));\n             nEquip.setInt((short) Math.max(0, curInt));\n@@ -910,29 +910,38 @@ private void scrollEquipWithChaos(Equip nEquip, int range) {\n             }\n         }\n     }\n-    \n+\n     public boolean canUseCleanSlate(Equip nEquip) {\n         Map<String, Integer> eqstats = this.getEquipStats(nEquip.getItemId());\n-        return ServerConstants.USE_ENHANCED_CLNSLATE || nEquip.getUpgradeSlots() < eqstats.get(\"tuc\");  // issue with clean slate found thanks to Masterrulax\n+        return ServerConstants.USE_ENHANCED_CLNSLATE || nEquip.getUpgradeSlots() < (byte) (eqstats.get(\"tuc\") + nEquipe.getVicious());  // issue with clean slate found thanks to Masterrulax\n     }\n-    \n+\n     public Item scrollEquipWithId(Item equip, int scrollId, boolean usingWhiteScroll, int vegaItemId, boolean isGM) {\n         boolean assertGM = (isGM && ServerConstants.USE_PERFECT_GM_SCROLL);\n-        \n+\n         if (equip instanceof Equip) {\n             Equip nEquip = (Equip) equip;\n             Map<String, Integer> stats = this.getEquipStats(scrollId);\n-            \n+\n             if (((nEquip.getUpgradeSlots() > 0 || ItemConstants.isCleanSlate(scrollId))) || assertGM) {\n-                double prop = (double)stats.get(\"success\");\n-                if (vegaItemId == 5610000) {\n-                    if(prop == 10.0) prop = 30.0;\n-                } else if (vegaItemId == 5610001) {\n-                    if(prop == 60.0) prop = 90.0;\n-                } else if (vegaItemId == 2049100) {\n-                    prop = 100.0;\n+                double prop = (double) stats.get(\"success\");\n+\n+                switch(vegaItemId) {\n+                  case 5610000:\n+                    if (prop == 10.0f) {\n+                      prop = 30.0f;\n+                    }\n+                    break;\n+                  case 5610001:\n+                    if (prop == 60.0f) {\n+                      prop = 90.0f;\n+                    }\n+                    break;\n+                  case 2049100:\n+                    prop = 100.0f;\n+                    break;\n                 }\n-                \n+\n                 if(assertGM || rollSuccessChance(prop)) {\n                     short flag = nEquip.getFlag();\n                     switch (scrollId) {\n@@ -957,7 +966,7 @@ public Item scrollEquipWithId(Item equip, int scrollId, boolean usingWhiteScroll\n                         case 2049102:\n                             scrollEquipWithChaos(nEquip, ServerConstants.CHSCROLL_STAT_RANGE);\n                             break;\n-                            \n+\n                         default:\n                             improveEquipStats(nEquip, stats);\n                             break;\n@@ -980,7 +989,7 @@ public Item scrollEquipWithId(Item equip, int scrollId, boolean usingWhiteScroll\n         }\n         return equip;\n     }\n-    \n+\n     public static void improveEquipStats(Equip nEquip, Map<String, Integer> stats) {\n         for (Entry<String, Integer> stat : stats.entrySet()) {\n             switch (stat.getKey()) {\n@@ -1121,7 +1130,7 @@ private static short getRandUpgradedStat(short defaultValue, int maxRange) {\n         int lMaxRange = maxRange;\n         return (short) (defaultValue + Math.floor(Randomizer.nextDouble() * (lMaxRange + 1)));\n     }\n-    \n+\n     public Equip randomizeUpgradeStats(Equip equip) {\n         equip.setStr(getRandUpgradedStat(equip.getStr(), 2));\n         equip.setDex(getRandUpgradedStat(equip.getDex(), 2));\n@@ -1138,7 +1147,7 @@ public Equip randomizeUpgradeStats(Equip equip) {\n         equip.setMp(getRandUpgradedStat(equip.getMp(), 5));\n         return equip;\n     }\n-    \n+\n     public MapleStatEffect getItemEffect(int itemId) {\n         MapleStatEffect ret = itemEffects.get(Integer.valueOf(itemId));\n         if (ret == null) {\n@@ -1208,24 +1217,24 @@ public boolean isUntradeableRestricted(int itemId) {\n         if (untradeableCache.containsKey(itemId)) {\n             return untradeableCache.get(itemId);\n         }\n-        \n+\n         boolean bRestricted = false;\n         if(itemId != 0) {\n             MapleData data = getItemData(itemId);\n             if (data != null) {\n                 bRestricted = MapleDataTool.getIntConvert(\"info/tradeBlock\", data, 0) == 1;\n             }\n         }\n-        \n+\n         untradeableCache.put(itemId, bRestricted);\n         return bRestricted;\n     }\n-    \n+\n     public boolean isLootRestricted(int itemId) {\n         if (dropRestrictionCache.containsKey(itemId)) {\n             return dropRestrictionCache.get(itemId);\n         }\n-        \n+\n         boolean bRestricted = false;\n         if(itemId != 0) {\n             MapleData data = getItemData(itemId);\n@@ -1236,11 +1245,11 @@ public boolean isLootRestricted(int itemId) {\n                 }\n             }\n         }\n-        \n+\n         dropRestrictionCache.put(itemId, bRestricted);\n         return bRestricted;\n     }\n-    \n+\n     public boolean isDropRestricted(int itemId) {\n         return isLootRestricted(itemId) || isQuestItem(itemId);\n     }\n@@ -1249,25 +1258,25 @@ public boolean isPickupRestricted(int itemId) {\n         if (pickupRestrictionCache.containsKey(itemId)) {\n             return pickupRestrictionCache.get(itemId);\n         }\n-        \n+\n         boolean bRestricted = false;\n         if(itemId != 0) {\n             MapleData data = getItemData(itemId);\n             if (data != null) {\n                 bRestricted = MapleDataTool.getIntConvert(\"info/only\", data, 0) == 1;\n             }\n         }\n-        \n+\n         pickupRestrictionCache.put(itemId, bRestricted);\n         return bRestricted;\n     }\n \n     private Pair<Map<String, Integer>, MapleData> getSkillStatsInternal(int itemId) {\n         Map<String, Integer> ret = skillUpgradeCache.get(itemId);\n         MapleData retSkill = skillUpgradeInfoCache.get(itemId);\n-        \n+\n         if(ret != null) return new Pair<>(ret, retSkill);\n-        \n+\n         retSkill = null;\n         ret = new LinkedHashMap<>();\n         MapleData item = getItemData(itemId);\n@@ -1282,20 +1291,20 @@ public boolean isPickupRestricted(int itemId) {\n                 ret.put(\"masterLevel\", MapleDataTool.getInt(\"masterLevel\", info, 0));\n                 ret.put(\"reqSkillLevel\", MapleDataTool.getInt(\"reqSkillLevel\", info, 0));\n                 ret.put(\"success\", MapleDataTool.getInt(\"success\", info, 0));\n-                \n+\n                 retSkill = info.getChildByPath(\"skill\");\n             }\n         }\n-        \n+\n         skillUpgradeCache.put(itemId, ret);\n         skillUpgradeInfoCache.put(itemId, retSkill);\n         return new Pair<>(ret, retSkill);\n     }\n-    \n+\n     public Map<String, Integer> getSkillStats(int itemId, double playerJob) {\n         Pair<Map<String, Integer>, MapleData> retData = getSkillStatsInternal(itemId);\n         if(retData.getLeft().isEmpty()) return null;\n-        \n+\n         Map<String, Integer> ret = new LinkedHashMap<>(retData.getLeft());\n         MapleData skill = retData.getRight();\n         int curskill;\n@@ -1317,20 +1326,20 @@ public boolean isPickupRestricted(int itemId) {\n \n     public Pair<Integer, Boolean> canPetConsume(Integer petId, Integer itemId) {\n         Pair<Integer, Set<Integer>> foodData = cashPetFoodCache.get(itemId);\n-        \n+\n         if(foodData == null) {\n             Set<Integer> pets = new HashSet<>(4);\n             int inc = 1;\n-            \n+\n             MapleData data = getItemData(itemId);\n             if(data != null) {\n                 MapleData specData = data.getChildByPath(\"spec\");\n                 for(MapleData specItem : specData.getChildren()) {\n                     String itemName = specItem.getName();\n-                    \n+\n                     try {\n                         Integer.parseInt(itemName); // check if it's a petid node\n-                        \n+\n                         Integer petid = MapleDataTool.getInt(specItem, 0);\n                         pets.add(petid);\n                     } catch(NumberFormatException npe) {\n@@ -1340,11 +1349,11 @@ public boolean isPickupRestricted(int itemId) {\n                     }\n                 }\n             }\n-            \n+\n             foodData = new Pair<>(inc, pets);\n             cashPetFoodCache.put(itemId, foodData);\n         }\n-        \n+\n         return new Pair<>(foodData.getLeft(), foodData.getRight().contains(petId));\n     }\n \n@@ -1357,7 +1366,7 @@ public boolean isQuestItem(int itemId) {\n         isQuestItemCache.put(itemId, questItem);\n         return questItem;\n     }\n-    \n+\n     public boolean isPartyQuestItem(int itemId) {\n         if (isPartyQuestItemCache.containsKey(itemId)) {\n             return isPartyQuestItemCache.get(itemId);\n@@ -1452,7 +1461,7 @@ public int getStateChangeItem(int itemId) {\n             return triggerItem;\n         }\n     }\n-    \n+\n     public int getCreateItem(int itemId) {\n         if (createItem.containsKey(itemId)) {\n             return createItem.get(itemId);\n@@ -1462,7 +1471,7 @@ public int getCreateItem(int itemId) {\n             return itemFrom;\n         }\n     }\n-    \n+\n     public int getMobItem(int itemId) {\n         if (mobItem.containsKey(itemId)) {\n             return mobItem.get(itemId);\n@@ -1472,7 +1481,7 @@ public int getMobItem(int itemId) {\n             return mobItemCatch;\n         }\n     }\n-    \n+\n     public int getUseDelay(int itemId) {\n         if (useDelay.containsKey(itemId)) {\n             return useDelay.get(itemId);\n@@ -1482,7 +1491,7 @@ public int getUseDelay(int itemId) {\n             return mobUseDelay;\n         }\n     }\n-    \n+\n     public int getMobHP(int itemId) {\n         if (mobHP.containsKey(itemId)) {\n             return mobHP.get(itemId);\n@@ -1568,20 +1577,20 @@ public boolean isCash(int itemId) {\n         int itemType = itemId / 1000000;\n         if (itemType == 5) return true;\n         if (itemType != 1) return false;\n-        \n+\n         Map<String, Integer> eqpStats = getEquipStats(itemId);\n         return eqpStats != null && eqpStats.get(\"cash\") == 1;\n     }\n-    \n+\n     public boolean isUpgradeable(int itemId) {\n         Item it = this.getEquipById(itemId);\n         Equip eq = (Equip)it;\n-        \n+\n         return (eq.getUpgradeSlots() > 0 || eq.getStr() > 0 || eq.getDex() > 0 || eq.getInt() > 0 || eq.getLuk() > 0 ||\n                 eq.getWatk() > 0 || eq.getMatk() > 0 || eq.getWdef() > 0 || eq.getMdef() > 0 || eq.getAcc() > 0 ||\n                 eq.getAvoid() > 0 || eq.getSpeed() > 0 || eq.getJump() > 0 || eq.getHp() > 0 || eq.getMp() > 0);\n     }\n-    \n+\n     public Collection<Item> canWearEquipment(MapleCharacter chr, Collection<Item> items) {\n         MapleInventory inv = chr.getInventory(MapleInventoryType.EQUIPPED);\n         if (inv.checked()) {\n@@ -1658,14 +1667,14 @@ public boolean isUpgradeable(int itemId) {\n         return itemz;\n     }\n \n-    public boolean canWearEquipment(MapleCharacter chr, Equip equip, int dst) {      \n+    public boolean canWearEquipment(MapleCharacter chr, Equip equip, int dst) {\n         int id = equip.getItemId();\n-        \n+\n         if(ItemConstants.isWeddingRing(id) && chr.hasJustMarried()) {\n             chr.dropMessage(5, \"The Wedding Ring cannot be equipped on this map.\");  // will dc everyone due to doubled couple effect\n             return false;\n         }\n-        \n+\n         String islot = getEquipmentSlot(id);\n         if (!EquipSlot.getFromTextSlot(islot).isAllowed(dst, isCash(id))) {\n             equip.wear(false);\n@@ -1675,13 +1684,13 @@ public boolean canWearEquipment(MapleCharacter chr, Equip equip, int dst) {\n             FilePrinter.printError(FilePrinter.EXPLOITS + chr.getName() + \".txt\", chr.getName() + \" tried to equip \" + itemName + \" into \" + dst + \" slot.\");\n             return false;\n         }\n-        \n+\n         if (chr.getJob() == MapleJob.SUPERGM || chr.getJob() == MapleJob.GM) {\n             equip.wear(true);\n             return true;\n         }\n-                \n-                \n+\n+\n         boolean highfivestamp = false;\n         /* Removed check above for message ><\n          try {\n@@ -1695,7 +1704,7 @@ public boolean canWearEquipment(MapleCharacter chr, Equip equip, int dst) {\n          } catch (SQLException ex) {\n             ex.printStackTrace();\n          }*/\n-       \n+\n         int reqLevel = getEquipLevelReq(equip.getItemId());\n         if (highfivestamp) {\n             reqLevel -= 5;\n@@ -1727,7 +1736,7 @@ public boolean canWearEquipment(MapleCharacter chr, Equip equip, int dst) {\n         equip.wear(true);\n         return true;\n     }\n-    \n+\n     public ArrayList<Pair<Integer, String>> getItemDataByName(String name) {\n         ArrayList<Pair<Integer, String>> ret = new ArrayList<>();\n         for (Pair<Integer, String> itemPair : MapleItemInformationProvider.getInstance().getAllItems()) {\n@@ -1742,26 +1751,26 @@ private MapleData getEquipLevelInfo(int itemId) {\n         MapleData equipLevelData = equipLevelInfoCache.get(itemId);\n         if (equipLevelData == null) {\n             if (equipLevelInfoCache.containsKey(itemId)) return null;\n-            \n+\n             MapleData iData = getItemData(itemId);\n             if (iData != null) {\n                 MapleData data = iData.getChildByPath(\"info/level\");\n                 if (data != null) {\n                     equipLevelData = data.getChildByPath(\"info\");\n                 }\n             }\n-            \n+\n             equipLevelInfoCache.put(itemId, equipLevelData);\n         }\n-        \n+\n         return equipLevelData;\n     }\n-    \n+\n     public int getEquipLevel(int itemId, boolean getMaxLevel) {\n         Integer eqLevel = equipMaxLevelCache.get(itemId);\n         if (eqLevel == null) {\n             eqLevel = 1;    // greater than 1 means that it was supposed to levelup on GMS\n-            \n+\n             MapleData data = getEquipLevelInfo(itemId);\n             if (data != null) {\n                 if (getMaxLevel) {\n@@ -1774,7 +1783,7 @@ public int getEquipLevel(int itemId, boolean getMaxLevel) {\n                             equipMaxLevelCache.put(itemId, eqLevel);\n                             break;\n                         }\n-                        \n+\n                         curLevel++;\n                     }\n                 } else {\n@@ -1785,10 +1794,10 @@ public int getEquipLevel(int itemId, boolean getMaxLevel) {\n                 }\n             }\n         }\n-        \n+\n         return eqLevel;\n     }\n-    \n+\n     public List<Pair<String, Integer>> getItemLevelupStats(int itemId, int level) {\n         List<Pair<String, Integer>> list = new LinkedList<>();\n         MapleData data = getEquipLevelInfo(itemId);\n@@ -1833,10 +1842,10 @@ public int getEquipLevel(int itemId, boolean getMaxLevel) {\n \n         return list;\n     }\n-    \n+\n     private static int getCrystalForLevel(int level) {\n         int range = (level - 1) / 10;\n-        \n+\n         if(range < 5) {\n             return 4260000;\n         } else if(range > 11) {\n@@ -1866,7 +1875,7 @@ private static int getCrystalForLevel(int level) {\n             }\n         }\n     }\n-    \n+\n     public Pair<String, Integer> getMakerReagentStatUpgrade(int itemId) {\n         try {\n             Pair<String, Integer> statUpgd = statUpgradeMakerCache.get(itemId);\n@@ -1875,38 +1884,38 @@ private static int getCrystalForLevel(int level) {\n             } else if(statUpgradeMakerCache.containsKey(itemId)) {\n                 return null;\n             }\n-            \n+\n             Connection con = DatabaseConnection.getConnection();\n             PreparedStatement ps = con.prepareStatement(\"SELECT stat, value FROM makerreagentdata WHERE itemid = ?\");\n             ps.setInt(1, itemId);\n             ResultSet rs = ps.executeQuery();\n             if(rs.next()) {\n                 String statType = rs.getString(\"stat\");\n                 int statGain = rs.getInt(\"value\");\n-                \n+\n                 statUpgd = new Pair<>(statType, statGain);\n             }\n             rs.close();\n             ps.close();\n             con.close();\n-            \n+\n             statUpgradeMakerCache.put(itemId, statUpgd);\n             return statUpgd;\n         } catch (Exception e) {\n             e.printStackTrace();\n             return null;\n         }\n     }\n-    \n+\n     public int getMakerCrystalFromLeftover(Integer leftoverId) {\n         try {\n             Integer itemid = mobCrystalMakerCache.get(leftoverId);\n             if(itemid != null) {\n                 return itemid;\n             }\n-            \n+\n             itemid = -1;\n-            \n+\n             Connection con = DatabaseConnection.getConnection();\n             PreparedStatement ps = con.prepareStatement(\"SELECT dropperid FROM drop_data WHERE itemid = ? ORDER BY dropperid;\");\n             ps.setInt(1, leftoverId);\n@@ -1918,19 +1927,19 @@ public int getMakerCrystalFromLeftover(Integer leftoverId) {\n             rs.close();\n             ps.close();\n             con.close();\n-            \n+\n             mobCrystalMakerCache.put(leftoverId, itemid);\n             return itemid;\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return -1;\n     }\n-    \n+\n     public MakerItemCreateEntry getMakerItemEntry(int toCreate) {\n         MakerItemCreateEntry makerEntry;\n-        \n+\n         if ((makerEntry = makerItemCache.get(toCreate)) != null) {\n             return new MakerItemCreateEntry(makerEntry);\n         } else {\n@@ -1967,30 +1976,30 @@ public MakerItemCreateEntry getMakerItemEntry(int toCreate) {\n                 makerEntry = null;\n             }\n         }\n-        \n+\n         return makerEntry;\n     }\n-    \n+\n     public int getMakerCrystalFromEquip(Integer equipId) {\n         try {\n             return getCrystalForLevel(getEquipLevelReq(equipId));\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return -1;\n     }\n-    \n+\n     public int getMakerStimulantFromEquip(Integer equipId) {\n         try {\n             return getCrystalForLevel(getEquipLevelReq(equipId));\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return -1;\n     }\n-    \n+\n     public int getMakerDisassembledQuantity(Integer itemId) {\n         int avail = 0;\n         Connection con;\n@@ -1999,21 +2008,21 @@ public int getMakerDisassembledQuantity(Integer itemId) {\n             PreparedStatement ps = con.prepareStatement(\"SELECT count FROM makerrecipedata WHERE itemid = ? AND req_item >= 4260000 AND req_item <= 4260008 ORDER BY count DESC\");\n             ps.setInt(1, itemId);\n             ResultSet rs = ps.executeQuery();\n-            \n+\n             if(rs.next()) {\n                 avail = (int) Math.ceil(rs.getInt(\"count\") / 2);   // return to the player half of the crystals needed\n             }\n-            \n+\n             rs.close();\n             ps.close();\n             con.close();\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return avail;\n     }\n-    \n+\n     public int getMakerDisassembledFee(Integer itemId) {\n         int fee = -1;\n         Connection con;\n@@ -2022,23 +2031,23 @@ public int getMakerDisassembledFee(Integer itemId) {\n             PreparedStatement ps = con.prepareStatement(\"SELECT req_meso FROM makercreatedata WHERE itemid = ?\");\n             ps.setInt(1, itemId);\n             ResultSet rs = ps.executeQuery();\n-            \n+\n             if(rs.next()) {   // cost is 13.6363~ % of the original value trimmed by 1000.\n                 float val = (float) (rs.getInt(\"req_meso\") * 0.13636363636364);\n                 fee = (int) (val / 1000);\n                 fee *= 1000;\n             }\n-            \n+\n             rs.close();\n             ps.close();\n             con.close();\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return fee;\n     }\n-    \n+\n     public int getMakerStimulant(int itemId) {  // thanks to Arnah\n         Integer itemid = makerCatalystCache.get(itemId);\n         if(itemid != null) {\n@@ -2058,7 +2067,7 @@ public int getMakerStimulant(int itemId) {  // thanks to Arnah\n         makerCatalystCache.put(itemId, itemid);\n         return itemid;\n     }\n-    \n+\n     public Set<String> getWhoDrops(Integer itemId) {\n         Set<String> list = new HashSet<>();\n         Connection con = null;\n@@ -2079,37 +2088,37 @@ public int getMakerStimulant(int itemId) {  // thanks to Arnah\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n+\n         return list;\n     }\n-    \n+\n     private boolean canUseSkillBook(MapleCharacter player, Integer skillBookId) {\n         Map<String, Integer> skilldata = getSkillStats(skillBookId, player.getJob().getId());\n         if(skilldata == null || skilldata.get(\"skillid\") == 0) return false;\n-            \n+\n         Skill skill2 = SkillFactory.getSkill(skilldata.get(\"skillid\"));\n         return (skilldata.get(\"skillid\") != 0 && ((player.getSkillLevel(skill2) >= skilldata.get(\"reqSkillLevel\") || skilldata.get(\"reqSkillLevel\") == 0) && player.getMasterLevel(skill2) < skilldata.get(\"masterLevel\")));\n     }\n-    \n+\n     public List<Integer> usableMasteryBooks(MapleCharacter player) {\n         List<Integer> masterybook = new LinkedList<>();\n         for(Integer i = 2290000; i <= 2290139; i++) {\n             if(canUseSkillBook(player, i)) {\n                 masterybook.add(i);\n             }\n         }\n-        \n+\n         return masterybook;\n     }\n-    \n+\n     public List<Integer> usableSkillBooks(MapleCharacter player) {\n         List<Integer> skillbook = new LinkedList<>();\n         for(Integer i = 2280000; i <= 2280019; i++) {\n             if(canUseSkillBook(player, i)) {\n                 skillbook.add(i);\n             }\n         }\n-        \n+\n         return skillbook;\n     }\n "}]}]},
