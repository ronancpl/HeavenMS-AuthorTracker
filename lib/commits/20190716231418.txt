{"fetchDate": "2019-12-19", "content": [{"sha": "2df59b293bef8923d4aed112e3a13cbbce48edd0", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6MmRmNTliMjkzYmVmODkyM2Q0YWVkMTEyZTNhMTNjYmJjZTQ4ZWRkMA==", "commit": {"author": {"name": "Ubaware", "email": "52778420+Ubaware@users.noreply.github.com", "date": "2019-07-16T23:14:18Z"}, "committer": {"name": "Ronan Lana", "email": "rcpl2010@gmail.com", "date": "2019-07-16T23:14:18Z"}, "message": "Issue #126 : Eliminated (almost) all object creation in AbstractMovementPacketHandler. (#487)\n\n* Eliminated (almost) all object creation in AbstractMovementPacketHandler. Pets still use old system.\r\n\r\n* Removed debug code & comments I forgot about.", "tree": {"sha": "8708530a5c19d766a9e8af61e313397325cd2e8e", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/8708530a5c19d766a9e8af61e313397325cd2e8e"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/2df59b293bef8923d4aed112e3a13cbbce48edd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/2df59b293bef8923d4aed112e3a13cbbce48edd0", "html_url": "https://github.com/ronancpl/HeavenMS/commit/2df59b293bef8923d4aed112e3a13cbbce48edd0", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/2df59b293bef8923d4aed112e3a13cbbce48edd0/comments", "author": {"login": "Ubaware", "id": 52778420, "node_id": "MDQ6VXNlcjUyNzc4NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/52778420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ubaware", "html_url": "https://github.com/Ubaware", "followers_url": "https://api.github.com/users/Ubaware/followers", "following_url": "https://api.github.com/users/Ubaware/following{/other_user}", "gists_url": "https://api.github.com/users/Ubaware/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ubaware/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ubaware/subscriptions", "organizations_url": "https://api.github.com/users/Ubaware/orgs", "repos_url": "https://api.github.com/users/Ubaware/repos", "events_url": "https://api.github.com/users/Ubaware/events{/privacy}", "received_events_url": "https://api.github.com/users/Ubaware/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5cec7f33c3617f4762b9b3d2388aeb21c405dd", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/ab5cec7f33c3617f4762b9b3d2388aeb21c405dd", "html_url": "https://github.com/ronancpl/HeavenMS/commit/ab5cec7f33c3617f4762b9b3d2388aeb21c405dd"}], "stats": {"total": 331, "additions": 224, "deletions": 107}, "files": [{"sha": "1eb2a6c28dae7153c5e542e53d52c90f53152b34", "filename": "src/client/MapleCharacter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/client/MapleCharacter.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/client/MapleCharacter.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/MapleCharacter.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -1276,7 +1276,7 @@ public void broadcastStance(int newStance) {\n     }\n     \n     public void broadcastStance() {\n-        map.broadcastMessage(this, MaplePacketCreator.movePlayer(id, this.getIdleMovement()), false);\n+        map.broadcastMessage(this, MaplePacketCreator.movePlayer(id, this.getIdleMovement(), getIdleMovementDataLength()), false);\n     }\n     \n     public MapleMap getWarpMap(int map) {"}, {"sha": "ed9cd868122e0ed097ba7a246176943eff1592e6", "filename": "src/net/server/channel/handlers/AbstractMovementPacketHandler.java", "status": "modified", "additions": 88, "deletions": 10, "changes": 98, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/AbstractMovementPacketHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/AbstractMovementPacketHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/AbstractMovementPacketHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -30,7 +30,6 @@\n import server.movement.AbsoluteLifeMovement;\n import server.movement.ChangeEquip;\n import server.movement.JumpDownMovement;\n-import server.movement.LifeMovement;\n import server.movement.LifeMovementFragment;\n import server.movement.RelativeLifeMovement;\n import server.movement.TeleportMovement;\n@@ -144,17 +143,96 @@\n         }\n         return res;\n     }\n-\n-    protected void updatePosition(List<LifeMovementFragment> movement, AnimatedMapleMapObject target, int yoffset) {\n-        for (LifeMovementFragment move : movement) {\n-            if (move instanceof LifeMovement) {\n-                if (move instanceof AbsoluteLifeMovement) {\n-                    Point position = ((LifeMovement) move).getPosition();\n-                    position.y += yoffset;\n-                    target.setPosition(position);\n+    \n+    protected void updatePosition(LittleEndianAccessor lea, AnimatedMapleMapObject target, int yOffset) {\n+    \t\n+        byte numCommands = lea.readByte();\n+        for (byte i = 0; i < numCommands; i++) {\n+            byte command = lea.readByte();\n+            switch (command) {\n+                case 0: // normal move\n+                case 5:\n+                case 17: { // Float\n+                \t//Absolute movement - only this is important for the server, other movement can be passed to the client\n+                    short xpos = lea.readShort(); //is signed fine here?\n+                    short ypos = lea.readShort();\n+                    target.setPosition(new Point(xpos, ypos + yOffset));\n+                    lea.skip(6); //xwobble = lea.readShort(); ywobble = lea.readShort(); fh = lea.readShort();\n+                    byte newstate = lea.readByte();\n+                    target.setStance(newstate);\n+                    lea.readShort(); //duration\n+                    break;\n                 }\n-                target.setStance(((LifeMovement) move).getNewstate());\n+                case 1:\n+                case 2:\n+                case 6: // fj\n+                case 12:\n+                case 13: // Shot-jump-back thing\n+                case 16: // Float\n+                case 18:\n+                case 19: // Springs on maps\n+                case 20: // Aran Combat Step\n+                case 22: {\n+                \t//Relative movement - server only cares about stance\n+                \tlea.skip(4); //xpos = lea.readShort(); ypos = lea.readShort();\n+                    byte newstate = lea.readByte();\n+                    target.setStance(newstate);\n+                    lea.readShort(); //duration\n+                    break;\n+                }\n+                case 3:\n+                case 4: // tele... -.-\n+                case 7: // assaulter\n+                case 8: // assassinate\n+                case 9: // rush\n+                case 11: //chair\n+                {\n+//                case 14: {\n+                \t//Teleport movement - same as above\n+                \tlea.skip(8); //xpos = lea.readShort(); ypos = lea.readShort(); xwobble = lea.readShort(); ywobble = lea.readShort();\n+                    byte newstate = lea.readByte();\n+                    target.setStance(newstate);\n+                    break;\n+                }\n+                case 14:\n+                    lea.skip(9); // jump down (?)\n+                    break;\n+                case 10: // Change Equip\n+                    //ignored by server\n+                    lea.readByte();\n+                    break;\n+                /*case 11: { // Chair\n+                    short xpos = lea.readShort();\n+                    short ypos = lea.readShort();\n+                    short fh = lea.readShort();\n+                    byte newstate = lea.readByte();\n+                    short duration = lea.readShort();\n+                    ChairMovement cm = new ChairMovement(command, new Point(xpos, ypos), duration, newstate);\n+                    cm.setFh(fh);\n+                    res.add(cm);\n+                    break;\n+                }*/\n+                case 15: {\n+                \t//Jump down movement - stance only\n+                \tlea.skip(12); //short xpos = lea.readShort(); ypos = lea.readShort(); xwobble = lea.readShort(); ywobble = lea.readShort(); fh = lea.readShort(); ofh = lea.readShort();\n+                    byte newstate = lea.readByte();\n+                    target.setStance(newstate);\n+                    lea.readShort(); // duration\n+                    break;\n+                }\n+                case 21: {//Causes aran to do weird stuff when attacking o.o\n+                    /*byte newstate = lea.readByte();\n+                     short unk = lea.readShort();\n+                     AranMovement am = new AranMovement(command, null, unk, newstate);\n+                     res.add(am);*/\n+                    lea.skip(3);\n+                    break;\n+                }\n+                default:\n+                    System.out.println(\"Unhandled Case:\" + command);\n+                    return;\n             }\n         }\n+        return;\n     }\n }"}, {"sha": "16c84224072ec406630930f24be2e81fdda2f82d", "filename": "src/net/server/channel/handlers/MoveDragonHandler.java", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveDragonHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveDragonHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/MoveDragonHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -21,12 +21,11 @@\n  */\n package net.server.channel.handlers;\n \n+import java.awt.Point;\n+\n import client.MapleCharacter;\n import client.MapleClient;\n-import java.awt.Point;\n-import java.util.List;\n import server.maps.MapleDragon;\n-import server.movement.LifeMovementFragment;\n import tools.MaplePacketCreator;\n import tools.data.input.SeekableLittleEndianAccessor;\n \n@@ -36,14 +35,16 @@\n     public void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c) {\n         final MapleCharacter chr = c.getPlayer();\n         final Point startPos = new Point(slea.readShort(), slea.readShort());\n-        List<LifeMovementFragment> res = parseMovement(slea);\n+        long movementDataStart = slea.getPosition();\n         final MapleDragon dragon = chr.getDragon();\n-        if (dragon != null && res != null && res.size() > 0) {\n-            updatePosition(res, dragon, 0);\n+        updatePosition(slea, dragon, 0);\n+        long movementDataLength = slea.getPosition() - movementDataStart; //how many bytes were read by updatePosition\n+        if (dragon != null && movementDataLength > 0) {\n+            slea.seek(movementDataStart);\n             if (chr.isHidden()) {\n-                chr.getMap().broadcastGMMessage(chr, MaplePacketCreator.moveDragon(dragon, startPos, res));\n+                chr.getMap().broadcastGMMessage(chr, MaplePacketCreator.moveDragon(dragon, startPos, slea, movementDataLength));\n             } else {\n-                chr.getMap().broadcastMessage(chr, MaplePacketCreator.moveDragon(dragon, startPos, res), dragon.getPosition());\n+                chr.getMap().broadcastMessage(chr, MaplePacketCreator.moveDragon(dragon, startPos, slea, movementDataLength), dragon.getPosition());\n             }\n         }\n     }"}, {"sha": "70abe5a64a0a899cb933800757f9435c37a40f6a", "filename": "src/net/server/channel/handlers/MoveLifeHandler.java", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveLifeHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveLifeHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/MoveLifeHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -141,24 +141,26 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n \t\tshort start_x = slea.readShort(); // hmm.. startpos?\n \t\tshort start_y = slea.readShort(); // hmm...\n \t\tPoint startPos = new Point(start_x, start_y - 2);\n-\t\tList<LifeMovementFragment> res = parseMovement(slea);\n+\t\tlong movementDataStart = slea.getPosition();\n+        updatePosition(slea, monster, 0);\n+        long movementDataLength = slea.getPosition() - movementDataStart; //how many bytes were read by updatePosition\n \t\t\n-                Boolean aggro = monster.aggroMoveLifeUpdate(player);\n-                if (aggro == null) return;\n-                \n-                if (nextUse != null) {\n-                        c.announce(MaplePacketCreator.moveMonsterResponse(objectid, moveid, mobMp, aggro, nextSkillId, nextSkillLevel));\n+        Boolean aggro = monster.aggroMoveLifeUpdate(player);\n+        if (aggro == null) return;\n+        \n+        if (nextUse != null) {\n+            c.announce(MaplePacketCreator.moveMonsterResponse(objectid, moveid, mobMp, aggro, nextSkillId, nextSkillLevel));\n \t\t} else {\n \t\t\tc.announce(MaplePacketCreator.moveMonsterResponse(objectid, moveid, mobMp, aggro));\n \t\t}\n                 \n-\t\tif (res != null) {\n-                        if (ServerConstants.USE_DEBUG_SHOW_RCVD_MVLIFE) {\n-                                System.out.println((isSkill ? \"SKILL \" : (isAttack ? \"ATTCK \" : \" \")) + \"castPos: \" + castPos + \" rawAct: \" + rawActivity + \" opt: \" + pOption + \" skillID: \" + useSkillId + \" skillLV: \" + useSkillLevel + \" \" + \"allowSkill: \" + nextMovementCouldBeSkill + \" mobMp: \" + mobMp);\n-                        }\n-                        \n-                        map.broadcastMessage(player, MaplePacketCreator.moveMonster(objectid, nextMovementCouldBeSkill, rawActivity, useSkillId, useSkillLevel, pOption, startPos, res), monster.getPosition());\n-\t\t\tupdatePosition(res, monster, -2);\n+\t\tif (movementDataLength > 0) {\n+            if (ServerConstants.USE_DEBUG_SHOW_RCVD_MVLIFE) {\n+                System.out.println((isSkill ? \"SKILL \" : (isAttack ? \"ATTCK \" : \" \")) + \"castPos: \" + castPos + \" rawAct: \" + rawActivity + \" opt: \" + pOption + \" skillID: \" + useSkillId + \" skillLV: \" + useSkillLevel + \" \" + \"allowSkill: \" + nextMovementCouldBeSkill + \" mobMp: \" + mobMp);\n+            }\n+            slea.seek(movementDataStart);\n+            map.broadcastMessage(player, MaplePacketCreator.moveMonster(objectid, nextMovementCouldBeSkill, rawActivity, useSkillId, useSkillLevel, pOption, startPos, slea, movementDataLength), monster.getPosition());\n+\t\t\t//updatePosition(res, monster, -2); //does this need to be done after the packet is broadcast?\n \t\t\tmap.moveMonster(monster, monster.getPosition());\n \t\t}\n                 "}, {"sha": "dd62570498ac8215cb2610034b61eb282dbcc407", "filename": "src/net/server/channel/handlers/MovePetHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MovePetHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MovePetHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/MovePetHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -35,7 +35,7 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n         slea.readLong();\n //        Point startPos = StreamUtil.readShortPoint(slea);\n         List<LifeMovementFragment> res = parseMovement(slea);\n-        if (res.isEmpty()) {\n+        if (res == null || res.isEmpty()) {\n             return;\n         }\n         MapleCharacter player = c.getPlayer();"}, {"sha": "2a572003bd5eb8f479a7cb9e340bbe61dfb9cc8d", "filename": "src/net/server/channel/handlers/MovePlayerHandler.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MovePlayerHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MovePlayerHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/MovePlayerHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -22,23 +22,23 @@\n package net.server.channel.handlers;\n \n import client.MapleClient;\n-import java.util.List;\n-import server.movement.LifeMovementFragment;\n import tools.MaplePacketCreator;\n import tools.data.input.SeekableLittleEndianAccessor;\n \n public final class MovePlayerHandler extends AbstractMovementPacketHandler {\n     @Override\n     public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c) {\n         slea.skip(9);\n-        final List<LifeMovementFragment> res = parseMovement(slea);\n-        if (res != null) {\n-            updatePosition(res, c.getPlayer(), 0);\n+        long movementDataStart = slea.getPosition();\n+        updatePosition(slea, c.getPlayer(), 0);\n+        long movementDataLength = slea.getPosition() - movementDataStart; //how many bytes were read by updatePosition\n+        if (movementDataLength > 0) {\n+        \tslea.seek(movementDataStart);\n             c.getPlayer().getMap().movePlayer(c.getPlayer(), c.getPlayer().getPosition());\n             if (c.getPlayer().isHidden()) {\n-                c.getPlayer().getMap().broadcastGMMessage(c.getPlayer(), MaplePacketCreator.movePlayer(c.getPlayer().getId(), res), false);\n+                c.getPlayer().getMap().broadcastGMMessage(c.getPlayer(), MaplePacketCreator.movePlayer(c.getPlayer().getId(), slea, movementDataLength), false);\n             } else {\n-                c.getPlayer().getMap().broadcastMessage(c.getPlayer(), MaplePacketCreator.movePlayer(c.getPlayer().getId(), res), false);\n+                c.getPlayer().getMap().broadcastMessage(c.getPlayer(), MaplePacketCreator.movePlayer(c.getPlayer().getId(), slea, movementDataLength), false);\n             }\n         }\n     }"}, {"sha": "3ea5c0118b0c98192397b460db7c5a446f270b12", "filename": "src/net/server/channel/handlers/MoveSummonHandler.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveSummonHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/net/server/channel/handlers/MoveSummonHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/MoveSummonHandler.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -23,11 +23,10 @@\n \n import java.awt.Point;\n import java.util.Collection;\n-import java.util.List;\n+\n import client.MapleCharacter;\n import client.MapleClient;\n import server.maps.MapleSummon;\n-import server.movement.LifeMovementFragment;\n import tools.MaplePacketCreator;\n import tools.data.input.SeekableLittleEndianAccessor;\n \n@@ -36,7 +35,6 @@\n     public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c) {\n         int oid = slea.readInt();\n         Point startPos = new Point(slea.readShort(), slea.readShort());\n-        List<LifeMovementFragment> res = parseMovement(slea);\n         MapleCharacter player = c.getPlayer();\n         Collection<MapleSummon> summons = player.getSummonsValues();\n         MapleSummon summon = null;\n@@ -46,9 +44,12 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n                 break;\n             }\n         }\n+        long movementDataStart = slea.getPosition();\n+        updatePosition(slea, summon, 0);\n+        long movementDataLength = slea.getPosition() - movementDataStart; //how many bytes were read by updatePosition\n         if (summon != null) {\n-            updatePosition(res, summon, 0);\n-            player.getMap().broadcastMessage(player, MaplePacketCreator.moveSummon(player.getId(), oid, startPos, res), summon.getPosition());\n+            slea.seek(movementDataStart);\n+            player.getMap().broadcastMessage(player, MaplePacketCreator.moveSummon(player.getId(), oid, startPos, slea, movementDataLength), summon.getPosition());\n         }\n     }\n }"}, {"sha": "797eed98f6d74d2af21056be92a0840c15150ae0", "filename": "src/server/life/MapleMonster.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/server/life/MapleMonster.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/server/life/MapleMonster.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/life/MapleMonster.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -1337,7 +1337,7 @@ public void resetMobPosition(Point newPoint) {\n         aggroRemoveController();\n         \n         setPosition(newPoint);\n-        map.broadcastMessage(MaplePacketCreator.moveMonster(this.getObjectId(), false, -1, 0, 0, 0, this.getPosition(), this.getIdleMovement()));\n+        map.broadcastMessage(MaplePacketCreator.moveMonster(this.getObjectId(), false, -1, 0, 0, 0, this.getPosition(), this.getIdleMovement(), getIdleMovementDataLength()));\n         map.moveMonster(this, this.getPosition());\n         \n         aggroUpdateController();"}, {"sha": "7e6921880369abbc601e0789831c2b3c41a15760", "filename": "src/server/maps/AbstractAnimatedMapleMapObject.java", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/server/maps/AbstractAnimatedMapleMapObject.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/server/maps/AbstractAnimatedMapleMapObject.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/AbstractAnimatedMapleMapObject.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -21,14 +21,31 @@\n */\n package server.maps;\n \n-import java.awt.Point;\n-import java.util.Collections;\n-import java.util.List;\n-import server.movement.AbsoluteLifeMovement;\n-import server.movement.LifeMovementFragment;\n+import java.util.Arrays;\n+\n+import tools.data.input.ByteArrayByteStream;\n+import tools.data.input.GenericSeekableLittleEndianAccessor;\n+import tools.data.input.SeekableLittleEndianAccessor;\n+import tools.data.output.MaplePacketLittleEndianWriter;\n \n public abstract class AbstractAnimatedMapleMapObject extends AbstractMapleMapObject implements AnimatedMapleMapObject {\n-    private int stance;\n+    \n+\tstatic {\n+\t\tMaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter((int) getIdleMovementDataLength());\n+    \tmplew.write(1); //movement command count\n+    \tmplew.writeShort(-1); //x\n+    \tmplew.writeShort(-1); //y\n+    \tmplew.writeShort(0); //xwobble\n+    \tmplew.writeShort(0); //ywobble\n+    \tmplew.writeShort(0); //fh\n+    \tmplew.write(-1); //stance\n+    \tmplew.writeShort(0); //duration\n+    \tidleMovementPacketData = mplew.getPacket();\n+\t}\n+\t\n+\tprivate static final byte[] idleMovementPacketData;\n+\t\n+\tprivate int stance;\n \n     @Override\n     public int getStance() {\n@@ -45,11 +62,20 @@ public boolean isFacingLeft() {\n         return Math.abs(stance) % 2 == 1;\n     }\n     \n-    public List<LifeMovementFragment> getIdleMovement() {\n-        AbsoluteLifeMovement alm = new AbsoluteLifeMovement(0, getPosition(), 0, getStance());\n-        alm.setPixelsPerSecond(new Point(0, 0));\n-        \n-        List<LifeMovementFragment> moveUpdate = Collections.singletonList((LifeMovementFragment) alm);\n-        return moveUpdate;\n+    public SeekableLittleEndianAccessor getIdleMovement() {\n+    \tbyte[] movementData = Arrays.copyOf(idleMovementPacketData, idleMovementPacketData.length);\n+    \t//seems wasteful to create a whole packet writer when only a few values are changed\n+    \tint x = getPosition().x;\n+    \tint y = getPosition().y;\n+    \tmovementData[1] = (byte) (x & 0xFF); //x\n+    \tmovementData[2] = (byte) (x >> 8 & 0xFF);\n+    \tmovementData[3] = (byte) (y & 0xFF); //y\n+    \tmovementData[4] = (byte) (y >> 8 & 0xFF);\n+    \tmovementData[11] = (byte) (getStance() & 0xFF);\n+    \treturn new GenericSeekableLittleEndianAccessor(new ByteArrayByteStream(movementData));\n+    }\n+    \n+    public static long getIdleMovementDataLength() {\n+    \treturn 14;\n     }\n }"}, {"sha": "0192563b477466163a376dc799dd45862ef74f75", "filename": "src/tools/MaplePacketCreator.java", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/tools/MaplePacketCreator.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2df59b293bef8923d4aed112e3a13cbbce48edd0/src/tools/MaplePacketCreator.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/MaplePacketCreator.java?ref=2df59b293bef8923d4aed112e3a13cbbce48edd0", "patch": "@@ -35,6 +35,39 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n+import client.BuddylistEntry;\n+import client.MapleBuffStat;\n+import client.MapleCharacter;\n+import client.MapleCharacter.SkillEntry;\n+import client.MapleClient;\n+import client.MapleDisease;\n+import client.MapleFamilyEntry;\n+import client.MapleKeyBinding;\n+import client.MapleMount;\n+import client.MapleQuestStatus;\n+import client.MapleRing;\n+import client.MapleStat;\n+import client.MonsterBook;\n+import client.Skill;\n+import client.SkillMacro;\n+import client.inventory.Equip;\n+import client.inventory.Equip.ScrollResult;\n+import client.inventory.Item;\n+import client.inventory.ItemFactory;\n+import client.inventory.MapleInventory;\n+import client.inventory.MapleInventoryType;\n+import client.inventory.MaplePet;\n+import client.inventory.ModifyInventory;\n+import client.newyear.NewYearCardRecord;\n+import client.status.MonsterStatus;\n+import client.status.MonsterStatusEffect;\n+import constants.ExpTable;\n+import constants.GameConstants;\n+import constants.ItemConstants;\n+import constants.ServerConstants;\n+import constants.skills.Buccaneer;\n+import constants.skills.Corsair;\n+import constants.skills.ThunderBreaker;\n import net.opcodes.SendOpcode;\n import net.server.PlayerCoolDownValueHolder;\n import net.server.Server;\n@@ -59,59 +92,27 @@\n import server.events.gm.MapleSnowball;\n import server.life.MapleMonster;\n import server.life.MapleNPC;\n+import server.life.MaplePlayerNPC;\n import server.life.MobSkill;\n-import server.maps.MapleHiredMerchant;\n+import server.maps.AbstractMapleMapObject;\n import server.maps.MapleDoor;\n import server.maps.MapleDoorObject;\n import server.maps.MapleDragon;\n+import server.maps.MapleHiredMerchant;\n import server.maps.MapleMap;\n import server.maps.MapleMapItem;\n-import server.maps.MapleMist;\n import server.maps.MapleMiniGame;\n import server.maps.MapleMiniGame.MiniGameResult;\n+import server.maps.MapleMist;\n import server.maps.MaplePlayerShop;\n import server.maps.MaplePlayerShopItem;\n import server.maps.MapleReactor;\n import server.maps.MapleSummon;\n-import server.life.MaplePlayerNPC;\n import server.movement.LifeMovementFragment;\n+import tools.data.input.SeekableLittleEndianAccessor;\n import tools.data.output.LittleEndianWriter;\n import tools.data.output.MaplePacketLittleEndianWriter;\n-import client.BuddylistEntry;\n-import client.MapleBuffStat;\n-import client.MapleCharacter;\n-import client.MapleCharacter.SkillEntry;\n-import client.MapleClient;\n-import client.MapleDisease;\n-import client.MapleFamilyEntry;\n-import client.MapleKeyBinding;\n-import client.MapleMount;\n-import client.MapleQuestStatus;\n-import client.MapleRing;\n-import client.MapleStat;\n-import client.MonsterBook;\n-import client.Skill;\n-import client.SkillMacro;\n-import client.inventory.Equip;\n-import client.inventory.Equip.ScrollResult;\n-import client.inventory.Item;\n-import client.inventory.ItemFactory;\n-import client.inventory.MapleInventory;\n-import client.inventory.MapleInventoryType;\n-import client.inventory.MaplePet;\n-import client.inventory.ModifyInventory;\n-import client.newyear.NewYearCardRecord;\n-import client.status.MonsterStatus;\n-import client.status.MonsterStatusEffect;\n-import constants.ExpTable;\n-import constants.GameConstants;\n-import constants.ItemConstants;\n-import constants.ServerConstants;\n-import constants.skills.Buccaneer;\n-import constants.skills.Corsair;\n-import constants.skills.ThunderBreaker;\n import java.util.TimeZone;\n-import server.maps.AbstractMapleMapObject;\n \n /**\n  *\n@@ -2272,33 +2273,41 @@ private static void updatePlayerShopBoxInfo(final MaplePacketLittleEndianWriter\n                 return mplew.getPacket();\n         }\n \n+        private static void rebroadcastMovementList(LittleEndianWriter lew, SeekableLittleEndianAccessor slea, long movementDataLength) {\n+        \t//movement command length is sent by client, probably not a big issue? (could be calculated on server)\n+        \t//if multiple write/reads are slow, could use a (cached?) byte[] buffer\n+        \tfor(long i = 0; i < movementDataLength; i++) {\n+        \t\tlew.write(slea.readByte());\n+        \t}\n+        }\n+        \n         private static void serializeMovementList(LittleEndianWriter lew, List<LifeMovementFragment> moves) {\n-                lew.write(moves.size());\n-                for (LifeMovementFragment move : moves) {\n-                        move.serialize(lew);\n-                }\n+        \tlew.write(moves.size());\n+        \tfor(LifeMovementFragment move : moves) {\n+        \t\tmove.serialize(lew);\n+        \t}\n         }\n \n-        public static byte[] movePlayer(int cid, List<LifeMovementFragment> moves) {\n+        public static byte[] movePlayer(int cid, SeekableLittleEndianAccessor movementSlea, long movementDataLength) {\n                 final MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();\n                 mplew.writeShort(SendOpcode.MOVE_PLAYER.getValue());\n                 mplew.writeInt(cid);\n                 mplew.writeInt(0);\n-                serializeMovementList(mplew, moves);\n+                rebroadcastMovementList(mplew, movementSlea, movementDataLength);\n                 return mplew.getPacket();\n         }\n \n-        public static byte[] moveSummon(int cid, int oid, Point startPos, List<LifeMovementFragment> moves) {\n+        public static byte[] moveSummon(int cid, int oid, Point startPos, SeekableLittleEndianAccessor movementSlea, long movementDataLength) {\n                 final MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();\n                 mplew.writeShort(SendOpcode.MOVE_SUMMON.getValue());\n                 mplew.writeInt(cid);\n                 mplew.writeInt(oid);\n                 mplew.writePos(startPos);\n-                serializeMovementList(mplew, moves);\n+                rebroadcastMovementList(mplew, movementSlea, movementDataLength);\n                 return mplew.getPacket();\n         }\n         \n-        public static byte[] moveMonster(int oid, boolean skillPossible, int skill, int skillId, int skillLevel, int pOption, Point startPos, List<LifeMovementFragment> moves) {\n+        public static byte[] moveMonster(int oid, boolean skillPossible, int skill, int skillId, int skillLevel, int pOption, Point startPos, SeekableLittleEndianAccessor movementSlea, long movementDataLength) {\n                 final MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();\n                 mplew.writeShort(SendOpcode.MOVE_MONSTER.getValue());\n                 mplew.writeInt(oid);\n@@ -2309,7 +2318,7 @@ private static void serializeMovementList(LittleEndianWriter lew, List<LifeMovem\n                 mplew.write(skillLevel);\n                 mplew.writeShort(pOption);\n                 mplew.writePos(startPos);\n-                serializeMovementList(mplew, moves);\n+                rebroadcastMovementList(mplew, movementSlea, movementDataLength);\n                 return mplew.getPacket();\n         }\n         \n@@ -8021,12 +8030,12 @@ public static void addCashItemInformation(final MaplePacketLittleEndianWriter mp\n                 return mplew.getPacket();\n         }\n \n-        public static byte[] moveDragon(MapleDragon dragon, Point startPos, List<LifeMovementFragment> res) {\n+        public static byte[] moveDragon(MapleDragon dragon, Point startPos, SeekableLittleEndianAccessor movementSlea, long movementDataLength) {\n                 final MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();\n                 mplew.writeShort(SendOpcode.MOVE_DRAGON.getValue());\n                 mplew.writeInt(dragon.getOwner().getId());\n                 mplew.writePos(startPos);\n-                serializeMovementList(mplew, res);\n+                rebroadcastMovementList(mplew, movementSlea, movementDataLength);\n                 return mplew.getPacket();\n         }\n "}]}]},
