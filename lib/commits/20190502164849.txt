{"fetchDate": "2019-12-19", "content": [{"sha": "383495a7e91ca85f6dc0c506506ce7a1ec144943", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6MzgzNDk1YTdlOTFjYTg1ZjZkYzBjNTA2NTA2Y2U3YTFlYzE0NDk0Mw==", "commit": {"author": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2019-05-02T16:48:49Z"}, "committer": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2019-05-02T16:48:49Z"}, "message": "Clean slate counting Vicious Hammer + Scroll Handler patch\n\nImproved clean slate, now taking Vicious Hammer slots into max upgrade slots account.\nSolved some exploit cases within Scroll Handler.", "tree": {"sha": "f62e2aa39414d57682c52363bac26d5394d5a6ed", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/f62e2aa39414d57682c52363bac26d5394d5a6ed"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/383495a7e91ca85f6dc0c506506ce7a1ec144943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/383495a7e91ca85f6dc0c506506ce7a1ec144943", "html_url": "https://github.com/ronancpl/HeavenMS/commit/383495a7e91ca85f6dc0c506506ce7a1ec144943", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/383495a7e91ca85f6dc0c506506ce7a1ec144943/comments", "author": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615caa7937fead956722979bd3534b4fa396796d", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/615caa7937fead956722979bd3534b4fa396796d", "html_url": "https://github.com/ronancpl/HeavenMS/commit/615caa7937fead956722979bd3534b4fa396796d"}], "stats": {"total": 219, "additions": 124, "deletions": 95}, "files": [{"sha": "654463ec36ef01b883f68e625c635fd372eab5ae", "filename": "src/net/server/channel/handlers/ScrollHandler.java", "status": "modified", "additions": 122, "deletions": 93, "changes": 215, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/net/server/channel/handlers/ScrollHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/net/server/channel/handlers/ScrollHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/ScrollHandler.java?ref=383495a7e91ca85f6dc0c506506ce7a1ec144943", "patch": "@@ -49,106 +49,135 @@\n \n     @Override\n     public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c) {\n-        slea.readInt(); // whatever...\n-        short slot = slea.readShort();\n-        short dst = slea.readShort();\n-        byte ws = (byte) slea.readShort();\n-        boolean whiteScroll = false; // white scroll being used?\n-        boolean legendarySpirit = false; // legendary spirit skill\n-        if ((ws & 2) == 2) {\n-            whiteScroll = true;\n-        }\n-        \n-        MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();\n-        MapleCharacter chr = c.getPlayer();\n-        Equip toScroll = (Equip) chr.getInventory(MapleInventoryType.EQUIPPED).getItem(dst);\n-        Skill LegendarySpirit = SkillFactory.getSkill(1003);\n-        if (chr.getSkillLevel(LegendarySpirit) > 0 && dst >= 0) {\n-            legendarySpirit = true;\n-            toScroll = (Equip) chr.getInventory(MapleInventoryType.EQUIP).getItem(dst);\n-        }\n-        byte oldLevel = toScroll.getLevel();\n-        byte oldSlots = toScroll.getUpgradeSlots();\n-        MapleInventory useInventory = chr.getInventory(MapleInventoryType.USE);\n-        Item scroll = useInventory.getItem(slot);\n-        Item wscroll = null;\n+        if (c.tryacquireClient()) {\n+            try {\n+                slea.readInt(); // whatever...\n+                short slot = slea.readShort();\n+                short dst = slea.readShort();\n+                byte ws = (byte) slea.readShort();\n+                boolean whiteScroll = false; // white scroll being used?\n+                boolean legendarySpirit = false; // legendary spirit skill\n+                if ((ws & 2) == 2) {\n+                    whiteScroll = true;\n+                }\n \n-        if (ItemConstants.isCleanSlate(scroll.getItemId())) {\n-            Map<String, Integer> eqStats = ii.getEquipStats(toScroll.getItemId());  // clean slate issue found thanks to Masterrulax\n-            if (eqStats == null || eqStats.get(\"tuc\") == 0) {\n-                c.announce(MaplePacketCreator.getInventoryFull());\n-                return;\n-            }\n-        } else if (!ItemConstants.isModifierScroll(scroll.getItemId()) && ((Equip) toScroll).getUpgradeSlots() < 1) {\n-            c.announce(MaplePacketCreator.getInventoryFull());\n-            return;\n-        }\n-        \n-        List<Integer> scrollReqs = ii.getScrollReqs(scroll.getItemId());\n-        if (scrollReqs.size() > 0 && !scrollReqs.contains(toScroll.getItemId())) {\n-            c.announce(MaplePacketCreator.getInventoryFull());\n-            return;\n-        }\n-        if (whiteScroll) {\n-            wscroll = useInventory.findById(2340000);\n-            if (wscroll == null) {\n-                whiteScroll = false;\n-            }\n-        }\n+                MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();\n+                MapleCharacter chr = c.getPlayer();\n+                Equip toScroll = (Equip) chr.getInventory(MapleInventoryType.EQUIPPED).getItem(dst);\n+                Skill LegendarySpirit = SkillFactory.getSkill(1003);\n+                if (chr.getSkillLevel(LegendarySpirit) > 0 && dst >= 0) {\n+                    legendarySpirit = true;\n+                    toScroll = (Equip) chr.getInventory(MapleInventoryType.EQUIP).getItem(dst);\n+                }\n+                byte oldLevel = toScroll.getLevel();\n+                byte oldSlots = toScroll.getUpgradeSlots();\n+                MapleInventory useInventory = chr.getInventory(MapleInventoryType.USE);\n+                Item scroll = useInventory.getItem(slot);\n+                Item wscroll = null;\n \n-        if (!ItemConstants.isChaosScroll(scroll.getItemId()) && !ItemConstants.isCleanSlate(scroll.getItemId())) {\n-            if (!canScroll(scroll.getItemId(), toScroll.getItemId())) {\n-                return;\n-            }\n-        }\n-        \n-        if (ItemConstants.isCleanSlate(scroll.getItemId()) && !ii.canUseCleanSlate(toScroll)) {\n-            return;\n-        }\n-        \n-        Equip scrolled = (Equip) ii.scrollEquipWithId(toScroll, scroll.getItemId(), whiteScroll, 0, chr.isGM());\n-        ScrollResult scrollSuccess = Equip.ScrollResult.FAIL; // fail\n-        if (scrolled == null) {\n-            scrollSuccess = Equip.ScrollResult.CURSE;\n-        } else if (scrolled.getLevel() > oldLevel || (ItemConstants.isCleanSlate(scroll.getItemId()) && scrolled.getUpgradeSlots() == oldSlots + 1) || ItemConstants.isFlagModifier(scroll.getItemId(), scrolled.getFlag())) {\n-            scrollSuccess = Equip.ScrollResult.SUCCESS;\n-        }\n-        MapleInventoryManipulator.removeFromSlot(c, MapleInventoryType.USE, scroll.getPosition(), (short) 1, false);\n-        if (whiteScroll && !ItemConstants.isCleanSlate(scroll.getItemId())) {\n-            MapleInventoryManipulator.removeFromSlot(c, MapleInventoryType.USE, wscroll.getPosition(), (short) 1, false, false);\n-        }\n-        final List<ModifyInventory> mods = new ArrayList<>();\n-        if (scrollSuccess == Equip.ScrollResult.CURSE) {\n-            if(!ItemConstants.isWeddingRing(toScroll.getItemId())) {\n-                mods.add(new ModifyInventory(3, toScroll));\n-                if (dst < 0) {\n-                    MapleInventory inv = chr.getInventory(MapleInventoryType.EQUIPPED);\n+                if (ItemConstants.isCleanSlate(scroll.getItemId())) {\n+                    Map<String, Integer> eqStats = ii.getEquipStats(toScroll.getItemId());  // clean slate issue found thanks to Masterrulax\n+                    if (eqStats == null || eqStats.get(\"tuc\") == 0) {\n+                        c.announce(MaplePacketCreator.getInventoryFull());\n+                        return;\n+                    }\n+                } else if (!ItemConstants.isModifierScroll(scroll.getItemId()) && ((Equip) toScroll).getUpgradeSlots() < 1) {\n+                    c.announce(MaplePacketCreator.getInventoryFull());\n+                    return;\n+                }\n+\n+                List<Integer> scrollReqs = ii.getScrollReqs(scroll.getItemId());\n+                if (scrollReqs.size() > 0 && !scrollReqs.contains(toScroll.getItemId())) {\n+                    c.announce(MaplePacketCreator.getInventoryFull());\n+                    return;\n+                }\n+                if (whiteScroll) {\n+                    wscroll = useInventory.findById(2340000);\n+                    if (wscroll == null) {\n+                        whiteScroll = false;\n+                    }\n+                }\n+\n+                if (!ItemConstants.isChaosScroll(scroll.getItemId()) && !ItemConstants.isCleanSlate(scroll.getItemId())) {\n+                    if (!canScroll(scroll.getItemId(), toScroll.getItemId())) {\n+                        return;\n+                    }\n+                }\n+\n+                if (ItemConstants.isCleanSlate(scroll.getItemId()) && !ii.canUseCleanSlate(toScroll)) {\n+                    return;\n+                }\n+\n+                Equip scrolled = (Equip) ii.scrollEquipWithId(toScroll, scroll.getItemId(), whiteScroll, 0, chr.isGM());\n+                ScrollResult scrollSuccess = Equip.ScrollResult.FAIL; // fail\n+                if (scrolled == null) {\n+                    scrollSuccess = Equip.ScrollResult.CURSE;\n+                } else if (scrolled.getLevel() > oldLevel || (ItemConstants.isCleanSlate(scroll.getItemId()) && scrolled.getUpgradeSlots() == oldSlots + 1) || ItemConstants.isFlagModifier(scroll.getItemId(), scrolled.getFlag())) {\n+                    scrollSuccess = Equip.ScrollResult.SUCCESS;\n+                }\n+                \n+                useInventory.lockInventory();\n+                try {\n+                    if (scroll.getQuantity() < 1) {\n+                        return;\n+                    }\n                     \n-                    inv.lockInventory();\n-                    try {\n-                        chr.unequippedItem(toScroll);\n-                        inv.removeItem(toScroll.getPosition());\n-                    } finally {\n-                        inv.unlockInventory();\n+                    if (whiteScroll && !ItemConstants.isCleanSlate(scroll.getItemId())) {\n+                        if (wscroll.getQuantity() < 1) {\n+                            return;\n+                        }\n+                        \n+                        MapleInventoryManipulator.removeFromSlot(c, MapleInventoryType.USE, wscroll.getPosition(), (short) 1, false, false);\n                     }\n-                } else {\n-                    chr.getInventory(MapleInventoryType.EQUIP).removeItem(toScroll.getPosition());\n+                    \n+                    MapleInventoryManipulator.removeFromSlot(c, MapleInventoryType.USE, scroll.getPosition(), (short) 1, false);\n+                } finally {\n+                    useInventory.unlockInventory();\n                 }\n-            } else {\n-                scrolled = toScroll;\n-                scrollSuccess = Equip.ScrollResult.FAIL;\n                 \n-                mods.add(new ModifyInventory(3, scrolled));\n-                mods.add(new ModifyInventory(0, scrolled));\n+                final List<ModifyInventory> mods = new ArrayList<>();\n+                if (scrollSuccess == Equip.ScrollResult.CURSE) {\n+                    if(!ItemConstants.isWeddingRing(toScroll.getItemId())) {\n+                        mods.add(new ModifyInventory(3, toScroll));\n+                        if (dst < 0) {\n+                            MapleInventory inv = chr.getInventory(MapleInventoryType.EQUIPPED);\n+\n+                            inv.lockInventory();\n+                            try {\n+                                chr.unequippedItem(toScroll);\n+                                inv.removeItem(toScroll.getPosition());\n+                            } finally {\n+                                inv.unlockInventory();\n+                            }\n+                        } else {\n+                            MapleInventory inv = chr.getInventory(MapleInventoryType.EQUIP);\n+                            \n+                            inv.lockInventory();\n+                            try {\n+                                inv.removeItem(toScroll.getPosition());\n+                            } finally {\n+                                inv.unlockInventory();\n+                            }\n+                        }\n+                    } else {\n+                        scrolled = toScroll;\n+                        scrollSuccess = Equip.ScrollResult.FAIL;\n+\n+                        mods.add(new ModifyInventory(3, scrolled));\n+                        mods.add(new ModifyInventory(0, scrolled));\n+                    }\n+                } else {\n+                    mods.add(new ModifyInventory(3, scrolled));\n+                    mods.add(new ModifyInventory(0, scrolled));\n+                }\n+                c.announce(MaplePacketCreator.modifyInventory(true, mods));\n+                chr.getMap().broadcastMessage(MaplePacketCreator.getScrollEffect(chr.getId(), scrollSuccess, legendarySpirit));\n+                if (dst < 0 && (scrollSuccess == Equip.ScrollResult.SUCCESS || scrollSuccess == Equip.ScrollResult.CURSE)) {\n+                    chr.equipChanged();\n+                }\n+            } finally {\n+                c.releaseClient();\n             }\n-        } else {\n-            mods.add(new ModifyInventory(3, scrolled));\n-            mods.add(new ModifyInventory(0, scrolled));\n-        }\n-        c.announce(MaplePacketCreator.modifyInventory(true, mods));\n-        chr.getMap().broadcastMessage(MaplePacketCreator.getScrollEffect(chr.getId(), scrollSuccess, legendarySpirit));\n-        if (dst < 0 && (scrollSuccess == Equip.ScrollResult.SUCCESS || scrollSuccess == Equip.ScrollResult.CURSE)) {\n-            chr.equipChanged();\n         }\n     }\n "}, {"sha": "929637f2da8538d74fd410eae41fd3265519af6d", "filename": "src/net/server/channel/handlers/UseCashItemHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/net/server/channel/handlers/UseCashItemHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/net/server/channel/handlers/UseCashItemHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/UseCashItemHandler.java?ref=383495a7e91ca85f6dc0c506506ce7a1ec144943", "patch": "@@ -507,7 +507,7 @@ public void run() {\n             int itemSlot = slea.readInt();\n             slea.readInt();\n             final Equip equip = (Equip) player.getInventory(MapleInventoryType.EQUIP).getItem((short) itemSlot);\n-            if (equip.getVicious() == 2 || player.getInventory(MapleInventoryType.CASH).findById(5570000) == null) {\n+            if (equip.getVicious() >= 2 || player.getInventory(MapleInventoryType.CASH).findById(5570000) == null) {\n                 return;\n             }\n             equip.setVicious(equip.getVicious() + 1);"}, {"sha": "8758e6797e90e8deb9ce6b2e2e968368503fff6f", "filename": "src/server/MapleItemInformationProvider.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/server/MapleItemInformationProvider.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/383495a7e91ca85f6dc0c506506ce7a1ec144943/src/server/MapleItemInformationProvider.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/MapleItemInformationProvider.java?ref=383495a7e91ca85f6dc0c506506ce7a1ec144943", "patch": "@@ -913,7 +913,7 @@ private void scrollEquipWithChaos(Equip nEquip, int range) {\n \n     public boolean canUseCleanSlate(Equip nEquip) {\n         Map<String, Integer> eqstats = this.getEquipStats(nEquip.getItemId());\n-        return ServerConstants.USE_ENHANCED_CLNSLATE || nEquip.getUpgradeSlots() < (byte) (eqstats.get(\"tuc\") + nEquipe.getVicious());  // issue with clean slate found thanks to Masterrulax\n+        return ServerConstants.USE_ENHANCED_CLNSLATE || nEquip.getUpgradeSlots() < (byte) (eqstats.get(\"tuc\") + nEquip.getVicious());  // issue with clean slate found thanks to Masterrulax, vicious added in the check thanks to Crypter (CrypterDEV)\n     }\n \n     public Item scrollEquipWithId(Item equip, int scrollId, boolean usingWhiteScroll, int vegaItemId, boolean isGM) {"}]}]},
