{"fetchDate": "2019-12-19", "content": [{"sha": "2b38b626838c79d88acb8e1ff9617c60acac0300", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6MmIzOGI2MjY4MzhjNzlkODhhY2I4ZTFmZjk2MTdjNjBhY2FjMDMwMA==", "commit": {"author": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2017-11-16T14:22:32Z"}, "committer": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2017-11-16T14:22:32Z"}, "message": "ThreadTracker + Attempt on NPC Disappearing fix\n\nEngineered the ThreadTracker: server-embedded deadlock auditing tool, which will print error messages in case of found deadlocks (also showing all in-use locks on the time of the issue).\nChanged the player's id on DB now starting from 20mil, thus preventing players from overwriting NPC/mobs with same oid in-game. Requires proper testing to see if the issue has been cleared.", "tree": {"sha": "aebd98e6a84df1ac6b1a35581ac616adc2fcbb96", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/aebd98e6a84df1ac6b1a35581ac616adc2fcbb96"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/2b38b626838c79d88acb8e1ff9617c60acac0300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/2b38b626838c79d88acb8e1ff9617c60acac0300", "html_url": "https://github.com/ronancpl/HeavenMS/commit/2b38b626838c79d88acb8e1ff9617c60acac0300", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/2b38b626838c79d88acb8e1ff9617c60acac0300/comments", "author": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecc3e300aba8eed92c3782466fc0c6cf36b7505", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/aecc3e300aba8eed92c3782466fc0c6cf36b7505", "html_url": "https://github.com/ronancpl/HeavenMS/commit/aecc3e300aba8eed92c3782466fc0c6cf36b7505"}], "stats": {"total": 1222, "additions": 1099, "deletions": 123}, "files": [{"sha": "192a00441e82c5a4903a813ccf4e8612628c9333", "filename": "dist/MapleSolaxia.jar", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/dist/MapleSolaxia.jar", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/dist/MapleSolaxia.jar", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/dist/MapleSolaxia.jar?ref=2b38b626838c79d88acb8e1ff9617c60acac0300"}, {"sha": "8c3dd52479b6ba063e6d74e64cb274afe7902353", "filename": "docs/feature_list.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/docs/feature_list.txt", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/docs/feature_list.txt", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/docs/feature_list.txt?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -103,5 +103,6 @@ Project:\n * Fixed/added some missing packets for MoveEnvironment, summons and others.\n * Reviewed many Java object aspects that needed concurrency protection.\n * Heavily reviewed future task management inside the project. Way less trivial schedules are spawned now, relieving task overload on the TimerManager.\n+* ThreadTracker: embedded auditing tool for run-time deadlock scanning throughout the server source (relies heavily on memory usage, designed only for debugging purposes).\n \n ---------------------------\n\\ No newline at end of file"}, {"sha": "1a5d0290cafdc58af1f6f872f09f5b3768a30abe", "filename": "docs/mychanges_ptbr.txt", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/docs/mychanges_ptbr.txt", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/docs/mychanges_ptbr.txt", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/docs/mychanges_ptbr.txt?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -669,4 +669,9 @@ Corrigido GM shop sendo liberado pra jogadores em Amherst.\n 13 - 14 Novembro 2017,\n Modificado ID de jogador agora come\ufffdando em 20,000,000, evitando assim clash de id de jogador (que tb representa seu OID) com OIDs de objetos do mapa.\n Nova ferramenta: MapleSkillMakerFetcher. A ferramenta l\ufffd info pertinente \ufffds descri\ufffd\ufffdes de itens feitos pelo Maker e as compila numa tabela, pra ser usada na DB.\n-Corrigida questline de mounts e skills de Aran.\n\\ No newline at end of file\n+Corrigida questline de mounts e skills de Aran.\n+\n+15 Novembro 2017,\n+Implementado sistema de auditoria de deadlocks: ThreadTracker.\n+Corrigido bug onde jogadores recebem dano de mobs de mapas anteriores (que acarretavam em problemas com OID e natureza dos objetos).\n+Corrigido alguns problemas com exce\ufffd\ufffdo sendo lan\ufffdada ao tentar desligar o server.\n\\ No newline at end of file"}, {"sha": "11ac3455f7058bdecd9998c6e6216ef88e368d9e", "filename": "nbproject/private/private.xml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/nbproject/private/private.xml", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/nbproject/private/private.xml", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/nbproject/private/private.xml?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -2,6 +2,9 @@\n <project-private xmlns=\"http://www.netbeans.org/ns/project-private/1\">\n     <editor-bookmarks xmlns=\"http://www.netbeans.org/ns/editor-bookmarks/2\" lastBookmarkId=\"2\"/>\n     <open-files xmlns=\"http://www.netbeans.org/ns/projectui-open-files/2\">\n-        <group/>\n+        <group>\n+            <file>file:/C:/Nexon/MapleSolaxia/MapleSolaxiaV2/src/client/command/Commands.java</file>\n+            <file>file:/C:/Nexon/MapleSolaxia/MapleSolaxiaV2/src/constants/ServerConstants.java</file>\n+        </group>\n     </open-files>\n </project-private>"}, {"sha": "bd9a8ac7c23b5d268b3041e177b6b8640d0c42ef", "filename": "scripts/quest/2314.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/scripts/quest/2314.js", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/scripts/quest/2314.js", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/scripts/quest/2314.js?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -22,7 +22,7 @@ function start(mode, type, selection) {\n \t\t}\n \t}\n \tif (status == 0)\n-\t\tqm.sendYesNo(\"In order to rescue the princess, you must first navigate the Mushroom Forest. King Pepe set up a powerful barrier forbidding anyone from entering the castle. Please investigate this matter for us.\");\n+\t\tqm.sendAcceptDecline(\"In order to rescue the princess, you must first navigate the Mushroom Forest. King Pepe set up a powerful barrier forbidding anyone from entering the castle. Please investigate this matter for us.\");\n \tif (status == 1)\n \t\tqm.sendNext(\"You'll run into the barrier at the Mushroom Forest by heading east of where you are standing right now. Please be careful. I hear that the area is infested with crazy, fear-inducing monsters.\");\n \tif(status == 2){"}, {"sha": "7a5cfa5f0965d607e4ae39ea692a634cdaa5b1f7", "filename": "sql/db_drops.sql", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/sql/db_drops.sql", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/sql/db_drops.sql", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/sql/db_drops.sql?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -18793,7 +18793,6 @@ USE `maplesolaxia`;\n (3400004,4000542,1,1,0,400000),\n (3400005,4032508,1,1,2273,999999),\n (3400006,4000543,1,1,0,400000),\n-(3400007,4032508,1,1,2273,999999),\n (3400008,4000544,1,1,0,400000),\n (4300001,1302009,1,1,0,700),\n (4300001,1312007,1,1,0,700),\n@@ -18939,7 +18938,7 @@ USE `maplesolaxia`;\n (4300006,4000525,1,1,0,600000),\n (4300006,4004000,1,1,0,10000),\n (4300006,4020008,1,1,0,9000),\n-(4300006,4032506,1,1,2277,999999),\n+(4300006,4032506,1,1,2277,80000),\n (4300007,1302009,1,1,0,700),\n (4300007,1312007,1,1,0,700),\n (4300007,1322016,1,1,0,700),\n@@ -18976,7 +18975,7 @@ USE `maplesolaxia`;\n (4300007,4000526,1,1,0,600000),\n (4300007,4004000,1,1,0,10000),\n (4300007,4020008,1,1,0,9000),\n-(4300007,4032506,1,1,2277,999999),\n+(4300007,4032506,1,1,2277,80000),\n (4300008,1302009,1,1,0,700),\n (4300008,1312007,1,1,0,700),\n (4300008,1322016,1,1,0,700),\n@@ -19013,7 +19012,7 @@ USE `maplesolaxia`;\n (4300008,4000527,1,1,0,400000),\n (4300008,4004000,1,1,0,10000),\n (4300008,4020008,1,1,0,9000),\n-(4300008,4032506,1,1,2277,999999),\n+(4300008,4032506,1,1,2277,80000),\n (4300009,1302009,1,1,0,700),\n (4300009,1312007,1,1,0,700),\n (4300009,1322016,1,1,0,700),\n@@ -19207,7 +19206,6 @@ USE `maplesolaxia`;\n (3400004,0,60,80,0,400000),\n (3400005,0,80,85,0,400000),\n (3400006,0,80,90,0,400000),\n-(3400007,0,90,100,0,400000),\n (3400008,0,100,110,0,400000),\n (4300001,0,100,120,0,400000),\n (4300003,0,100,120,0,400000),\n@@ -19792,7 +19790,28 @@ USE `maplesolaxia`;\n (2230111, 4032147, 1, 1, 20723, 40000),\n (9300378, 4001272, 1, 1, 0, 400000),\n (9300378, 4032324, 1, 1, 21736, 40000),\n-(9300344, 4032322, 1, 1, 21731, 999999);\n+(9300344, 4032322, 1, 1, 21731, 999999),\n+(3400008, 1302008, 1, 1, 0, 8500),\n+(3400008, 1412004, 1, 1, 0, 8500),\n+(3400008, 1422007, 1, 1, 0, 8500),\n+(3400008, 1442009, 1, 1, 0, 8500),\n+(3400008, 1332010, 1, 1, 0, 8500),\n+(3400008, 1372001, 1, 1, 0, 8500),\n+(3400008, 1382002, 1, 1, 0, 8500),\n+(3400008, 1002013, 1, 1, 0, 8500),\n+(3400008, 1002152, 1, 1, 0, 8500),\n+(3400008, 1061047, 1, 1, 0, 8500),\n+(3400008, 1072090, 1, 1, 0, 8500),\n+(3400008, 1002137, 1, 1, 0, 8500),\n+(3400008, 1040023, 1, 1, 0, 8500),\n+(3400008, 1040072, 1, 1, 0, 8500),\n+(3400008, 1060062, 1, 1, 0, 8500),\n+(3400008, 1082049, 1, 1, 0, 8500),\n+(3400008, 1082072, 1, 1, 0, 8500),\n+(3400008, 1072081, 1, 1, 0, 8500),\n+(3400008, 1332031, 1, 1, 0, 8500),\n+(3400008, 1482003, 1, 1, 0, 8500),\n+(3400008, 4032508, 1, 1, 2273, 80000);\n \n # (dropperid, itemid, minqty, maxqty, questid, chance)\n "}, {"sha": "6acef3a1b267f319bbc95f0160fee5e73a0a6555", "filename": "src/client/MapleCharacter.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MapleCharacter.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MapleCharacter.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/MapleCharacter.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -45,7 +45,7 @@\n import java.util.Map.Entry;\n import java.util.Set;\n import java.util.Comparator;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -154,6 +154,7 @@\n import net.server.channel.handlers.PartyOperationHandler;\n import scripting.item.ItemScriptManager;\n import server.maps.MapleMapItem;\n+import tools.locks.MonitoredEnums;\n \n public class MapleCharacter extends AbstractAnimatedMapleMapObject {\n     private static NumberFormat nf = new DecimalFormat(\"#,###,###,###\");\n@@ -270,10 +271,10 @@\n     private ScheduledFuture<?> extraRecoveryTask = null;\n     private ScheduledFuture<?> chairRecoveryTask = null;\n     private ScheduledFuture<?> pendantOfSpirit = null; //1122017\n-    private Lock chrLock = new ReentrantLock(true);\n-    private Lock effLock = new ReentrantLock(true);\n-    private Lock petLock = new ReentrantLock(true); // for quest tasks as well\n-    private Lock prtLock = new ReentrantLock();\n+    private Lock chrLock = new MonitoredReentrantLock(MonitoredEnums.CHR, true);\n+    private Lock effLock = new MonitoredReentrantLock(MonitoredEnums.EFF, true);\n+    private Lock petLock = new MonitoredReentrantLock(MonitoredEnums.PET, true); // for quest tasks as well\n+    private Lock prtLock = new MonitoredReentrantLock(MonitoredEnums.PRT);\n     private Map<Integer, Set<Integer>> excluded = new LinkedHashMap<>();\n     private Set<Integer> excludedItems = new LinkedHashSet<>();\n     private List<MapleRing> crushRings = new ArrayList<>();"}, {"sha": "2880cb178424653ad38917a9afb50e7794bc9de8", "filename": "src/client/MapleClient.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MapleClient.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MapleClient.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/MapleClient.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -42,7 +42,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n \n import javax.script.ScriptEngine;\n \n@@ -77,6 +77,7 @@\n import tools.HexTool;\n import tools.MapleAESOFB;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n public class MapleClient {\n \n@@ -108,7 +109,7 @@\n \tprivate int picattempt = 0;\n \tprivate byte gender = -1;\n \tprivate boolean disconnecting = false;\n-\tprivate final Lock lock = new ReentrantLock(true);\n+\tprivate final Lock lock = new MonitoredReentrantLock(MonitoredEnums.CLIENT, true);\n \tprivate int votePoints;\n \tprivate int voteTime = -1;\n \tprivate long lastNpcClick;\n@@ -832,7 +833,7 @@ public final synchronized void disconnect(boolean shutdown, boolean cashshop) {/\n                             \n                                 removePlayer();\n                                 player.saveCooldowns();\n-                                player.saveToDB();\n+                                player.saveToDB(true);\n                             \n \t\t\t\tplayer = null;\n \t\t\t\treturn;"}, {"sha": "7dc541bdbb5aef606128d9815a7ab8401ed30bd1", "filename": "src/client/MonsterBook.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MonsterBook.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/MonsterBook.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/MonsterBook.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -31,16 +31,17 @@\n import java.util.Map.Entry;\n import java.util.Set;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n public final class MonsterBook {\n     private int specialCard = 0;\n     private int normalCard = 0;\n     private int bookLevel = 1;\n     private Map<Integer, Integer> cards = new LinkedHashMap<>();\n-    private Lock lock = new ReentrantLock();\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.BOOK);\n \n     private Set<Entry<Integer, Integer>> getCardSet() {\n         lock.lock();"}, {"sha": "c6c33e124a1a1604d9888a2d46534bb6bdcb8d49", "filename": "src/client/command/Commands.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/command/Commands.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/command/Commands.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/command/Commands.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -346,7 +346,7 @@ public static boolean executeSolaxiaCommandLv0(Channel cserv, Server srv, MapleC\n                     \n \t\tcase \"time\":\n \t\t\tDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n-\t\t\tdateFormat.setTimeZone(TimeZone.getTimeZone(\"-GMT3\"));\n+\t\t\tdateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n \t\t\tplayer.yellowMessage(\"Solaxia Server Time: \" + dateFormat.format(new Date()));\n \t\t\tbreak;\n                     \n@@ -741,7 +741,7 @@ public static boolean executeSolaxiaCommandLv1(Channel cserv, Server srv, MapleC\n \t\t\tplayer.yellowMessage(\"Players on this map:\");\n \t\t\tfor (MapleMapObject mmo : player.getMap().getPlayers()) {\n \t\t\t\tMapleCharacter chr = (MapleCharacter) mmo;\n-\t\t\t\tplayer.dropMessage(5, \">> \" + chr.getName());\n+\t\t\t\tplayer.dropMessage(5, \">> \" + chr.getName() + \" - \" + chr.getId() + \" - Oid: \" + chr.getObjectId());\n \t\t\t}\n \t\t\tplayer.yellowMessage(\"NPCs on this map:\");\n \t\t\tfor (MapleMapObject npcs : player.getMap().getMapObjects()) {\n@@ -755,7 +755,7 @@ public static boolean executeSolaxiaCommandLv1(Channel cserv, Server srv, MapleC\n \t\t\t\tif (mobs instanceof MapleMonster) {\n \t\t\t\t\tMapleMonster mob = (MapleMonster) mobs;\n \t\t\t\t\tif(mob.isAlive()){\n-\t\t\t\t\t\tplayer.dropMessage(5, \">> \" + mob.getName() + \" - \" + mob.getId());\n+\t\t\t\t\t\tplayer.dropMessage(5, \">> \" + mob.getName() + \" - \" + mob.getId() + \" - Oid: \" + mob.getObjectId());\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}"}, {"sha": "74bf99554148efe2c2cd8491eda4f0fb7a0504f0", "filename": "src/client/inventory/ItemFactory.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/inventory/ItemFactory.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/inventory/ItemFactory.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/inventory/ItemFactory.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -27,9 +27,11 @@\n import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.locks.Lock;\n+import tools.locks.MonitoredReentrantLock;\n import tools.DatabaseConnection;\n import tools.Pair;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -45,7 +47,7 @@\n     MERCHANT(6, false);\n     private final int value;\n     private final boolean account;\n-    private static final ReentrantLock lock = new ReentrantLock(true);\n+    private static final Lock lock = new MonitoredReentrantLock(MonitoredEnums.ITEM, true);\n \n     private ItemFactory(int value, boolean account) {\n         this.value = value;"}, {"sha": "f9a02fa141ee7cb01959ed6780010620825db20d", "filename": "src/client/inventory/MapleInventory.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/inventory/MapleInventory.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/client/inventory/MapleInventory.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/inventory/MapleInventory.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -30,7 +30,7 @@\n import java.util.Map.Entry;\n import java.util.Map;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n \n import tools.Pair;\n import client.MapleCharacter;\n@@ -39,6 +39,7 @@\n import server.MapleItemInformationProvider;\n import server.MapleInventoryManipulator;\n import tools.FilePrinter;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -50,7 +51,7 @@\n     private byte slotLimit;\n     private MapleInventoryType type;\n     private boolean checked = false;\n-    private Lock lock = new ReentrantLock(true);\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.INVENTORY, true);\n     \n     public MapleInventory(MapleCharacter mc, MapleInventoryType type, byte slotLimit) {\n         this.owner = mc;"}, {"sha": "776921eb96ad2332b0b123c1140f311f805df455", "filename": "src/constants/ServerConstants.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/constants/ServerConstants.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/constants/ServerConstants.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/constants/ServerConstants.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -8,10 +8,12 @@\n     public static String DB_URL = \"\";\n     public static String DB_USER = \"\";\n     public static String DB_PASS = \"\";\n-    public static final boolean DB_EXPERIMENTAL_POOL = true;   //[EXPERIMENTAL] Installs a connection pool to hub DB connections. Set false to default.\n+    public static final boolean DB_EXPERIMENTAL_POOL = true;    //[EXPERIMENTAL] Installs a connection pool to hub DB connections. Set false to default.\n+    public static final boolean USE_THREAD_TRACKER = true;      //[WARNING] This deadlock auditing thing will bloat the memory as fast as the time frame one takes to lose track of a raindrop on a tempesting day. Only for debug purposes.\n \t\n     //World And Version\n     public static short VERSION = 83;\n+    public static String TIMEZONE = \"-GMT3\";\n     public static String[] WORLD_NAMES = {\"Scania\", \"Bera\", \"Broa\", \"Windia\", \"Khaini\", \"Bellocan\", \"Mardia\", \"Kradia\", \"Yellonde\", \"Demethos\", \"Galicia\", \"El Nido\", \"Zenith\", \"Arcenia\", \"Kastia\", \"Judis\", \"Plana\", \"Kalluna\", \"Stius\", \"Croa\", \"Medere\"};\n \n     //Login Configuration\n@@ -85,6 +87,7 @@\n     //Dangling Items Configuration\n     public static final int ITEM_EXPIRE_TIME  = 3 * 60 * 1000;  //Time before items start disappearing. Recommended to be set up to 3 minutes.\n     public static final int ITEM_MONITOR_TIME = 5 * 60 * 1000;  //Interval between item monitoring tasks on maps, which checks for dangling (null) item objects on the map item history.\n+    public static final int LOCK_MONITOR_TIME = 30 * 1000;      //Waiting time for a lock to be released. If it reach timed out, a critical server deadlock has made present.\n     public static final int ITEM_EXPIRE_CHECK = 10 * 1000;      //Interval between item expiring tasks on maps, which checks and makes disappear expired items.\n     public static final int ITEM_LIMIT_ON_MAP = 200;            //Max number of items allowed on a map.\n     "}, {"sha": "af55d9a697cbab1016de9c34c930d87831d23b1b", "filename": "src/net/MapleServerHandler.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/MapleServerHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/MapleServerHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/MapleServerHandler.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -43,13 +43,14 @@\n import constants.ServerConstants;\n \n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import java.util.concurrent.ScheduledFuture;\n \n import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n import server.TimerManager;\n+import tools.locks.MonitoredEnums;\n \n public class MapleServerHandler extends IoHandlerAdapter {\n \n@@ -58,8 +59,8 @@\n     private static final SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");\n     private static AtomicLong sessionId = new AtomicLong(7777);\n     \n-    private Lock idleLock = new ReentrantLock(true);\n-    private Lock tempLock = new ReentrantLock(true);\n+    private Lock idleLock = new MonitoredReentrantLock(MonitoredEnums.SHANDLER_IDLE, true);\n+    private Lock tempLock = new MonitoredReentrantLock(MonitoredEnums.SHANDLER_TEMP, true);\n     private Map<MapleClient, Long> idleSessions = new HashMap<>(100);\n     private Map<MapleClient, Long> tempIdleSessions = new HashMap<>();\n     private ScheduledFuture<?> idleManager = null;"}, {"sha": "2024efd0fccba7c74d4e03f7e68b4babd7166465", "filename": "src/net/mina/MaplePacketEncoder.java", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/mina/MaplePacketEncoder.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/mina/MaplePacketEncoder.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/mina/MaplePacketEncoder.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -35,27 +35,28 @@\n     public void encode(final IoSession session, final Object message, final ProtocolEncoderOutput out) throws Exception {\n         final MapleClient client = (MapleClient) session.getAttribute(MapleClient.CLIENT_KEY);\n \n-        if (client != null) {\n-            final MapleAESOFB send_crypto = client.getSendCrypto();\n-            final byte[] input = (byte[]) message;\n-            final byte[] unencrypted = new byte[input.length];\n-            System.arraycopy(input, 0, unencrypted, 0, input.length);\n-            final byte[] ret = new byte[unencrypted.length + 4];\n-            final byte[] header = send_crypto.getPacketHeader(unencrypted.length);\n-            MapleCustomEncryption.encryptData(unencrypted);\n-\n+        try {\n             client.lockClient();\n             try {\n+                final MapleAESOFB send_crypto = client.getSendCrypto();\n+                final byte[] input = (byte[]) message;\n+                final byte[] unencrypted = new byte[input.length];\n+                System.arraycopy(input, 0, unencrypted, 0, input.length);\n+                final byte[] ret = new byte[unencrypted.length + 4];\n+                final byte[] header = send_crypto.getPacketHeader(unencrypted.length);\n+                MapleCustomEncryption.encryptData(unencrypted);\n+            \n                 send_crypto.crypt(unencrypted);\n                 System.arraycopy(header, 0, ret, 0, 4);\n                 System.arraycopy(unencrypted, 0, ret, 4, unencrypted.length);\n+                \n                 out.write(IoBuffer.wrap(ret));\n             } finally {\n                 client.unlockClient();\n             }\n //            System.arraycopy(unencrypted, 0, ret, 4, unencrypted.length);\n //            out.write(ByteBuffer.wrap(ret));\n-        } else {\n+        } catch (NullPointerException npe) {\n             out.write(IoBuffer.wrap(((byte[]) message)));\n         }\n     }"}, {"sha": "d1b8d3bca7dd51a513b9fff0ce6f95f48bfdc75c", "filename": "src/net/server/PlayerBuffStorage.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/PlayerBuffStorage.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/PlayerBuffStorage.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/PlayerBuffStorage.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -25,15 +25,16 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredEnums;\n+import tools.locks.MonitoredReentrantLock;\n \n /**\n  *\n  * @author Danny//changed to map :3\n  */\n public class PlayerBuffStorage {\n     private int id = (int) (Math.random() * 100);\n-    private final Lock lock = new ReentrantLock(true);    \n+    private final Lock lock = new MonitoredReentrantLock(MonitoredEnums.BUFF_STORAGE, true);    \n     private Map<Integer, List<PlayerBuffValueHolder>> buffs = new HashMap<>();\n \n     public void addBuffsToStorage(int chrid, List<PlayerBuffValueHolder> toStore) {"}, {"sha": "59093ea8e209d687b355280722825d7b63d9502c", "filename": "src/net/server/PlayerStorage.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/PlayerStorage.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/PlayerStorage.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/PlayerStorage.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -26,12 +26,14 @@\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n+import tools.locks.MonitoredEnums;\n \n public class PlayerStorage {\n-    private final ReentrantReadWriteLock locks = new ReentrantReadWriteLock(true);\n+    private final ReentrantReadWriteLock locks = new MonitoredReentrantReadWriteLock(MonitoredEnums.PLAYER_STORAGE, true);\n     private final ReadLock rlock = locks.readLock();\n     private final WriteLock wlock = locks.writeLock();\n     private final Map<Integer, MapleCharacter> storage = new LinkedHashMap<>();"}, {"sha": "d33d7a241da6dc7615f19d904c0213139af61227", "filename": "src/net/server/Server.java", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/Server.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/Server.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/Server.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -33,15 +33,16 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n+import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Properties;\n import java.util.Set;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.ScheduledFuture;\n \n import net.MapleServerHandler;\n import net.mina.MapleCodecFactory;\n@@ -70,11 +71,13 @@\n import constants.ItemConstants;\n import constants.ServerConstants;\n import java.util.Calendar;\n+import net.server.audit.ThreadTracker;\n import server.quest.MapleQuest;\n+import tools.locks.MonitoredEnums;\n \n public class Server implements Runnable {\n     private static final Set<Integer> activeFly = new HashSet<>();\n-    private static final Map<Integer, Integer> couponRates = new LinkedHashMap<>();\n+    private static final Map<Integer, Integer> couponRates = new HashMap<>(30);\n     private static final List<Integer> activeCoupons = new LinkedList<>();\n     \n     private IoAcceptor acceptor;\n@@ -83,11 +86,12 @@\n     private final Properties subnetInfo = new Properties();\n     private static Server instance = null;\n     private List<Pair<Integer, String>> worldRecommendedList = new LinkedList<>();\n-    private final Map<Integer, MapleGuild> guilds = new LinkedHashMap<>();\n-    private final Map<MapleClient, Long> inLoginState = new LinkedHashMap<>();\n-    private final Lock srvLock = new ReentrantLock();\n+    private final Map<Integer, MapleGuild> guilds = new HashMap<>(100);\n+    private final Map<MapleClient, Long> inLoginState = new HashMap<>(100);\n+    private final Lock srvLock = new MonitoredReentrantLock(MonitoredEnums.SERVER);\n     private final PlayerBuffStorage buffStorage = new PlayerBuffStorage();\n-    private final Map<Integer, MapleAlliance> alliances = new LinkedHashMap<>();\n+    private final Map<Integer, MapleAlliance> alliances = new HashMap<>(100);\n+    \n     private boolean online = false;\n     public static long uptime = System.currentTimeMillis();\n     \n@@ -301,7 +305,9 @@ public void run() {\n \ttimeToTake = System.currentTimeMillis();\n \tMapleQuest.loadAllQuest();\n \tSystem.out.println(\"Quest loaded in \" + ((System.currentTimeMillis() - timeToTake) / 1000.0) + \" seconds\\r\\n\");\n-\t\t\n+\t\n+        if(ServerConstants.USE_THREAD_TRACKER) ThreadTracker.getInstance().registerThreadTrackerTask();\n+        \n         try {\n             Integer worldCount = Math.min(ServerConstants.WORLD_NAMES.length, Integer.parseInt(p.getProperty(\"worlds\")));\n             \n@@ -317,7 +323,7 @@ public void run() {\n \n                 worldRecommendedList.add(new Pair<>(i, p.getProperty(\"whyamirecommended\" + i)));\n                 worlds.add(world);\n-                channels.add(new LinkedHashMap<Integer, String>());\n+                channels.add(new HashMap<Integer, String>());\n                 for (int j = 0; j < Integer.parseInt(p.getProperty(\"channels\" + i)); j++) {\n                     int channelid = j + 1;\n                     Channel channel = new Channel(i, channelid);\n@@ -807,6 +813,8 @@ public void run() {\n                             }\n                         }\n                     }*/\n+                    \n+                    if(ServerConstants.USE_THREAD_TRACKER) ThreadTracker.getInstance().cancelThreadTrackerTask();\n \n                     TimerManager.getInstance().purge();\n                     TimerManager.getInstance().stop();"}, {"sha": "d79b3d3f77852e995753f23e734b3fb4a061ab5d", "filename": "src/net/server/audit/ThreadTracker.java", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/audit/ThreadTracker.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/audit/ThreadTracker.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/audit/ThreadTracker.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,281 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package net.server.audit;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TimeZone;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import server.TimerManager;\n+import tools.FilePrinter;\n+import tools.locks.MonitoredEnums;\n+import constants.ServerConstants;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ * \n+ * This tool has the main purpose of auditing deadlocks throughout the server and must be used only for debugging. The flag is USE_THREAD_TRACKER.\n+ */\n+public class ThreadTracker {\n+    private static ThreadTracker instance = null;\n+    private final Lock ttLock = new ReentrantLock(true);\n+    \n+    private final Map<Long, List<MonitoredEnums>> threadTracker = new HashMap<>();\n+    private final Map<Long, Integer> threadUpdate = new HashMap<>();\n+    private final Map<Long, Thread> threads = new HashMap<>();\n+    \n+    private final Map<Long, AtomicInteger> lockCount = new HashMap<>();\n+    private final Map<Long, MonitoredEnums> lockIds = new HashMap<>();\n+    private final Map<Long, Long> lockThreads = new HashMap<>();\n+    private final Map<Long, Byte> lockUpdate = new HashMap<>();\n+    \n+    private final Map<MonitoredEnums, Map<Long, Integer>> locks = new HashMap<>();\n+    ScheduledFuture<?> threadTrackerSchedule;\n+    \n+    private String printThreadTrackerState(String dateFormat) {\n+        \n+        Map<MonitoredEnums, List<Integer>> lockValues = new HashMap<>();\n+        Set<Long> executingThreads = new HashSet<>();\n+        \n+        for(Map.Entry<Long, AtomicInteger> lock : lockCount.entrySet()) {\n+            if(lock.getValue().get() != 0) {\n+                executingThreads.add(lockThreads.get(lock.getKey()));\n+                \n+                MonitoredEnums lockId = lockIds.get(lock.getKey());\n+                List<Integer> list = lockValues.get(lockId);\n+                \n+                if(list == null) {\n+                    list = new ArrayList<>();\n+                    lockValues.put(lockId, list);\n+                }\n+                \n+                list.add(lock.getValue().get());\n+            }\n+        }\n+        \n+        \n+        String s = \"----------------------------\\r\\n\" + dateFormat + \"\\r\\n    \";\n+        s += \"Lock-thread usage count:\";\n+        for(Map.Entry<MonitoredEnums, List<Integer>> lock : lockValues.entrySet()) {\n+            s += (\"\\r\\n  \" + lock.getKey().name() + \": \");\n+            \n+            for(Integer i : lock.getValue()) {\n+                s += (i + \" \");\n+            }\n+        }\n+        s += \"\\r\\n\\r\\nThread opened lock path:\";\n+        \n+        for(Long tid : executingThreads) {\n+            s += \"\\r\\n\";\n+            for(MonitoredEnums lockid : threadTracker.get(tid)) {\n+                s += (lockid.name() + \" \");\n+            }\n+            s += \"|\";\n+        }\n+        \n+        s += \"\\r\\n\\r\\n\";\n+        \n+        return s;\n+    }\n+    \n+    private static String printThreadLog(List<MonitoredEnums> stillLockedPath, String dateFormat) {\n+        String s = \"----------------------------\\r\\n\" + dateFormat + \"\\r\\n    \";\n+        for(MonitoredEnums lock : stillLockedPath) {\n+            s += (lock.name() + \" \");\n+        }\n+        s += \"\\r\\n\\r\\n\";\n+        \n+        return s;\n+    }\n+    \n+    private static String printThreadStack(StackTraceElement[] list, String dateFormat) {\n+        String s = \"----------------------------\\r\\n\" + dateFormat + \"\\r\\n\";\n+        for(int i = 0; i < list.length; i++) {\n+            s += (\"    \" + list[i].toString() + \"\\r\\n\");\n+        }\n+        \n+        return s;\n+    }\n+    \n+    public void accessThreadTracker(boolean update, boolean lock, MonitoredEnums lockId, long lockOid) {\n+        ttLock.lock();\n+        try {\n+            if(update) {\n+                if(!lock) { // update tracker\n+                    List<Long> toRemove = new ArrayList<>();\n+\n+                    for(Long l : threadUpdate.keySet()) {\n+                        int next = threadUpdate.get(l) + 1;\n+                        if(next == 4) {\n+                            List<MonitoredEnums> tt = threadTracker.get(l);\n+\n+                            if(tt.isEmpty()) {\n+                                toRemove.add(l);\n+                            } else {\n+                                DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+                                dateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n+                                String df = dateFormat.format(new Date());\n+\n+                                FilePrinter.print(FilePrinter.DEADLOCK_LOCKS, printThreadLog(tt, df));\n+                                FilePrinter.print(FilePrinter.DEADLOCK_STACK, printThreadStack(threads.get(l).getStackTrace(), df));\n+                            }\n+                        }\n+\n+                        threadUpdate.put(l, next);\n+                    }\n+\n+                    for(Long l : toRemove) {\n+                        threadTracker.remove(l);\n+                        threadUpdate.remove(l);\n+                        threads.remove(l);\n+\n+                        for(Map<Long, Integer> threadLock : locks.values()) {\n+                            threadLock.remove(l);\n+                        }\n+                    }\n+\n+                    toRemove.clear();\n+\n+                    for(Entry<Long, Byte> it : lockUpdate.entrySet()) {\n+                        byte val = (byte)(it.getValue() + 1);\n+\n+                        if(val < 60) {  // free the structure after 60 silent updates\n+                            lockUpdate.put(it.getKey(), val);\n+                        } else {\n+                            toRemove.add(it.getKey());\n+                        }\n+                    }\n+\n+                    for(Long l : toRemove) {\n+                        lockCount.remove(l);\n+                        lockIds.remove(l);\n+                        lockThreads.remove(l);\n+                        lockUpdate.remove(l);\n+                    }\n+                } else {    // print status\n+                    DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+                    dateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n+\n+                    FilePrinter.printError(FilePrinter.DEADLOCK_STATE, printThreadTrackerState(dateFormat.format(new Date())));\n+                    //FilePrinter.printError(FilePrinter.DEADLOCK_STATE, \"[\" + dateFormat.format(new Date()) + \"] Presenting current lock path for lockid \" + lockId.name() + \".\\r\\n\" + printLockStatus(lockId) + \"\\r\\n-------------------------------\\r\\n\");\n+                }\n+            } else {\n+                long tid = Thread.currentThread().getId();\n+\n+                if(lock) {\n+                    AtomicInteger c = lockCount.get(lockOid);\n+                    if(c == null) {\n+                        c = new AtomicInteger(0);\n+                        lockCount.put(lockOid, c);\n+                        lockIds.put(lockOid, lockId);\n+                        lockThreads.put(lockOid, tid);\n+                        lockUpdate.put(lockOid, (byte) 0);\n+                    }\n+                    c.incrementAndGet();\n+\n+                    List<MonitoredEnums> list = threadTracker.get(tid);\n+                    if(list == null) {\n+                        list = new ArrayList<>(20);\n+                        threadTracker.put(tid, list);\n+                        threadUpdate.put(tid, 0);\n+                        threads.put(tid, Thread.currentThread());\n+                    }\n+                    list.add(lockId);\n+\n+                    Map<Long, Integer> threadLock = locks.get(lockId);\n+                    if(threadLock == null) {\n+                        threadLock = new HashMap<>(5);\n+                        locks.put(lockId, threadLock);\n+                    }\n+\n+                    Integer lc = threadLock.get(tid);\n+                    if(lc != null) {\n+                        threadLock.put(tid, lc + 1);\n+                    } else {\n+                        threadLock.put(tid, 1);\n+                    }\n+                }\n+                else {\n+                    AtomicInteger c = lockCount.get(lockOid);\n+                    c.decrementAndGet();\n+                    lockUpdate.put(lockOid, (byte) 0);\n+\n+                    List<MonitoredEnums> list = threadTracker.get(tid);\n+                    for(int i = list.size() - 1; i >= 0; i--) {\n+                        if(lockId.getValue() == list.get(i).getValue()) {\n+                            list.remove(i);\n+                            break;\n+                        }\n+                    }\n+\n+                    Map<Long, Integer> threadLock = locks.get(lockId);\n+                    threadLock.put(tid, threadLock.get(tid) - 1);\n+                }\n+            }\n+        } finally {\n+            ttLock.unlock();\n+        }\n+    }\n+    \n+    private String printLockStatus(MonitoredEnums lockId) {\n+        String s = \"\";\n+        \n+        for(Long threadid : locks.get(lockId).keySet()) {\n+            for(MonitoredEnums lockid : threadTracker.get(threadid)) {\n+                s += (\"  \" + lockid.name());\n+            }\n+            \n+            s += \" |\\r\\n\";\n+        }\n+        \n+        return s;\n+    }\n+    \n+    public void registerThreadTrackerTask() {\n+        threadTrackerSchedule = TimerManager.getInstance().register(new Runnable() {\n+            @Override\n+            public void run() {\n+                accessThreadTracker(true, false, MonitoredEnums.UNDEFINED, -1);\n+            }\n+        }, 10000, 10000);\n+    }\n+    \n+    public void cancelThreadTrackerTask() {\n+        threadTrackerSchedule.cancel(false);\n+    }\n+    \n+    public static ThreadTracker getInstance() {\n+        if (instance == null) {\n+            instance = new ThreadTracker();\n+        }\n+        return instance;\n+    }\n+}"}, {"sha": "e2cad9d0e22f54b8e3f2653fd52cfe4151f842f3", "filename": "src/net/server/channel/Channel.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/Channel.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/Channel.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/Channel.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -33,7 +33,8 @@\n import java.util.Set;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n@@ -67,6 +68,7 @@\n import client.MapleCharacter;\n import constants.ServerConstants;\n import server.maps.MapleMiniDungeonInfo;\n+import tools.locks.MonitoredEnums;\n \n public final class Channel {\n \n@@ -90,11 +92,11 @@\n     private Map<Integer, Integer> dojoParty = new HashMap<>();\n     private Map<Integer, MapleMiniDungeon> dungeons = new HashMap<>();\n     \n-    private ReentrantReadWriteLock merchantLock = new ReentrantReadWriteLock(true);\n+    private ReentrantReadWriteLock merchantLock = new MonitoredReentrantReadWriteLock(MonitoredEnums.MERCHANT, true);\n     private ReadLock merchRlock = merchantLock.readLock();\n     private WriteLock merchWlock = merchantLock.writeLock();\n     \n-    private Lock lock = new ReentrantLock(true);\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.CHANNEL, true);\n     \n     public Channel(final int world, final int channel) {\n         this.world = world;"}, {"sha": "4493b0682156dd262fe40a9006733313de13cb72", "filename": "src/net/server/channel/handlers/ReportHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/handlers/ReportHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/handlers/ReportHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/ReportHandler.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -84,7 +84,7 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n \tpublic void addReport(int reporterid, int victimid, int reason, String description, String chatlog) {\n \t\tCalendar calendar = Calendar.getInstance();\n \t\tTimestamp currentTimestamp = new java.sql.Timestamp(calendar.getTime().getTime());\n-\t\tConnection con = null;\n+\t\tConnection con;\n \t\ttry {\n                         con = DatabaseConnection.getConnection();\n \t\t\tPreparedStatement ps = con.prepareStatement(\"INSERT INTO reports (`reporttime`, `reporterid`, `victimid`, `reason`, `chatlog`, `description`) VALUES (?, ?, ?, ?, ?, ?)\");"}, {"sha": "5f05e51ced7b719d197596b1edcbadabcd073411", "filename": "src/net/server/channel/handlers/TakeDamageHandler.java", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/handlers/TakeDamageHandler.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/channel/handlers/TakeDamageHandler.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/channel/handlers/TakeDamageHandler.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -51,6 +51,7 @@\n import server.life.MobSkill;\n import server.life.MobSkillFactory;\n import server.maps.MapleMap;\n+import server.maps.MapleMapObject;\n import tools.FilePrinter;\n import tools.MaplePacketCreator;\n import tools.Randomizer;\n@@ -78,9 +79,17 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n \t    oid = slea.readInt();\n             \n             try {\n-                attacker = (MapleMonster) map.getMapObject(oid);\n-                List<loseItem> loseItems;\n+                MapleMapObject mmo = map.getMapObject(oid);\n+                if(mmo instanceof MapleMonster) {\n+                    attacker = (MapleMonster) mmo;\n+                    if(attacker.getId() != monsteridfrom) {\n+                        attacker = null;\n+                    }\n+                }\n+                \n                 if (attacker != null) {\n+                    List<loseItem> loseItems;\n+                    \n                     if (attacker.isBuffed(MonsterStatus.NEUTRALISE)) {\n                         return;\n                     }\n@@ -119,10 +128,8 @@ public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)\n             } catch(ClassCastException e) {\n                 //this happens due to mob on last map damaging player just before changing maps\n                 \n-                if(ServerConstants.USE_DEBUG) {\n-                    e.printStackTrace();\n-                    FilePrinter.printError(FilePrinter.EXCEPTION_CAUGHT, \"Attacker is not a mob-type, rather is a \" + map.getMapObject(oid).getClass().getName() + \" entity.\");\n-                }\n+                e.printStackTrace();\n+                FilePrinter.printError(FilePrinter.EXCEPTION_CAUGHT, \"Attacker is not a mob-type, rather is a \" + map.getMapObject(oid).getClass().getName() + \" entity.\");\n                 \n                 return;\n             }"}, {"sha": "9af59bc7f87f60c9dc93a416b178e6b07a2505cb", "filename": "src/net/server/guild/MapleGuild.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/guild/MapleGuild.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/guild/MapleGuild.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/guild/MapleGuild.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -36,12 +36,13 @@\n import java.util.Set;\n \n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n \n import net.server.Server;\n import net.server.channel.Channel;\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n public class MapleGuild {\n     public final static int CREATE_GUILD_COST = 1500000;\n@@ -52,7 +53,7 @@\n     }\n     \n     private final List<MapleGuildCharacter> members;\n-    private final Lock membersLock = new ReentrantLock(true);\n+    private final Lock membersLock = new MonitoredReentrantLock(MonitoredEnums.GUILD, true);\n     \n     private String rankTitles[] = new String[5]; // 1 = master, 2 = jr, 5 = lowest member\n     private String name, notice;"}, {"sha": "4aa24d2ec0b052b09ac61490ff00b8a8702c27f7", "filename": "src/net/server/world/MapleParty.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/world/MapleParty.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/world/MapleParty.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/world/MapleParty.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -30,8 +30,9 @@\n import java.util.Map.Entry;\n import java.util.Map;\n import java.util.Comparator;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import java.util.concurrent.locks.Lock;\n+import tools.locks.MonitoredEnums;\n \n public class MapleParty {\n     private int id;\n@@ -43,7 +44,7 @@\n     private Map<Integer, Integer> histMembers = new HashMap<>();\n     private int nextEntry = 0;\n     \n-    private Lock lock = new ReentrantLock(true);\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.PARTY, true);\n     \n     public MapleParty(int id, MaplePartyCharacter chrfor) {\n         this.leaderId = chrfor.getId();"}, {"sha": "9b38d60c041a030b08e4917410451e056d8a48e8", "filename": "src/net/server/world/World.java", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/world/World.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/net/server/world/World.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/world/World.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -43,7 +43,7 @@\n import java.util.Map.Entry;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import java.util.Set;\n import java.util.HashSet;\n import java.util.concurrent.ScheduledFuture;\n@@ -68,6 +68,7 @@\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n import tools.Pair;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -89,25 +90,25 @@\n     \n     private Map<Integer, MapleParty> parties = new HashMap<>();\n     private AtomicInteger runningPartyId = new AtomicInteger();\n-    private Lock partyLock = new ReentrantLock(true);\n+    private Lock partyLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_PARTY, true);\n     \n     private Map<Integer, Integer> owlSearched = new LinkedHashMap<>();\n-    private Lock owlLock = new ReentrantLock();\n+    private Lock owlLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_OWL);\n     \n-    private Lock activePetsLock = new ReentrantLock(true);\n+    private Lock activePetsLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_PETS, true);\n     private Map<Integer, Byte> activePets = new LinkedHashMap<>();\n     private ScheduledFuture<?> petsSchedule;\n     private long petUpdate;\n     \n-    private Lock activeMountsLock = new ReentrantLock(true);\n+    private Lock activeMountsLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_MOUNTS, true);\n     private Map<Integer, Byte> activeMounts = new LinkedHashMap<>();\n     private ScheduledFuture<?> mountsSchedule;\n     private long mountUpdate;\n     \n-    private Lock activePlayerShopsLock = new ReentrantLock(true);\n+    private Lock activePlayerShopsLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_PSHOPS, true);\n     private Map<Integer, MaplePlayerShop> activePlayerShops = new LinkedHashMap<>();\n     \n-    private Lock activeMerchantsLock = new ReentrantLock(true);\n+    private Lock activeMerchantsLock = new MonitoredReentrantLock(MonitoredEnums.WORLD_MERCHS, true);\n     private Map<Integer, Pair<MapleHiredMerchant, Byte>> activeMerchants = new LinkedHashMap<>();\n     private long merchantUpdate;\n     "}, {"sha": "c01bb7f3c3f02b525efdf9db7cb12914e986747f", "filename": "src/scripting/event/EventInstanceManager.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/scripting/event/EventInstanceManager.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/scripting/event/EventInstanceManager.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/scripting/event/EventInstanceManager.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -35,7 +35,8 @@\n import java.util.Iterator;\n import java.util.Properties;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n@@ -69,6 +70,7 @@\n import server.life.MapleLifeFactory;\n import server.life.MapleNPC;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -90,12 +92,12 @@\n         private List<Integer> mapIds = new LinkedList<>();\n         private List<Boolean> isInstanced = new LinkedList<>();\n         \n-        private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);\n+        private final ReentrantReadWriteLock lock = new MonitoredReentrantReadWriteLock(MonitoredEnums.EIM, true);\n         private final ReadLock rL = lock.readLock();\n         private final WriteLock wL = lock.writeLock();\n         \n-        private final Lock pL = new ReentrantLock(true);\n-        private final Lock sL = new ReentrantLock();\n+        private final Lock pL = new MonitoredReentrantLock(MonitoredEnums.EIM_PARTY, true);\n+        private final Lock sL = new MonitoredReentrantLock(MonitoredEnums.EIM_SCRIPT, true);\n         \n         private ScheduledFuture<?> event_schedule = null;\n         private boolean disposed = false;"}, {"sha": "060482e8c8a4124d8b4a48b09724f6f0b96ca640", "filename": "src/scripting/event/EventManager.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/scripting/event/EventManager.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/scripting/event/EventManager.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/scripting/event/EventManager.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -53,7 +53,8 @@\n import java.util.LinkedList;\n import java.util.Queue;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredEnums;\n+import tools.locks.MonitoredReentrantLock;\n \n /**\n  *\n@@ -74,8 +75,8 @@\n     private Integer readyId = 0;\n     private Properties props = new Properties();\n     private String name;\n-    private Lock lobbyLock = new ReentrantLock();\n-    private Lock queueLock = new ReentrantLock();\n+    private Lock lobbyLock = new MonitoredReentrantLock(MonitoredEnums.EM_LOBBY);\n+    private Lock queueLock = new MonitoredReentrantLock(MonitoredEnums.EM_QUEUE);\n \n     private static final int maxLobbys = 8;     // an event manager holds up to this amount of concurrent lobbys\n     "}, {"sha": "5417ffb4f42f4f74e0ac7f2f7a9a3db2482148fd", "filename": "src/server/CashShop.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/CashShop.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/CashShop.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/CashShop.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -31,7 +31,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n \n import provider.MapleData;\n import provider.MapleDataProvider;\n@@ -46,6 +46,7 @@\n import client.inventory.MaplePet;\n import constants.ItemConstants;\n import java.util.Collections;\n+import tools.locks.MonitoredEnums;\n \n /*\n  * @author Flav\n@@ -241,7 +242,7 @@ public static void reloadSpecialCashItems() {//Yay?\n     private List<Item> inventory = new ArrayList<>();\n     private List<Integer> wishList = new ArrayList<>();\n     private int notes = 0;\n-    private Lock lock = new ReentrantLock();\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.CASHSHOP);\n \n     public CashShop(int accountId, int characterId, int jobType) throws SQLException {\n         this.accountId = accountId;"}, {"sha": "2828c43ef05b4defc176a94f08cc3db01d4516df", "filename": "src/server/MaplePlayerShop.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/MaplePlayerShop.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/MaplePlayerShop.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/MaplePlayerShop.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -32,13 +32,14 @@\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import net.SendOpcode;\n import server.maps.AbstractMapleMapObject;\n import server.maps.MapleMapObjectType;\n import tools.MaplePacketCreator;\n import tools.Pair;\n import tools.data.output.MaplePacketLittleEndianWriter;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -55,7 +56,7 @@\n     private List<String> bannedList = new ArrayList<>();\n     private List<Pair<MapleCharacter, String>> chatLog = new LinkedList<>();\n     private Map<Integer, Byte> chatSlot = new LinkedHashMap<>();\n-    private Lock visitorLock = new ReentrantLock(true);\n+    private Lock visitorLock = new MonitoredReentrantLock(MonitoredEnums.VISITOR_PSHOP, true);\n \n     public MaplePlayerShop(MapleCharacter owner, String description) {\n         this.setPosition(owner.getPosition());"}, {"sha": "a082ab124ee2f3a509ccbe7d8f796112ec3b55ac", "filename": "src/server/MapleStorage.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/MapleStorage.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/MapleStorage.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/MapleStorage.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -34,10 +34,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n import tools.Pair;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -50,7 +51,7 @@\n     private byte slots;\n     private Map<MapleInventoryType, List<Item>> typeItems = new HashMap<>();\n     private List<Item> items;\n-    private Lock lock = new ReentrantLock(true);\n+    private Lock lock = new MonitoredReentrantLock(MonitoredEnums.STORAGE, true);\n \n     private MapleStorage(int id, byte slots, int meso) {\n         this.id = id;"}, {"sha": "7de4519faf00dc4de0301a00ced0a90bfeee346d", "filename": "src/server/life/MapleMonster.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/life/MapleMonster.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/life/MapleMonster.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/life/MapleMonster.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -51,7 +51,8 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.locks.Lock;\n+import tools.locks.MonitoredReentrantLock;\n import net.server.world.MapleParty;\n import net.server.world.MaplePartyCharacter;\n import server.TimerManager;\n@@ -62,6 +63,7 @@\n import tools.MaplePacketCreator;\n import tools.Pair;\n import tools.Randomizer;\n+import tools.locks.MonitoredEnums;\n \n public class MapleMonster extends AbstractLoadedMapleLife {\n     private ChangeableStats ostats = null;  //unused, v83 WZs offers no support for changeable stats.\n@@ -84,9 +86,9 @@\n     private int team;\n     private final HashMap<Integer, AtomicInteger> takenDamage = new HashMap<>();\n \n-    private ReentrantLock externalLock = new ReentrantLock();\n-    private ReentrantLock monsterLock = new ReentrantLock(true);\n-    private ReentrantLock statiLock = new ReentrantLock();\n+    private Lock externalLock = new MonitoredReentrantLock(MonitoredEnums.MOB_EXT);\n+    private Lock monsterLock = new MonitoredReentrantLock(MonitoredEnums.MOB, true);\n+    private Lock statiLock = new MonitoredReentrantLock(MonitoredEnums.MOB_STATI);\n \n     public MapleMonster(int id, MapleMonsterStats stats) {\n         super(id);"}, {"sha": "8874b4e95f1a3a3ce3df6509a77cd15798346f4d", "filename": "src/server/life/MobSkillFactory.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/life/MobSkillFactory.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/life/MobSkillFactory.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/life/MobSkillFactory.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -27,13 +27,15 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n import provider.MapleData;\n import provider.MapleDataProvider;\n import provider.MapleDataProviderFactory;\n import provider.MapleDataTool;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -44,7 +46,7 @@\n     private static Map<String, MobSkill> mobSkills = new HashMap<String, MobSkill>();\n     private final static MapleDataProvider dataSource = MapleDataProviderFactory.getDataProvider(new File(System.getProperty(\"wzpath\") + \"/Skill.wz\"));\n     private static MapleData skillRoot = dataSource.getData(\"MobSkill.img\");\n-    private final static ReentrantReadWriteLock dataLock = new ReentrantReadWriteLock();\n+    private final static ReentrantReadWriteLock dataLock = new MonitoredReentrantReadWriteLock(MonitoredEnums.MOBSKILL_FACTORY);\n     private final static ReadLock rL = dataLock.readLock();\n     private final static WriteLock wL = dataLock.writeLock();\n "}, {"sha": "3b454f68191161ced41cfc6d3a6715aac18eeaed", "filename": "src/server/maps/MapleGenericPortal.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleGenericPortal.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleGenericPortal.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleGenericPortal.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -27,7 +27,8 @@\n import server.MaplePortal;\n import tools.MaplePacketCreator;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredEnums;\n+import tools.locks.MonitoredReentrantLock;\n \n public class MapleGenericPortal implements MaplePortal {\n \n@@ -117,7 +118,7 @@ public void setScriptName(String scriptName) {\n         \n         if(scriptName != null) {\n             if(scriptLock == null) {\n-                scriptLock = new ReentrantLock(false);\n+                scriptLock = new MonitoredReentrantLock(MonitoredEnums.PORTAL, false);\n             }\n         } else {\n             scriptLock = null;"}, {"sha": "2bcd3a75288b8b2cb054a6cf062f9a12131c49e6", "filename": "src/server/maps/MapleHiredMerchant.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleHiredMerchant.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleHiredMerchant.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleHiredMerchant.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -37,14 +37,15 @@\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import net.server.Server;\n import server.MapleInventoryManipulator;\n import server.MapleItemInformationProvider;\n import server.MaplePlayerShopItem;\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n import tools.Pair;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -63,7 +64,7 @@\n     private List<SoldItem> sold = new LinkedList<>();\n     private AtomicBoolean open = new AtomicBoolean();\n     private MapleMap map;\n-    private Lock visitorLock = new ReentrantLock(true);\n+    private Lock visitorLock = new MonitoredReentrantLock(MonitoredEnums.VISITOR_MERCH, true);\n \n     public MapleHiredMerchant(final MapleCharacter owner, int itemId, String desc) {\n         this.setPosition(owner.getPosition());"}, {"sha": "92c945647415c080df228ffce8a7279fdca54f52", "filename": "src/server/maps/MapleMap.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMap.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMap.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleMap.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -52,6 +52,7 @@\n import java.util.Random;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicInteger;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n@@ -78,13 +79,14 @@\n import server.life.SpawnPoint;\n import server.partyquest.MonsterCarnival;\n import server.partyquest.MonsterCarnivalParty;\n-import server.partyquest.Pyramid;\n+//import server.partyquest.Pyramid;\n import scripting.event.EventInstanceManager;\n import server.life.MonsterListener;\n import tools.FilePrinter;\n import tools.MaplePacketCreator;\n import tools.Pair;\n import tools.Randomizer;\n+import tools.locks.MonitoredEnums;\n \n public class MapleMap {\n     private static final List<MapleMapObjectType> rangedMapobjectTypes = Arrays.asList(MapleMapObjectType.SHOP, MapleMapObjectType.ITEM, MapleMapObjectType.NPC, MapleMapObjectType.MONSTER, MapleMapObjectType.DOOR, MapleMapObjectType.SUMMON, MapleMapObjectType.REACTOR);\n@@ -161,11 +163,11 @@ public MapleMap(int mapid, int world, int channel, int returnMapId, float monste\n         if (this.monsterRate == 0) {\n             this.monsterRate = 1;\n         }\n-        final ReentrantReadWriteLock chrLock = new ReentrantReadWriteLock(true);\n+        final ReentrantReadWriteLock chrLock = new MonitoredReentrantReadWriteLock(MonitoredEnums.MAP_CHRS, true);\n         chrRLock = chrLock.readLock();\n         chrWLock = chrLock.writeLock();\n \n-        final ReentrantReadWriteLock objectLock = new ReentrantReadWriteLock(true);\n+        final ReentrantReadWriteLock objectLock = new MonitoredReentrantReadWriteLock(MonitoredEnums.MAP_OBJS, true);\n         objectRLock = objectLock.readLock();\n         objectWLock = objectLock.writeLock();\n     }"}, {"sha": "f692af109696e20399295c61ff668d5368ea57de", "filename": "src/server/maps/MapleMapFactory.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMapFactory.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMapFactory.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleMapFactory.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -33,6 +33,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Collection;\n+import tools.locks.MonitoredReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;\n@@ -46,6 +47,7 @@\n import scripting.event.EventInstanceManager;\n import tools.DatabaseConnection;\n import tools.StringUtil;\n+import tools.locks.MonitoredEnums;\n \n public class MapleMapFactory {\n \n@@ -64,7 +66,7 @@ public MapleMapFactory(EventInstanceManager eim, MapleDataProvider source, Maple\n         this.channel = channel;\n         this.event = eim;\n         \n-        ReentrantReadWriteLock rrwl = new ReentrantReadWriteLock();\n+        ReentrantReadWriteLock rrwl = new MonitoredReentrantReadWriteLock(MonitoredEnums.MAP_FACTORY);\n         this.mapsRLock = rrwl.readLock();\n         this.mapsWLock = rrwl.writeLock();\n     }"}, {"sha": "0a389b779723c9369ff39d1e844f607483a029c8", "filename": "src/server/maps/MapleMapItem.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMapItem.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMapItem.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleMapItem.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -24,8 +24,10 @@\n import client.MapleClient;\n import client.inventory.Item;\n import java.awt.Point;\n-import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.locks.Lock;\n+import tools.locks.MonitoredReentrantLock;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n public class MapleMapItem extends AbstractMapleMapObject {\n \n@@ -35,7 +37,7 @@\n     protected byte type;\n     protected boolean pickedUp = false, playerDrop;\n     protected long dropTime;\n-    private ReentrantLock itemLock = new ReentrantLock();\n+    private Lock itemLock = new MonitoredReentrantLock(MonitoredEnums.MAP_ITEM);\n \n     public MapleMapItem(Item item, Point position, MapleMapObject dropper, MapleCharacter owner, byte type, boolean playerDrop) {\n \tsetPosition(position);"}, {"sha": "8349a9286e205fd00d7e6730c2755f435dc24746", "filename": "src/server/maps/MapleMiniDungeon.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMiniDungeon.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleMiniDungeon.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleMiniDungeon.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -25,8 +25,9 @@\n import java.util.ArrayList;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n import tools.MaplePacketCreator;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -35,7 +36,7 @@\n public class MapleMiniDungeon {\n     List<MapleCharacter> players = new ArrayList<>();\n     ScheduledFuture<?> timeoutTask = null;\n-    Lock lock = new ReentrantLock(true);\n+    Lock lock = new MonitoredReentrantLock(MonitoredEnums.MINIDUNGEON, true);\n     \n     int baseMap;\n     long expireTime;"}, {"sha": "73baba289102f9b0f1c5651f220406ba73a99f93", "filename": "src/server/maps/MapleReactor.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleReactor.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/server/maps/MapleReactor.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/server/maps/MapleReactor.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -29,12 +29,13 @@\n \n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n+import tools.locks.MonitoredReentrantLock;\n \n import scripting.reactor.ReactorScriptManager;\n import server.TimerManager;\n import tools.MaplePacketCreator;\n import tools.Pair;\n+import tools.locks.MonitoredEnums;\n \n /**\n  *\n@@ -53,7 +54,7 @@\n     private boolean shouldCollect;\n     private boolean attackHit;\n     private ScheduledFuture<?> timeoutTask = null;\n-    private Lock reactorLock = new ReentrantLock(true);\n+    private Lock reactorLock = new MonitoredReentrantLock(MonitoredEnums.REACTOR, true);\n \n     public MapleReactor(MapleReactorStats stats, int rid) {\n         this.evstate = (byte)0;"}, {"sha": "df0195d24daf16bbd0d64aa5d6b5241279932bc4", "filename": "src/tools/FilePrinter.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/FilePrinter.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/FilePrinter.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/FilePrinter.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -44,7 +44,11 @@\n             QUEST_UNCODED = \"uncodedQuests.txt\",\n             AUTOSAVING_CHARACTER = \"saveCharAuto.txt\",\n             SAVING_CHARACTER = \"saveChar.txt\",\n-            USED_COMMANDS = \"usedCommands.txt\";//more to come (maps)\n+            USED_COMMANDS = \"usedCommands.txt\",\n+            DEADLOCK_ERROR = \"deadlocks.txt\",\n+            DEADLOCK_STACK = \"deadlocks/path.txt\",\n+            DEADLOCK_LOCKS = \"deadlocks/locks.txt\",\n+            DEADLOCK_STATE = \"deadlocks/state.txt\";\n     \n     private static final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); //for file system purposes, it's nice to use yyyy-MM-dd\n     private static final String FILE_PATH = \"logs/\" + sdf.format(Calendar.getInstance().getTime()) + \"/\"; // + sdf.format(Calendar.getInstance().getTime()) + \"/\""}, {"sha": "aaa0b4dc211caa9fd9127d207eee883131cbd378", "filename": "src/tools/locks/MonitoredEnums.java", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredEnums.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredEnums.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/locks/MonitoredEnums.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,81 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package tools.locks;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ */\n+\n+public enum MonitoredEnums {\n+    UNDEFINED(-1),\n+    CHR(0),\n+    EFF(1),\n+    PET(2),\n+    PRT(3),\n+    CLIENT(4),\n+    BOOK(5),\n+    ITEM(6),\n+    INVENTORY(7),\n+    SHANDLER_IDLE(8),\n+    SHANDLER_TEMP(9),\n+    BUFF_STORAGE(10),\n+    PLAYER_STORAGE(11),\n+    SERVER(12),\n+    MERCHANT(13),\n+    CHANNEL(14),\n+    GUILD(15),\n+    PARTY(16),\n+    WORLD_PARTY(17),\n+    WORLD_OWL(18),\n+    WORLD_PETS(19),\n+    WORLD_MOUNTS(20),\n+    WORLD_PSHOPS(21),\n+    WORLD_MERCHS(21),\n+    EIM(22),\n+    EIM_PARTY(23),\n+    EIM_SCRIPT(24),\n+    EM_LOBBY(25),\n+    EM_QUEUE(26),\n+    CASHSHOP(27),\n+    VISITOR_PSHOP(28),\n+    STORAGE(29),\n+    MOB_EXT(30),\n+    MOB(31),\n+    MOB_STATI(32),\n+    MOBSKILL_FACTORY(33),\n+    PORTAL(34),\n+    VISITOR_MERCH(35),\n+    MAP_CHRS(36),\n+    MAP_OBJS(37),\n+    MAP_FACTORY(38),\n+    MAP_ITEM(39),\n+    MINIDUNGEON(40),\n+    REACTOR(41);\n+    \n+    private final int i;\n+    \n+    private MonitoredEnums(int val) {\n+        this.i = val;\n+    }\n+\n+    public int getValue() {\n+        return i;\n+    }\n+}"}, {"sha": "7c5c1be516002cc807fc80354b6b637374e52514", "filename": "src/tools/locks/MonitoredReadLock.java", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReadLock.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReadLock.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/locks/MonitoredReadLock.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,147 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package tools.locks;\n+\n+import constants.ServerConstants;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.ScheduledFuture;\n+import server.TimerManager;\n+import net.server.Server;\n+import net.server.audit.ThreadTracker;\n+\n+import tools.FilePrinter;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ */\n+public class MonitoredReadLock extends ReentrantReadWriteLock.ReadLock {\n+    private ScheduledFuture<?> timeoutSchedule = null;\n+    private StackTraceElement[] deadlockedState = null;\n+    private final MonitoredEnums id;\n+    private final int hashcode;\n+    private final Lock state = new ReentrantLock(true);\n+    private final AtomicInteger reentrantCount = new AtomicInteger(0);\n+    \n+    public MonitoredReadLock(MonitoredReentrantReadWriteLock lock) {\n+        super(lock);\n+        this.id = lock.id;\n+        hashcode = this.hashCode();\n+    }\n+    \n+    @Override\n+    public void lock() {\n+        super.lock();\n+        \n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            if(deadlockedState != null) {\n+                DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+                dateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n+\n+                //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"[CRITICAL] \" + dateFormat.format(new Date()) + \" Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                deadlockedState = null;\n+            }\n+\n+            registerLocking();\n+        }\n+    }\n+    \n+    @Override\n+    public void unlock() {\n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            unregisterLocking();\n+        }\n+        super.unlock();\n+    }\n+    \n+    @Override\n+    public boolean tryLock() {\n+        if(super.tryLock()) {\n+            if(ServerConstants.USE_THREAD_TRACKER) {\n+                if(deadlockedState != null) {\n+                    //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                    ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                    deadlockedState = null;\n+                }\n+\n+                registerLocking();\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+    \n+    private void registerLocking() {\n+        state.lock();\n+        try {\n+            ThreadTracker.getInstance().accessThreadTracker(false, true, id, hashcode);\n+        \n+            if(reentrantCount.incrementAndGet() == 1) {\n+                final Thread t = Thread.currentThread();\n+                timeoutSchedule = TimerManager.getInstance().schedule(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        issueDeadlock(t);\n+                    }\n+                }, ServerConstants.LOCK_MONITOR_TIME);\n+            }\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void unregisterLocking() {\n+        state.lock();\n+        try {\n+            if(reentrantCount.decrementAndGet() == 0) {\n+                if(timeoutSchedule != null) {\n+                    timeoutSchedule.cancel(false);\n+                    timeoutSchedule = null;\n+                }\n+            }\n+            \n+            ThreadTracker.getInstance().accessThreadTracker(false, false, id, hashcode);\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void issueDeadlock(Thread t) {\n+        deadlockedState = t.getStackTrace();\n+        //super.unlock();\n+    }\n+    \n+    private static String printStackTrace(StackTraceElement[] list) {\n+        String s = \"\";\n+        for(int i = 0; i < list.length; i++) {\n+            s += (\"    \" + list[i].toString() + \"\\r\\n\");\n+        }\n+        \n+        return s;\n+    }\n+}"}, {"sha": "6934b92ae525b1eb727ed1ad2438093ddc9ca66d", "filename": "src/tools/locks/MonitoredReentrantLock.java", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReentrantLock.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReentrantLock.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/locks/MonitoredReentrantLock.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,150 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package tools.locks;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.ScheduledFuture;\n+import constants.ServerConstants;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import server.TimerManager;\n+import net.server.Server;\n+import net.server.audit.ThreadTracker;\n+import tools.FilePrinter;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ */\n+public class MonitoredReentrantLock extends ReentrantLock {\n+    private ScheduledFuture<?> timeoutSchedule = null;\n+    private StackTraceElement[] deadlockedState = null;\n+    private final MonitoredEnums id;\n+    private final int hashcode;\n+    private final Lock state = new ReentrantLock(true);\n+    private final AtomicInteger reentrantCount = new AtomicInteger(0);\n+   \n+    public MonitoredReentrantLock(MonitoredEnums id) {\n+        super();\n+        this.id = id;\n+        hashcode = this.hashCode();\n+    }\n+            \n+    public MonitoredReentrantLock(MonitoredEnums id, boolean fair) {\n+        super(fair);\n+        this.id = id;\n+        hashcode = this.hashCode();\n+    }\n+    \n+    @Override\n+    public void lock() {\n+        super.lock();\n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            if(deadlockedState != null) {\n+                DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+                dateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n+\n+                //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"[CRITICAL] \" + dateFormat.format(new Date()) + \" Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                deadlockedState = null;\n+            }\n+\n+            registerLocking();\n+        }\n+    }\n+    \n+    @Override\n+    public void unlock() {\n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            unregisterLocking();\n+        }\n+        super.unlock();\n+    }\n+    \n+    @Override\n+    public boolean tryLock() {\n+        if(super.tryLock()) {\n+            if(ServerConstants.USE_THREAD_TRACKER) {\n+                if(deadlockedState != null) {\n+                    //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                    ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                    deadlockedState = null;\n+                }\n+\n+                registerLocking();\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+    \n+    private void registerLocking() {\n+        state.lock();\n+        try {\n+            ThreadTracker.getInstance().accessThreadTracker(false, true, id, hashcode);\n+        \n+            if(reentrantCount.incrementAndGet() == 1) {\n+                final Thread t = Thread.currentThread();\n+                timeoutSchedule = TimerManager.getInstance().schedule(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        issueDeadlock(t);\n+                    }\n+                }, ServerConstants.LOCK_MONITOR_TIME);\n+            }\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void unregisterLocking() {\n+        state.lock();\n+        try {\n+            if(reentrantCount.decrementAndGet() == 0) {\n+                if(timeoutSchedule != null) {\n+                    timeoutSchedule.cancel(false);\n+                    timeoutSchedule = null;\n+                }\n+            }\n+            \n+            ThreadTracker.getInstance().accessThreadTracker(false, false, id, hashcode);\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void issueDeadlock(Thread t) {\n+        deadlockedState = t.getStackTrace();\n+        //super.unlock();\n+    }\n+    \n+    private static String printStackTrace(StackTraceElement[] list) {\n+        String s = \"\";\n+        for(int i = 0; i < list.length; i++) {\n+            s += (\"    \" + list[i].toString() + \"\\r\\n\");\n+        }\n+        \n+        return s;\n+    }\n+}"}, {"sha": "30203327ae2f0609191c65015560dbf07adc6424", "filename": "src/tools/locks/MonitoredReentrantReadWriteLock.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReentrantReadWriteLock.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredReentrantReadWriteLock.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/locks/MonitoredReentrantReadWriteLock.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,49 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package tools.locks;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ */\n+public class MonitoredReentrantReadWriteLock extends ReentrantReadWriteLock {\n+    public final MonitoredEnums id;\n+    \n+    public MonitoredReentrantReadWriteLock(MonitoredEnums id) {\n+        super();\n+        this.id = id;\n+    }\n+            \n+    public MonitoredReentrantReadWriteLock(MonitoredEnums id, boolean fair) {\n+        super(fair);\n+        this.id = id;\n+    }\n+    \n+    @Override\n+    public ReadLock readLock() {\n+        return super.readLock();\n+    }\n+    \n+    @Override\n+    public WriteLock writeLock() {\n+        return super.writeLock();\n+    }\n+}"}, {"sha": "5c9344ce9e80f00e9c841ed0c222177714af4d44", "filename": "src/tools/locks/MonitoredWriteLock.java", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredWriteLock.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/src/tools/locks/MonitoredWriteLock.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/locks/MonitoredWriteLock.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,145 @@\n+/*\n+ *     This file is part of the MapleSolaxiaV2 Maple Story Server\n+ *\n+ * Copyright (C) 2017 RonanLana\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package tools.locks;\n+\n+import constants.ServerConstants;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.concurrent.ScheduledFuture;\n+import server.TimerManager;\n+import net.server.Server;\n+import net.server.audit.ThreadTracker;\n+import tools.FilePrinter;\n+\n+/**\n+ *\n+ * @author RonanLana\n+ */\n+public class MonitoredWriteLock extends ReentrantReadWriteLock.WriteLock {\n+    private ScheduledFuture<?> timeoutSchedule = null;\n+    private StackTraceElement[] deadlockedState = null;\n+    private final MonitoredEnums id;\n+    private final int hashcode;\n+    private final Lock state = new ReentrantLock(true);\n+    private final AtomicInteger reentrantCount = new AtomicInteger(0);\n+\n+    public MonitoredWriteLock(MonitoredReentrantReadWriteLock lock) {\n+        super(lock);\n+        this.id = lock.id;\n+        hashcode = this.hashCode();\n+    }\n+    \n+    @Override\n+    public void lock() {\n+        super.lock();\n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            if(deadlockedState != null) {\n+                DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+                dateFormat.setTimeZone(TimeZone.getTimeZone(ServerConstants.TIMEZONE));\n+\n+                //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"[CRITICAL] \" + dateFormat.format(new Date()) + \" Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                deadlockedState = null;\n+            }\n+\n+            registerLocking();\n+        }\n+    }\n+    \n+    @Override\n+    public void unlock() {\n+        if(ServerConstants.USE_THREAD_TRACKER) {\n+            unregisterLocking();\n+        }\n+        super.unlock();\n+    }\n+    \n+    @Override\n+    public boolean tryLock() {\n+        if(super.tryLock()) {\n+            if(ServerConstants.USE_THREAD_TRACKER) {\n+                if(deadlockedState != null) {\n+                    //FilePrinter.printError(FilePrinter.DEADLOCK_ERROR, \"Deadlock occurred when trying to use the '\" + id.name() + \"' lock resources:\\r\\n\" + printStackTrace(deadlockedState) + \"\\r\\n\\r\\n\");\n+                    ThreadTracker.getInstance().accessThreadTracker(true, true, id, hashcode);\n+                    deadlockedState = null;\n+                }\n+\n+                registerLocking();\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+    \n+    private void registerLocking() {\n+        state.lock();\n+        try {\n+            ThreadTracker.getInstance().accessThreadTracker(false, true, id, hashcode);\n+        \n+            if(reentrantCount.incrementAndGet() == 1) {\n+                final Thread t = Thread.currentThread();\n+                timeoutSchedule = TimerManager.getInstance().schedule(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        issueDeadlock(t);\n+                    }\n+                }, ServerConstants.LOCK_MONITOR_TIME);\n+            }\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void unregisterLocking() {\n+        state.lock();\n+        try {\n+            if(reentrantCount.decrementAndGet() == 0) {\n+                if(timeoutSchedule != null) {\n+                    timeoutSchedule.cancel(false);\n+                    timeoutSchedule = null;\n+                }\n+            }\n+            \n+            ThreadTracker.getInstance().accessThreadTracker(false, false, id, hashcode);\n+        } finally {\n+            state.unlock();\n+        }\n+    }\n+    \n+    private void issueDeadlock(Thread t) {\n+        deadlockedState = t.getStackTrace();\n+        //super.unlock();\n+    }\n+    \n+    private static String printStackTrace(StackTraceElement[] list) {\n+        String s = \"\";\n+        for(int i = 0; i < list.length; i++) {\n+            s += (\"    \" + list[i].toString() + \"\\r\\n\");\n+        }\n+        \n+        return s;\n+    }\n+}"}, {"sha": "dc790fed4ba538208f637ba89756575322f81f66", "filename": "tools/MapleIdRetriever/dist/MapleIdRetriever.jar", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/dist/MapleIdRetriever.jar", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/dist/MapleIdRetriever.jar", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/tools/MapleIdRetriever/dist/MapleIdRetriever.jar?ref=2b38b626838c79d88acb8e1ff9617c60acac0300"}, {"sha": "ff68f13fc05923d27041dda53e6fbb43fbcd6613", "filename": "tools/MapleIdRetriever/lib/fetch.txt", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/lib/fetch.txt", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/lib/fetch.txt", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/tools/MapleIdRetriever/lib/fetch.txt?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -1,14 +1,24 @@\n-Red Potion\n-Lemon\n-W. Ramen\n-Elixir\n-Mana Elixir\n-Mushroom Miso Ramen\n-Power Elixir\n-Lunar Gloves\n-LeFay Jester\n-Eclipse Earrings\n-Herculean Crown\n-Lockewood Hat\n-Pickpocket Pilfer\n-Eclipse Cloak\n\\ No newline at end of file\n+Gladius\n+Niam\n+Titan\n+Crescent Polearm\n+Iron Dagger\n+White Crusader Chainmail (Male)\n+Wizard Wand\n+Wizard Staff\n+Golden Pride\n+Blue Guiltian\n+Red Amorian Skirt (Female)\n+Red Salt Shoes\n+Green Pole-Feather Hat\n+Black Bennis Chainmail (Male)\n+Red Legolier (Male)\n+Blue Legolier Pants (Male)\n+Green Marker\n+Gold Brace\n+Green Hunter Boots\n+Dragon Toenail\n+Rouge Way\n+Guardian Katara\n+Justice Katara\n+Norman Grip"}, {"sha": "766d1fdfef77199e2aa4545acb70adde6b236fec", "filename": "tools/MapleIdRetriever/lib/result.txt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/lib/result.txt", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/lib/result.txt", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/tools/MapleIdRetriever/lib/result.txt?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -0,0 +1,20 @@\n+1302008 \n+1412004 \n+1422007 \n+1442009 \n+1332010 \n+1372001 \n+1382002 \n+1002013 \n+1002152 \n+1061047 \n+1072090 \n+1002137 \n+1040023 \n+1040072 \n+1060062 \n+1082049 \n+1082072 \n+1072081 \n+1332031 \n+1482003 "}, {"sha": "646b67057756d3d6eeffaf93f465d8ebb9bfdd80", "filename": "tools/MapleIdRetriever/nbproject/private/private.properties", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/nbproject/private/private.properties", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/nbproject/private/private.properties", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/tools/MapleIdRetriever/nbproject/private/private.properties?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -1,2 +1,2 @@\n compile.on.save=true\n-user.properties.file=C:\\\\Users\\\\USER\\\\AppData\\\\Roaming\\\\NetBeans\\\\8.0.2\\\\build.properties\n+user.properties.file=C:\\\\Users\\\\RonanLana\\\\AppData\\\\Roaming\\\\NetBeans\\\\8.0.2\\\\build.properties"}, {"sha": "64b37e93ca427e6e850d12ff5f865e7c007266aa", "filename": "tools/MapleIdRetriever/src/mapleidretriever/MapleIdRetriever.java", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/src/mapleidretriever/MapleIdRetriever.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/2b38b626838c79d88acb8e1ff9617c60acac0300/tools/MapleIdRetriever/src/mapleidretriever/MapleIdRetriever.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/tools/MapleIdRetriever/src/mapleidretriever/MapleIdRetriever.java?ref=2b38b626838c79d88acb8e1ff9617c60acac0300", "patch": "@@ -41,9 +41,11 @@\n  * Set whether you are first installing the handbook on the SQL Server (TRUE) or just fetching whatever is on your \"fetch.txt\"\n  * file (FALSE) on the INSTALL_SQLTABLE property and build the project. With all done, run the Java executable.\n  * \n+ * Expected installing time: 30 minutes\n+ * \n  */\n public class MapleIdRetriever {\n-    private final static boolean INSTALL_SQLTABLE = true;\n+    private final static boolean INSTALL_SQLTABLE = false;\n     \n     static String host = \"jdbc:mysql://localhost:3306/maplesolaxia\";\n     static String driver = \"com.mysql.jdbc.Driver\";\n@@ -83,7 +85,12 @@ private static void parseMapleHandbookLine(String line) throws SQLException {\n         \n         if(tokens.length > 1) {\n             PreparedStatement ps = con.prepareStatement(\"INSERT INTO `handbook` (`id`, `name`) VALUES (?, ?)\");\n-            ps.setInt(1, Integer.parseInt(tokens[0]));\n+            try {\n+                ps.setInt(1, Integer.parseInt(tokens[0]));\n+            } catch (NumberFormatException npe) {   // odd...\n+                String num = tokens[0].substring(1);\n+                ps.setInt(1, Integer.parseInt(num));\n+            }\n             ps.setString(2, tokens[1]);\n             ps.execute();\n         }"}]}]},
