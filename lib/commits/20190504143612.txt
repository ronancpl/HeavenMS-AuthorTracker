{"fetchDate": "2019-12-19", "content": [{"sha": "e70215eb9decde02730e8ff5ebd6d59d29b7123c", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6ZTcwMjE1ZWI5ZGVjZGUwMjczMGU4ZmY1ZWJkNmQ1OWQyOWI3MTIzYw==", "commit": {"author": {"name": "jongames", "email": "18472148+jongames@users.noreply.github.com", "date": "2019-05-04T14:36:12Z"}, "committer": {"name": "Ronan Lana", "email": "rcpl2010@gmail.com", "date": "2019-05-04T14:36:12Z"}, "message": "Update and Fix PHP bcrypt to login server bcrypt compatibility (#462)\n\nUpdate jBCrypt from version 0.2 to 0.4 which resolves a security bug with character encoding and corrects an integer overflow bug.\r\nModify jBCrypt library to handle $2y$ hashes, which are produced by PHP's password_hash bcrypt function.  The original jBCrypt library only recognizes $2a$ hashes which makes it harder for a website CMS (content management system) to interface with the server's login and databases.\r\n\r\nCredit to: Ariel Salomon for compatibility support of 2b, 2y, and 2x hashes https://github.com/anebril/jBCrypt/commit/fe143600107f3b7975f603ddfe843669421e2bf9#diff-61d1d5b7b3c721fac60702cf559d70aa", "tree": {"sha": "587cb98ba96955629f4e8ed4586a50a1614ed41b", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/587cb98ba96955629f4e8ed4586a50a1614ed41b"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/e70215eb9decde02730e8ff5ebd6d59d29b7123c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/e70215eb9decde02730e8ff5ebd6d59d29b7123c", "html_url": "https://github.com/ronancpl/HeavenMS/commit/e70215eb9decde02730e8ff5ebd6d59d29b7123c", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/e70215eb9decde02730e8ff5ebd6d59d29b7123c/comments", "author": {"login": "jongames", "id": 18472148, "node_id": "MDQ6VXNlcjE4NDcyMTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/18472148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jongames", "html_url": "https://github.com/jongames", "followers_url": "https://api.github.com/users/jongames/followers", "following_url": "https://api.github.com/users/jongames/following{/other_user}", "gists_url": "https://api.github.com/users/jongames/gists{/gist_id}", "starred_url": "https://api.github.com/users/jongames/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jongames/subscriptions", "organizations_url": "https://api.github.com/users/jongames/orgs", "repos_url": "https://api.github.com/users/jongames/repos", "events_url": "https://api.github.com/users/jongames/events{/privacy}", "received_events_url": "https://api.github.com/users/jongames/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618d53c7078797ff926ddacd4762a7503a69db42", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/618d53c7078797ff926ddacd4762a7503a69db42", "html_url": "https://github.com/ronancpl/HeavenMS/commit/618d53c7078797ff926ddacd4762a7503a69db42"}], "stats": {"total": 1612, "additions": 895, "deletions": 717}, "files": [{"sha": "15321bc66484e822f6f87d8dc35a4be6d896e613", "filename": "src/tools/BCrypt.java", "status": "modified", "additions": 895, "deletions": 717, "changes": 1612, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/e70215eb9decde02730e8ff5ebd6d59d29b7123c/src/tools/BCrypt.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/e70215eb9decde02730e8ff5ebd6d59d29b7123c/src/tools/BCrypt.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/tools/BCrypt.java?ref=e70215eb9decde02730e8ff5ebd6d59d29b7123c", "patch": "@@ -11,12 +11,14 @@\n // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n-\n package tools;\n \n import java.io.UnsupportedEncodingException;\n+\n import java.security.SecureRandom;\n \n+import java.util.Arrays;\n+\n /**\n  * BCrypt implements OpenBSD-style Blowfish password hashing using\n  * the scheme described in \"A Future-Adaptable Password Scheme\" by\n@@ -53,725 +55,901 @@\n  * String stronger_salt = BCrypt.gensalt(12)<br />\n  * </code>\n  * <p>\n- * The amount of work increases exponentially (2**log_rounds), so \n+ * The amount of work increases exponentially (2**log_rounds), so\n  * each increment is twice as much work. The default log_rounds is\n  * 10, and the valid range is 4 to 30.\n  *\n  * @author Damien Miller\n- * @version 0.2\n+ * @version 0.4\n  */\n public class BCrypt {\n-\t// BCrypt parameters\n-\tprivate static final int GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n-\tprivate static final int BCRYPT_SALT_LEN = 16;\n-\n-\t// Blowfish parameters\n-\tprivate static final int BLOWFISH_NUM_ROUNDS = 16;\n-\n-\t// Initial contents of key schedule\n-\tprivate static final int P_orig[] = {\n-\t\t0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n-\t\t0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n-\t\t0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n-\t\t0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,\n-\t\t0x9216d5d9, 0x8979fb1b\n-\t};\n-\tprivate static final int S_orig[] = {\n-\t\t0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,\n-\t\t0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,\n-\t\t0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n-\t\t0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,\n-\t\t0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n-\t\t0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n-\t\t0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,\n-\t\t0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,\n-\t\t0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n-\t\t0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n-\t\t0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,\n-\t\t0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n-\t\t0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,\n-\t\t0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,\n-\t\t0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n-\t\t0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,\n-\t\t0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,\n-\t\t0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n-\t\t0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,\n-\t\t0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n-\t\t0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n-\t\t0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,\n-\t\t0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,\n-\t\t0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n-\t\t0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n-\t\t0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,\n-\t\t0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n-\t\t0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,\n-\t\t0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,\n-\t\t0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n-\t\t0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,\n-\t\t0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,\n-\t\t0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n-\t\t0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,\n-\t\t0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n-\t\t0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n-\t\t0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,\n-\t\t0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,\n-\t\t0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n-\t\t0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n-\t\t0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,\n-\t\t0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n-\t\t0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,\n-\t\t0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,\n-\t\t0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n-\t\t0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,\n-\t\t0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,\n-\t\t0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n-\t\t0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,\n-\t\t0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n-\t\t0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n-\t\t0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,\n-\t\t0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,\n-\t\t0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n-\t\t0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n-\t\t0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,\n-\t\t0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n-\t\t0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,\n-\t\t0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,\n-\t\t0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n-\t\t0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,\n-\t\t0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,\n-\t\t0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n-\t\t0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,\n-\t\t0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n-\t\t0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n-\t\t0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,\n-\t\t0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,\n-\t\t0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n-\t\t0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n-\t\t0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,\n-\t\t0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n-\t\t0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,\n-\t\t0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,\n-\t\t0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n-\t\t0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,\n-\t\t0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,\n-\t\t0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n-\t\t0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,\n-\t\t0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n-\t\t0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n-\t\t0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,\n-\t\t0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,\n-\t\t0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n-\t\t0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n-\t\t0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,\n-\t\t0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n-\t\t0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,\n-\t\t0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,\n-\t\t0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n-\t\t0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,\n-\t\t0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,\n-\t\t0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n-\t\t0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,\n-\t\t0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n-\t\t0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n-\t\t0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,\n-\t\t0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,\n-\t\t0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n-\t\t0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n-\t\t0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,\n-\t\t0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n-\t\t0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,\n-\t\t0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,\n-\t\t0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n-\t\t0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,\n-\t\t0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,\n-\t\t0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n-\t\t0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,\n-\t\t0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n-\t\t0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n-\t\t0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,\n-\t\t0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,\n-\t\t0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n-\t\t0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n-\t\t0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,\n-\t\t0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n-\t\t0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,\n-\t\t0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,\n-\t\t0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n-\t\t0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,\n-\t\t0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,\n-\t\t0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n-\t\t0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,\n-\t\t0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n-\t\t0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n-\t\t0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,\n-\t\t0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,\n-\t\t0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n-\t\t0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n-\t\t0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,\n-\t\t0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n-\t\t0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,\n-\t\t0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,\n-\t\t0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n-\t\t0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,\n-\t\t0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,\n-\t\t0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n-\t\t0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,\n-\t\t0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n-\t\t0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n-\t\t0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,\n-\t\t0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,\n-\t\t0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n-\t\t0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n-\t\t0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,\n-\t\t0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n-\t\t0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,\n-\t\t0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,\n-\t\t0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n-\t\t0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,\n-\t\t0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,\n-\t\t0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n-\t\t0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,\n-\t\t0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n-\t\t0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n-\t\t0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,\n-\t\t0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,\n-\t\t0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n-\t\t0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n-\t\t0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,\n-\t\t0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n-\t\t0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,\n-\t\t0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,\n-\t\t0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n-\t\t0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,\n-\t\t0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,\n-\t\t0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n-\t\t0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,\n-\t\t0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n-\t\t0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n-\t\t0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,\n-\t\t0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,\n-\t\t0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n-\t\t0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n-\t\t0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,\n-\t\t0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n-\t\t0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,\n-\t\t0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,\n-\t\t0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n-\t\t0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,\n-\t\t0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,\n-\t\t0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n-\t\t0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,\n-\t\t0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n-\t\t0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n-\t\t0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,\n-\t\t0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,\n-\t\t0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n-\t\t0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n-\t\t0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,\n-\t\t0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n-\t\t0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,\n-\t\t0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,\n-\t\t0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n-\t\t0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,\n-\t\t0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,\n-\t\t0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n-\t\t0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,\n-\t\t0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n-\t\t0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n-\t\t0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,\n-\t\t0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,\n-\t\t0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n-\t\t0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n-\t\t0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,\n-\t\t0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n-\t\t0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,\n-\t\t0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,\n-\t\t0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n-\t\t0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,\n-\t\t0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,\n-\t\t0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n-\t\t0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,\n-\t\t0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n-\t\t0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n-\t\t0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,\n-\t\t0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,\n-\t\t0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n-\t\t0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n-\t\t0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,\n-\t\t0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n-\t\t0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,\n-\t\t0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,\n-\t\t0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n-\t\t0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,\n-\t\t0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,\n-\t\t0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n-\t\t0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,\n-\t\t0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n-\t\t0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n-\t\t0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,\n-\t\t0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,\n-\t\t0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n-\t\t0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n-\t\t0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,\n-\t\t0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n-\t\t0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,\n-\t\t0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,\n-\t\t0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n-\t\t0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,\n-\t\t0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,\n-\t\t0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n-\t\t0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,\n-\t\t0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n-\t\t0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n-\t\t0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,\n-\t\t0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,\n-\t\t0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n-\t\t0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n-\t\t0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,\n-\t\t0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n-\t\t0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,\n-\t\t0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,\n-\t\t0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n-\t\t0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n-\t};\n-\n-\t// bcrypt IV: \"OrpheanBeholderScryDoubt\". The C implementation calls\n-\t// this \"ciphertext\", but it is really plaintext or an IV. We keep\n-\t// the name to make code comparison easier.\n-\tstatic private final int bf_crypt_ciphertext[] = {\n-\t\t0x4f727068, 0x65616e42, 0x65686f6c,\n-\t\t0x64657253, 0x63727944, 0x6f756274\n-\t};\n-\n-\t// Table for Base64 encoding\n-\tstatic private final char base64_code[] = {\n-\t\t'.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n-\t\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n-\t\t'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n-\t\t'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n-\t\t'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',\n-\t\t'6', '7', '8', '9'\n-\t};\n-\n-\t// Table for Base64 decoding\n-\tstatic private final byte index_64[] = {\n-\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-\t\t-1, -1, -1, -1, -1, -1, 0, 1, 54, 55,\n-\t\t56, 57, 58, 59, 60, 61, 62, 63, -1, -1,\n-\t\t-1, -1, -1, -1, -1, 2, 3, 4, 5, 6,\n-\t\t7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n-\t\t17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n-\t\t-1, -1, -1, -1, -1, -1, 28, 29, 30,\n-\t\t31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n-\t\t41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n-\t\t51, 52, 53, -1, -1, -1, -1, -1\n-\t};\n-\n-\t// Expanded Blowfish key\n-\tprivate int P[];\n-\tprivate int S[];\n-\n-\t/**\n-\t * Encode a byte array using bcrypt's slightly-modified base64\n-\t * encoding scheme. Note that this is *not* compatible with\n-\t * the standard MIME-base64 encoding.\n-\t *\n-\t * @param d\tthe byte array to encode\n-\t * @param len\tthe number of bytes to encode\n-\t * @return\tbase64-encoded string\n-\t * @exception IllegalArgumentException if the length is invalid\n-\t */\n-\tprivate static String encode_base64(byte d[], int len)\n-\t\tthrows IllegalArgumentException {\n-\t\tint off = 0;\n-\t\tStringBuffer rs = new StringBuffer();\n-\t\tint c1, c2;\n-\n-\t\tif (len <= 0 || len > d.length)\n-\t\t\tthrow new IllegalArgumentException (\"Invalid len\");\n-\n-\t\twhile (off < len) {\n-\t\t\tc1 = d[off++] & 0xff;\n-\t\t\trs.append(base64_code[(c1 >> 2) & 0x3f]);\n-\t\t\tc1 = (c1 & 0x03) << 4;\n-\t\t\tif (off >= len) {\n-\t\t\t\trs.append(base64_code[c1 & 0x3f]);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tc2 = d[off++] & 0xff;\n-\t\t\tc1 |= (c2 >> 4) & 0x0f;\n-\t\t\trs.append(base64_code[c1 & 0x3f]);\n-\t\t\tc1 = (c2 & 0x0f) << 2;\n-\t\t\tif (off >= len) {\n-\t\t\t\trs.append(base64_code[c1 & 0x3f]);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tc2 = d[off++] & 0xff;\n-\t\t\tc1 |= (c2 >> 6) & 0x03;\n-\t\t\trs.append(base64_code[c1 & 0x3f]);\n-\t\t\trs.append(base64_code[c2 & 0x3f]);\n-\t\t}\n-\t\treturn rs.toString();\n-\t}\n-\n-\t/**\n-\t * Look up the 3 bits base64-encoded by the specified character,\n-\t * range-checking againt conversion table\n-\t * @param x\tthe base64-encoded value\n-\t * @return\tthe decoded value of x\n-\t */\n-\tprivate static byte char64(char x) {\n-\t\tif ((int)x < 0 || (int)x > index_64.length)\n-\t\t\treturn -1;\n-\t\treturn index_64[(int)x];\n-\t}\n-\n-\t/**\n-\t * Decode a string encoded using bcrypt's base64 scheme to a\n-\t * byte array. Note that this is *not* compatible with\n-\t * the standard MIME-base64 encoding.\n-\t * @param s\tthe string to decode\n-\t * @param maxolen\tthe maximum number of bytes to decode\n-\t * @return\tan array containing the decoded bytes\n-\t * @throws IllegalArgumentException if maxolen is invalid\n-\t */\n-\tprivate static byte[] decode_base64(String s, int maxolen)\n-\t\tthrows IllegalArgumentException {\n-\t\tStringBuffer rs = new StringBuffer();\n-\t\tint off = 0, slen = s.length(), olen = 0;\n-\t\tbyte ret[];\n-\t\tbyte c1, c2, c3, c4, o;\n-\n-\t\tif (maxolen <= 0)\n-\t\t\tthrow new IllegalArgumentException (\"Invalid maxolen\");\n-\n-\t\twhile (off < slen - 1 && olen < maxolen) {\n-\t\t\tc1 = char64(s.charAt(off++));\n-\t\t\tc2 = char64(s.charAt(off++));\n-\t\t\tif (c1 == -1 || c2 == -1)\n-\t\t\t\tbreak;\n-\t\t\to = (byte)(c1 << 2);\n-\t\t\to |= (c2 & 0x30) >> 4;\n-\t\t\trs.append((char)o);\n-\t\t\tif (++olen >= maxolen || off >= slen)\n-\t\t\t\tbreak;\n-\t\t\tc3 = char64(s.charAt(off++));\n-\t\t\tif (c3 == -1)\n-\t\t\t\tbreak;\n-\t\t\to = (byte)((c2 & 0x0f) << 4);\n-\t\t\to |= (c3 & 0x3c) >> 2;\n-\t\t\trs.append((char)o);\n-\t\t\tif (++olen >= maxolen || off >= slen)\n-\t\t\t\tbreak;\n-\t\t\tc4 = char64(s.charAt(off++));\n-\t\t\to = (byte)((c3 & 0x03) << 6);\n-\t\t\to |= c4;\n-\t\t\trs.append((char)o);\n-\t\t\t++olen;\n-\t\t}\n-\n-\t\tret = new byte[olen];\n-\t\tfor (off = 0; off < olen; off++)\n-\t\t\tret[off] = (byte)rs.charAt(off);\n-\t\treturn ret;\n-\t}\n-\n-\t/**\n-\t * Blowfish encipher a single 64-bit block encoded as\n-\t * two 32-bit halves\n-\t * @param lr\tan array containing the two 32-bit half blocks\n-\t * @param off\tthe position in the array of the blocks\n-\t */\n-\tprivate final void encipher(int lr[], int off) {\n-\t\tint i, n, l = lr[off], r = lr[off + 1];\n-\n-\t\tl ^= P[0];\n-\t\tfor (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\n-\t\t\t// Feistel substitution on left word\n-\t\t\tn = S[(l >> 24) & 0xff];\n-\t\t\tn += S[0x100 | ((l >> 16) & 0xff)];\n-\t\t\tn ^= S[0x200 | ((l >> 8) & 0xff)];\n-\t\t\tn += S[0x300 | (l & 0xff)];\n-\t\t\tr ^= n ^ P[++i];\n-\n-\t\t\t// Feistel substitution on right word\n-\t\t\tn = S[(r >> 24) & 0xff];\n-\t\t\tn += S[0x100 | ((r >> 16) & 0xff)];\n-\t\t\tn ^= S[0x200 | ((r >> 8) & 0xff)];\n-\t\t\tn += S[0x300 | (r & 0xff)];\n-\t\t\tl ^= n ^ P[++i];\n-\t\t}\n-\t\tlr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n-\t\tlr[off + 1] = l;\n-\t}\n-\n-\t/**\n-\t * Cycically extract a word of key material\n-\t * @param data\tthe string to extract the data from\n-\t * @param offp\ta \"pointer\" (as a one-entry array) to the\n-\t * current offset into data\n-\t * @return\tthe next word of material from data\n-\t */\n-\tprivate static int streamtoword(byte data[], int offp[]) {\n-\t\tint i;\n-\t\tint word = 0;\n-\t\tint off = offp[0];\n-\n-\t\tfor (i = 0; i < 4; i++) {\n-\t\t\tword = (word << 8) | (data[off] & 0xff);\n-\t\t\toff = (off + 1) % data.length;\n-\t\t}\n-\n-\t\toffp[0] = off;\n-\t\treturn word;\n-\t}\n-\n-\t/**\n-\t * Initialise the Blowfish key schedule\n-\t */\n-\tprivate void init_key() {\n-\t\tP = (int[])P_orig.clone();\n-\t\tS = (int[])S_orig.clone();\n-\t}\n-\n-\t/**\n-\t * Key the Blowfish cipher\n-\t * @param key\tan array containing the key\n-\t */\n-\tprivate void key(byte key[]) {\n-\t\tint i;\n-\t\tint koffp[] = { 0 };\n-\t\tint lr[] = { 0, 0 };\n-\t\tint plen = P.length, slen = S.length;\n-\n-\t\tfor (i = 0; i < plen; i++)\n-\t\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n-\n-\t\tfor (i = 0; i < plen; i += 2) {\n-\t\t\tencipher(lr, 0);\n-\t\t\tP[i] = lr[0];\n-\t\t\tP[i + 1] = lr[1];\n-\t\t}\n-\n-\t\tfor (i = 0; i < slen; i += 2) {\n-\t\t\tencipher(lr, 0);\n-\t\t\tS[i] = lr[0];\n-\t\t\tS[i + 1] = lr[1];\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Perform the \"enhanced key schedule\" step described by\n-\t * Provos and Mazieres in \"A Future-Adaptable Password Scheme\"\n-\t * http://www.openbsd.org/papers/bcrypt-paper.ps\n-\t * @param data\tsalt information\n-\t * @param key\tpassword information\n-\t */\n-\tprivate void ekskey(byte data[], byte key[]) {\n-\t\tint i;\n-\t\tint koffp[] = { 0 }, doffp[] = { 0 };\n-\t\tint lr[] = { 0, 0 };\n-\t\tint plen = P.length, slen = S.length;\n-\n-\t\tfor (i = 0; i < plen; i++)\n-\t\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n-\n-\t\tfor (i = 0; i < plen; i += 2) {\n-\t\t\tlr[0] ^= streamtoword(data, doffp);\n-\t\t\tlr[1] ^= streamtoword(data, doffp);\n-\t\t\tencipher(lr, 0);\n-\t\t\tP[i] = lr[0];\n-\t\t\tP[i + 1] = lr[1];\n-\t\t}\n-\n-\t\tfor (i = 0; i < slen; i += 2) {\n-\t\t\tlr[0] ^= streamtoword(data, doffp);\n-\t\t\tlr[1] ^= streamtoword(data, doffp);\n-\t\t\tencipher(lr, 0);\n-\t\t\tS[i] = lr[0];\n-\t\t\tS[i + 1] = lr[1];\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Perform the central password hashing step in the\n-\t * bcrypt scheme\n-\t * @param password\tthe password to hash\n-\t * @param salt\tthe binary salt to hash with the password\n-\t * @param log_rounds\tthe binary logarithm of the number\n-\t * of rounds of hashing to apply\n-\t * @param cdata         the plaintext to encrypt\n-\t * @return\tan array containing the binary hashed password\n-\t */\n-\tpublic byte[] crypt_raw(byte password[], byte salt[], int log_rounds,\n-\t    int cdata[]) {\n-\t\tint rounds, i, j;\n-\t\tint clen = cdata.length;\n-\t\tbyte ret[];\n-\n-\t\tif (log_rounds < 4 || log_rounds > 30)\n-\t\t\tthrow new IllegalArgumentException (\"Bad number of rounds\");\n-\t\trounds = 1 << log_rounds;\n-\t\tif (salt.length != BCRYPT_SALT_LEN)\n-\t\t\tthrow new IllegalArgumentException (\"Bad salt length\");\n-\n-\t\tinit_key();\n-\t\tekskey(salt, password);\n-\t\tfor (i = 0; i != rounds; i++) {\n-\t\t\tkey(password);\n-\t\t\tkey(salt);\n-\t\t}\n-\n-\t\tfor (i = 0; i < 64; i++) {\n-\t\t\tfor (j = 0; j < (clen >> 1); j++)\n-\t\t\t\tencipher(cdata, j << 1);\n-\t\t}\n-\n-\t\tret = new byte[clen * 4];\n-\t\tfor (i = 0, j = 0; i < clen; i++) {\n-\t\t\tret[j++] = (byte)((cdata[i] >> 24) & 0xff);\n-\t\t\tret[j++] = (byte)((cdata[i] >> 16) & 0xff);\n-\t\t\tret[j++] = (byte)((cdata[i] >> 8) & 0xff);\n-\t\t\tret[j++] = (byte)(cdata[i] & 0xff);\n-\t\t}\n-\t\treturn ret;\n-\t}\n-\n-\t/**\n-\t * Hash a password using the OpenBSD bcrypt scheme\n-\t * @param password\tthe password to hash\n-\t * @param salt\tthe salt to hash with (perhaps generated\n-\t * using BCrypt.gensalt)\n-\t * @return\tthe hashed password\n-\t */\n-\tpublic static String hashpw(String password, String salt) {\n-\t\tBCrypt B;\n-\t\tString real_salt;\n-\t\tbyte passwordb[], saltb[], hashed[];\n-\t\tchar minor = (char)0;\n-\t\tint rounds, off = 0;\n-\t\tStringBuffer rs = new StringBuffer();\n-\n-\t\tif (salt.charAt(0) != '$' || salt.charAt(1) != '2')\n-\t\t\tthrow new IllegalArgumentException (\"Invalid salt version\");\n-\t\tif (salt.charAt(2) == '$')\n-\t\t\toff = 3;\n-\t\telse {\n-\t\t\tminor = salt.charAt(2);\n-\t\t\tif (minor != 'a' || salt.charAt(3) != '$')\n-\t\t\t\tthrow new IllegalArgumentException (\"Invalid salt revision\");\n-\t\t\toff = 4;\n-\t\t}\n-\n-\t\t// Extract number of rounds\n-\t\tif (salt.charAt(off + 2) > '$')\n-\t\t\tthrow new IllegalArgumentException (\"Missing salt rounds\");\n-\t\trounds = Integer.parseInt(salt.substring(off, off + 2));\n-\n-\t\treal_salt = salt.substring(off + 3, off + 25);\n-\t\ttry {\n-\t\t\tpasswordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\");\n-\t\t} catch (UnsupportedEncodingException uee) {\n-\t\t\tthrow new AssertionError(\"UTF-8 is not supported\");\n-\t\t}\n-\n-\t\tsaltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\n-\n-\t\tB = new BCrypt();\n-\t\thashed = B.crypt_raw(passwordb, saltb, rounds,\n-\t\t    (int[])bf_crypt_ciphertext.clone());\n-\n-\t\trs.append(\"$2\");\n-\t\tif (minor >= 'a')\n-\t\t\trs.append(minor);\n-\t\trs.append(\"$\");\n-\t\tif (rounds < 10)\n-\t\t\trs.append(\"0\");\n-\t\tif (rounds > 30) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t    \"rounds exceeds maximum (30)\");\n-\t\t}\n-\t\trs.append(Integer.toString(rounds));\n-\t\trs.append(\"$\");\n-\t\trs.append(encode_base64(saltb, saltb.length));\n-\t\trs.append(encode_base64(hashed,\n-\t\t    bf_crypt_ciphertext.length * 4 - 1));\n-\t\treturn rs.toString();\n-\t}\n-\n-\t/**\n-\t * Generate a salt for use with the BCrypt.hashpw() method\n-\t * @param log_rounds\tthe log2 of the number of rounds of\n-\t * hashing to apply - the work factor therefore increases as\n-\t * 2**log_rounds.\n-\t * @param random\t\tan instance of SecureRandom to use\n-\t * @return\tan encoded salt value\n-\t */\n-\tpublic static String gensalt(int log_rounds, SecureRandom random) {\n-\t\tStringBuffer rs = new StringBuffer();\n-\t\tbyte rnd[] = new byte[BCRYPT_SALT_LEN];\n-\n-\t\trandom.nextBytes(rnd);\n-\n-\t\trs.append(\"$2a$\");\n-\t\tif (log_rounds < 10)\n-\t\t\trs.append(\"0\");\n-\t\tif (log_rounds > 30) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t    \"log_rounds exceeds maximum (30)\");\n-\t\t}\n-\t\trs.append(Integer.toString(log_rounds));\n-\t\trs.append(\"$\");\n-\t\trs.append(encode_base64(rnd, rnd.length));\n-\t\treturn rs.toString();\n-\t}\n-\n-\t/**\n-\t * Generate a salt for use with the BCrypt.hashpw() method\n-\t * @param log_rounds\tthe log2 of the number of rounds of\n-\t * hashing to apply - the work factor therefore increases as\n-\t * 2**log_rounds.\n-\t * @return\tan encoded salt value\n-\t */\n-\tpublic static String gensalt(int log_rounds) {\n-\t\treturn gensalt(log_rounds, new SecureRandom());\n-\t}\n-\n-\t/**\n-\t * Generate a salt for use with the BCrypt.hashpw() method,\n-\t * selecting a reasonable default for the number of hashing\n-\t * rounds to apply\n-\t * @return\tan encoded salt value\n-\t */\n-\tpublic static String gensalt() {\n-\t\treturn gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);\n-\t}\n-\n-\t/**\n-\t * Check that a plaintext password matches a previously hashed\n-\t * one\n-\t * @param plaintext\tthe plaintext password to verify\n-\t * @param hashed\tthe previously-hashed password\n-\t * @return\ttrue if the passwords match, false otherwise\n-\t */\n-\tpublic static boolean checkpw(String plaintext, String hashed) {\n-\t\tbyte hashed_bytes[];\n-\t\tbyte try_bytes[];\n-\t\ttry {\n-\t\t\tString try_pw = hashpw(plaintext, hashed);\n-\t\t\thashed_bytes = hashed.getBytes(\"UTF-8\");\n-\t\t\ttry_bytes = try_pw.getBytes(\"UTF-8\");\n-\t\t} catch (UnsupportedEncodingException uee) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (hashed_bytes.length != try_bytes.length)\n-\t\t\treturn false;\n-\t\tbyte ret = 0;\n-\t\tfor (int i = 0; i < try_bytes.length; i++)\n-\t\t\tret |= hashed_bytes[i] ^ try_bytes[i];\n-\t\treturn ret == 0;\n-\t}\n-}\n+    // BCrypt parameters\n+\n+    private static final int GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n+    private static final int BCRYPT_SALT_LEN = 16;\n+    // Blowfish parameters\n+    private static final int BLOWFISH_NUM_ROUNDS = 16;\n+    // Initial contents of key schedule\n+    private static final int P_orig[] = {\n+        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n+        0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n+        0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n+        0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,\n+        0x9216d5d9, 0x8979fb1b\n+    };\n+    private static final int S_orig[] = {\n+        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,\n+        0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,\n+        0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n+        0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,\n+        0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n+        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n+        0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,\n+        0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,\n+        0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n+        0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n+        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,\n+        0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n+        0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,\n+        0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,\n+        0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n+        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,\n+        0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,\n+        0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n+        0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,\n+        0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n+        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n+        0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,\n+        0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,\n+        0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n+        0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n+        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,\n+        0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n+        0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,\n+        0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,\n+        0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n+        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,\n+        0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,\n+        0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n+        0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,\n+        0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n+        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n+        0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,\n+        0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,\n+        0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n+        0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n+        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,\n+        0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n+        0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,\n+        0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,\n+        0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n+        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,\n+        0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,\n+        0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n+        0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,\n+        0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n+        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n+        0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,\n+        0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,\n+        0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n+        0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n+        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,\n+        0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n+        0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,\n+        0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,\n+        0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n+        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,\n+        0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,\n+        0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n+        0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,\n+        0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n+        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n+        0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,\n+        0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,\n+        0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n+        0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n+        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,\n+        0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n+        0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,\n+        0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,\n+        0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n+        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,\n+        0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,\n+        0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n+        0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,\n+        0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n+        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n+        0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,\n+        0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,\n+        0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n+        0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n+        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,\n+        0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n+        0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,\n+        0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,\n+        0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n+        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,\n+        0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,\n+        0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n+        0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,\n+        0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n+        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n+        0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,\n+        0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,\n+        0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n+        0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n+        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,\n+        0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n+        0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,\n+        0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,\n+        0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n+        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,\n+        0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,\n+        0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n+        0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,\n+        0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n+        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n+        0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,\n+        0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,\n+        0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n+        0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n+        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,\n+        0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n+        0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,\n+        0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,\n+        0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n+        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,\n+        0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,\n+        0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n+        0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,\n+        0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n+        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n+        0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,\n+        0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,\n+        0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n+        0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n+        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,\n+        0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n+        0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,\n+        0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,\n+        0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n+        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,\n+        0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,\n+        0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n+        0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,\n+        0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n+        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n+        0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,\n+        0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,\n+        0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n+        0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n+        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,\n+        0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n+        0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,\n+        0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,\n+        0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n+        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,\n+        0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,\n+        0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n+        0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,\n+        0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n+        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n+        0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,\n+        0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,\n+        0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n+        0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n+        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,\n+        0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n+        0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,\n+        0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,\n+        0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n+        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,\n+        0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,\n+        0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n+        0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,\n+        0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n+        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n+        0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,\n+        0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,\n+        0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n+        0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n+        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,\n+        0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n+        0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,\n+        0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,\n+        0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n+        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,\n+        0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,\n+        0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n+        0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,\n+        0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n+        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n+        0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,\n+        0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,\n+        0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n+        0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n+        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,\n+        0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n+        0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,\n+        0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,\n+        0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n+        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,\n+        0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,\n+        0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n+        0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,\n+        0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n+        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n+        0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,\n+        0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,\n+        0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n+        0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n+        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,\n+        0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n+        0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,\n+        0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,\n+        0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n+        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,\n+        0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,\n+        0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n+        0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,\n+        0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n+        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n+        0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,\n+        0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,\n+        0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n+        0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n+        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,\n+        0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n+        0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,\n+        0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,\n+        0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n+        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,\n+        0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,\n+        0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n+        0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,\n+        0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n+        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n+        0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,\n+        0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,\n+        0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n+        0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n+        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,\n+        0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n+        0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,\n+        0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,\n+        0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n+        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,\n+        0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,\n+        0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n+        0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,\n+        0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n+        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n+        0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,\n+        0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,\n+        0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n+        0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n+        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,\n+        0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n+        0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,\n+        0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,\n+        0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n+        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n+    };\n+    // bcrypt IV: \"OrpheanBeholderScryDoubt\". The C implementation calls\n+    // this \"ciphertext\", but it is really plaintext or an IV. We keep\n+    // the name to make code comparison easier.\n+    static private final int bf_crypt_ciphertext[] = {\n+        0x4f727068, 0x65616e42, 0x65686f6c,\n+        0x64657253, 0x63727944, 0x6f756274\n+    };\n+    // Table for Base64 encoding\n+    static private final char base64_code[] = {\n+        '.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n+        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n+        'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n+        'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n+        'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',\n+        '6', '7', '8', '9'\n+    };\n+    // Table for Base64 decoding\n+    static private final byte index_64[] = {\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,\n+        56, 57, 58, 59, 60, 61, 62, 63, -1, -1,\n+        -1, -1, -1, -1, -1, 2, 3, 4, 5, 6,\n+        7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n+        -1, -1, -1, -1, -1, -1, 28, 29, 30,\n+        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n+        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n+        51, 52, 53, -1, -1, -1, -1, -1\n+    };\n+    // Expanded Blowfish key\n+    private int P[];\n+    private int S[];\n+\n+    /**\n+     * Encode a byte array using bcrypt's slightly-modified base64\n+     * encoding scheme. Note that this is *not* compatible with\n+     * the standard MIME-base64 encoding.\n+     *\n+     * @param d\tthe byte array to encode\n+     * @param len\tthe number of bytes to encode\n+     * @return\tbase64-encoded string\n+     * @exception IllegalArgumentException if the length is invalid\n+     */\n+    private static String encode_base64(byte d[], int len)\n+            throws IllegalArgumentException {\n+        int off = 0;\n+        StringBuilder rs = new StringBuilder();\n+        int c1, c2;\n+\n+        if (len <= 0 || len > d.length) {\n+            throw new IllegalArgumentException(\"Invalid len\");\n+        }\n+\n+        while (off < len) {\n+            c1 = d[off++] & 0xff;\n+            rs.append(base64_code[(c1 >> 2) & 0x3f]);\n+            c1 = (c1 & 0x03) << 4;\n+            if (off >= len) {\n+                rs.append(base64_code[c1 & 0x3f]);\n+                break;\n+            }\n+            c2 = d[off++] & 0xff;\n+            c1 |= (c2 >> 4) & 0x0f;\n+            rs.append(base64_code[c1 & 0x3f]);\n+            c1 = (c2 & 0x0f) << 2;\n+            if (off >= len) {\n+                rs.append(base64_code[c1 & 0x3f]);\n+                break;\n+            }\n+            c2 = d[off++] & 0xff;\n+            c1 |= (c2 >> 6) & 0x03;\n+            rs.append(base64_code[c1 & 0x3f]);\n+            rs.append(base64_code[c2 & 0x3f]);\n+        }\n+        return rs.toString();\n+    }\n+\n+    /**\n+     * Look up the 3 bits base64-encoded by the specified character,\n+     * range-checking againt conversion table\n+     * @param x\tthe base64-encoded value\n+     * @return\tthe decoded value of x\n+     */\n+    private static byte char64(char x) {\n+        if ((int) x < 0 || (int) x > index_64.length) {\n+            return -1;\n+        }\n+        return index_64[(int) x];\n+    }\n+\n+    /**\n+     * Decode a string encoded using bcrypt's base64 scheme to a\n+     * byte array. Note that this is *not* compatible with\n+     * the standard MIME-base64 encoding.\n+     * @param s\tthe string to decode\n+     * @param maxolen\tthe maximum number of bytes to decode\n+     * @return\tan array containing the decoded bytes\n+     * @throws IllegalArgumentException if maxolen is invalid\n+     */\n+    private static byte[] decode_base64(String s, int maxolen)\n+            throws IllegalArgumentException {\n+        StringBuilder rs = new StringBuilder();\n+        int off = 0, slen = s.length(), olen = 0;\n+        byte ret[];\n+        byte c1, c2, c3, c4, o;\n+\n+        if (maxolen <= 0) {\n+            throw new IllegalArgumentException(\"Invalid maxolen\");\n+        }\n+\n+        while (off < slen - 1 && olen < maxolen) {\n+            c1 = char64(s.charAt(off++));\n+            c2 = char64(s.charAt(off++));\n+            if (c1 == -1 || c2 == -1) {\n+                break;\n+            }\n+            o = (byte) (c1 << 2);\n+            o |= (c2 & 0x30) >> 4;\n+            rs.append((char) o);\n+            if (++olen >= maxolen || off >= slen) {\n+                break;\n+            }\n+            c3 = char64(s.charAt(off++));\n+            if (c3 == -1) {\n+                break;\n+            }\n+            o = (byte) ((c2 & 0x0f) << 4);\n+            o |= (c3 & 0x3c) >> 2;\n+            rs.append((char) o);\n+            if (++olen >= maxolen || off >= slen) {\n+                break;\n+            }\n+            c4 = char64(s.charAt(off++));\n+            o = (byte) ((c3 & 0x03) << 6);\n+            o |= c4;\n+            rs.append((char) o);\n+            ++olen;\n+        }\n+\n+        ret = new byte[olen];\n+        for (off = 0; off < olen; off++) {\n+            ret[off] = (byte) rs.charAt(off);\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * Blowfish encipher a single 64-bit block encoded as\n+     * two 32-bit halves\n+     * @param lr\tan array containing the two 32-bit half blocks\n+     * @param off\tthe position in the array of the blocks\n+     */\n+    private final void encipher(int lr[], int off) {\n+        int i, n, l = lr[off], r = lr[off + 1];\n+\n+        l ^= P[0];\n+        for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\n+            // Feistel substitution on left word\n+            n = S[(l >> 24) & 0xff];\n+            n += S[0x100 | ((l >> 16) & 0xff)];\n+            n ^= S[0x200 | ((l >> 8) & 0xff)];\n+            n += S[0x300 | (l & 0xff)];\n+            r ^= n ^ P[++i];\n+\n+            // Feistel substitution on right word\n+            n = S[(r >> 24) & 0xff];\n+            n += S[0x100 | ((r >> 16) & 0xff)];\n+            n ^= S[0x200 | ((r >> 8) & 0xff)];\n+            n += S[0x300 | (r & 0xff)];\n+            l ^= n ^ P[++i];\n+        }\n+        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n+        lr[off + 1] = l;\n+    }\n+\n+    /**\n+     * Cycically extract a word of key material\n+     * @param data\tthe string to extract the data from\n+     * @param offp\ta \"pointer\" (as a one-entry array) to the\n+     * current offset into data\n+     * @param signp\ta \"pointer\" (as a one-entry array) to the\n+     * cumulative flag for non-benign sign extension\n+     * @return\tcorrect and buggy next word of material from data as int[2]\n+     */\n+    private static int[] streamtowords(byte data[], int offp[], int signp[]) {\n+        int i;\n+        int words[] = { 0, 0 };\n+        int off = offp[0];\n+        int sign = signp[0];\n+\n+        for (i = 0; i < 4; i++) {\n+            words[0] = (words[0] << 8) | (data[off] & 0xff);\n+            words[1] = (words[1] << 8) | (int)data[off];\n+            if (i > 0) sign |= words[1] & 0x80;\n+            off = (off + 1) % data.length;\n+        }\n+\n+        offp[0] = off;\n+        signp[0] = sign;\n+        return words;\n+    }\n+\n+    /**\n+     * Cycically extract a word of key material\n+     * @param data\tthe string to extract the data from\n+     * @param offp\ta \"pointer\" (as a one-entry array) to the\n+     * current offset into data\n+     * @return\tthe next word of material from data\n+     */\n+    private static int streamtoword(byte data[], int offp[]) {\n+        int signp[] = { 0 };\n+        return streamtowords(data, offp, signp)[0];\n+    }\n+\n+    /**\n+     * Cycically extract a word of key material, with sign-extension bug\n+     * @param data\tthe string to extract the data from\n+     * @param offp\ta \"pointer\" (as a one-entry array) to the\n+     * current offset into data\n+     * @return\tthe next word of material from data\n+     */\n+    private static int streamtoword_bug(byte data[], int offp[]) {\n+        int signp[] = { 0 };\n+        return streamtowords(data, offp, signp)[1];\n+    }\n+\n+    /**\n+     * Initialise the Blowfish key schedule\n+     */\n+    private void init_key() {\n+        P = (int[]) P_orig.clone();\n+        S = (int[]) S_orig.clone();\n+    }\n+\n+    /**\n+     * Key the Blowfish cipher\n+     * @param key\tan array containing the key\n+     * @param sign_ext_bug\ttrue to implement the 2x bug\n+     */\n+    private void key(byte key[], boolean sign_ext_bug) {\n+        int i;\n+        int koffp[] = {0};\n+        int lr[] = {0, 0};\n+        int plen = P.length, slen = S.length;\n+\n+        for (i = 0; i < plen; i++) {\n+            if (!sign_ext_bug)\n+                P[i] = P[i] ^ streamtoword(key, koffp);\n+            else\n+                P[i] = P[i] ^ streamtoword_bug(key, koffp);\n+        }\n+\n+        for (i = 0; i < plen; i += 2) {\n+            encipher(lr, 0);\n+            P[i] = lr[0];\n+            P[i + 1] = lr[1];\n+        }\n+\n+        for (i = 0; i < slen; i += 2) {\n+            encipher(lr, 0);\n+            S[i] = lr[0];\n+            S[i + 1] = lr[1];\n+        }\n+    }\n+\n+    /**\n+     * Perform the \"enhanced key schedule\" step described by\n+     * Provos and Mazieres in \"A Future-Adaptable Password Scheme\"\n+     * http://www.openbsd.org/papers/bcrypt-paper.ps\n+     * @param data\t\t\tsalt information\n+     * @param key\t\t\tpassword information\n+     * @param sign_ext_bug\ttrue to implement the 2x bug\n+     * @param safety\t\tbit 16 is set when the safety measure is requested\n+     */\n+    private void ekskey(byte data[], byte key[],\n+            boolean sign_ext_bug, int safety) {\n+        int i;\n+        int koffp[] = {0}, doffp[] = {0};\n+        int lr[] = {0, 0};\n+        int plen = P.length, slen = S.length;\n+        int signp[] = { 0 }; // non-benign sign-extension flag\n+        int diff = 0;        // zero iff correct and buggy are same\n+\n+        for (i = 0; i < plen; i++) {\n+            int words[] = streamtowords(key, koffp, signp);\n+            diff |= words[0] ^ words[1];\n+            P[i] = P[i] ^ words[sign_ext_bug ? 1 : 0];\n+        }\n+\n+        int sign = signp[0];\n+\n+        /*\n+         * At this point, \"diff\" is zero iff the correct and buggy algorithms produced\n+         * exactly the same result.  If so and if \"sign\" is non-zero, which indicates\n+         * that there was a non-benign sign extension, this means that we have a\n+         * collision between the correctly computed hash for this password and a set of\n+         * passwords that could be supplied to the buggy algorithm.  Our safety measure\n+         * is meant to protect from such many-buggy to one-correct collisions, by\n+         * deviating from the correct algorithm in such cases.  Let's check for this.\n+         */\n+        diff |= diff >> 16; /* still zero iff exact match */\n+        diff &= 0xffff; /* ditto */\n+        diff += 0xffff; /* bit 16 set iff \"diff\" was non-zero (on non-match) */\n+        sign <<= 9; /* move the non-benign sign extension flag to bit 16 */\n+        sign &= ~diff & safety; /* action needed? */\n+\n+        /*\n+         * If we have determined that we need to deviate from the correct algorithm,\n+         * flip bit 16 in initial expanded key.  (The choice of 16 is arbitrary, but\n+         * let's stick to it now.  It came out of the approach we used above, and it's\n+         * not any worse than any other choice we could make.)\n+         *\n+         * It is crucial that we don't do the same to the expanded key used in the main\n+         * Eksblowfish loop.  By doing it to only one of these two, we deviate from a\n+         * state that could be directly specified by a password to the buggy algorithm\n+         * (and to the fully correct one as well, but that's a side-effect).\n+         */\n+        P[0] ^= sign;\n+\n+        for (i = 0; i < plen; i += 2) {\n+            lr[0] ^= streamtoword(data, doffp);\n+            lr[1] ^= streamtoword(data, doffp);\n+            encipher(lr, 0);\n+            P[i] = lr[0];\n+            P[i + 1] = lr[1];\n+        }\n+\n+        for (i = 0; i < slen; i += 2) {\n+            lr[0] ^= streamtoword(data, doffp);\n+            lr[1] ^= streamtoword(data, doffp);\n+            encipher(lr, 0);\n+            S[i] = lr[0];\n+            S[i + 1] = lr[1];\n+        }\n+    }\n+\n+    /**\n+     * Perform the central password hashing step in the\n+     * bcrypt scheme\n+     * @param password\tthe password to hash\n+     * @param salt\tthe binary salt to hash with the password\n+     * @param log_rounds\tthe binary logarithm of the number\n+     * of rounds of hashing to apply\n+     * @param sign_ext_bug\ttrue to implement the 2x bug\n+     * @param safety\t\tbit 16 is set when the safety measure is requested\n+     * @param cdata         the plaintext to encrypt\n+     * @return\tan array containing the binary hashed password\n+     */\n+    private byte[] crypt_raw(byte password[], byte salt[], int log_rounds,\n+            boolean sign_ext_bug, int safety, int cdata[]) {\n+        int rounds, i, j;\n+        int clen = cdata.length;\n+        byte ret[];\n+\n+        if (log_rounds < 4 || log_rounds > 30) {\n+            throw new IllegalArgumentException(\"Bad number of rounds\");\n+        }\n+        rounds = 1 << log_rounds;\n+        if (salt.length != BCRYPT_SALT_LEN) {\n+            throw new IllegalArgumentException(\"Bad salt length\");\n+        }\n+\n+        init_key();\n+        ekskey(salt, password, sign_ext_bug, safety);\n+        for (i = 0; i != rounds; i++) {\n+            key(password, sign_ext_bug);\n+            key(salt, false);\n+        }\n+\n+        for (i = 0; i < 64; i++) {\n+            for (j = 0; j < (clen >> 1); j++) {\n+                encipher(cdata, j << 1);\n+            }\n+        }\n+\n+        ret = new byte[clen * 4];\n+        for (i = 0, j = 0; i < clen; i++) {\n+            ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);\n+            ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);\n+            ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);\n+            ret[j++] = (byte) (cdata[i] & 0xff);\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * Converts given plaintext to byte representation.\n+     * @param plaintext\t\tthe plaintext password to convert\n+     * @return Byte representation of given plaintext.\n+     */\n+    private static byte[] stringToBytes(String plaintext) {\n+        byte plaintextb[];\n+\n+        try {\n+            plaintextb = plaintext.getBytes(\"UTF-8\");\n+        } catch (UnsupportedEncodingException uee) {\n+            throw new AssertionError(\"UTF-8 is not supported\");\n+        }\n+\n+        return plaintextb;\n+    }\n+\n+    /**\n+     * Hash a password using the OpenBSD bcrypt scheme\n+     * @param password\tthe password to hash\n+     * @param salt\tthe salt to hash with (perhaps generated\n+     * using BCrypt.gensalt)\n+     * @return\tthe hashed password\n+     */\n+    public static String hashpw(String password, String salt) {\n+        byte passwordb[] = stringToBytes(password);\n+\n+        return hashpw(passwordb, salt);\n+    }\n+\n+    /**\n+     * Hash a password using the OpenBSD bcrypt scheme\n+     * @param passwordb\tthe password to hash, as a byte array\n+     * @param salt\tthe salt to hash with (perhaps generated\n+     * using BCrypt.gensalt)\n+     * @return\tthe hashed password\n+     */\n+    public static String hashpw(byte passwordb[], String salt) {\n+        BCrypt B;\n+        String real_salt;\n+        byte saltb[], hashed[];\n+        char minor = (char) 0;\n+        int rounds, off = 0;\n+        StringBuilder rs = new StringBuilder();\n+\n+        if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {\n+            throw new IllegalArgumentException(\"Invalid salt version\");\n+        }\n+        if (salt.charAt(2) == '$') {\n+            off = 3;\n+        } else {\n+            minor = salt.charAt(2);\n+            if ((minor != 'a' && minor != 'x' && minor != 'y' && minor != 'b')\n+                    || salt.charAt(3) != '$') {\n+                throw new IllegalArgumentException(\"Invalid salt revision\");\n+            }\n+            off = 4;\n+        }\n+\n+        // Extract number of rounds\n+        if (salt.charAt(off + 2) > '$') {\n+            throw new IllegalArgumentException(\"Missing salt rounds\");\n+        }\n+        rounds = Integer.parseInt(salt.substring(off, off + 2));\n+\n+        real_salt = salt.substring(off + 3, off + 25);\n+\n+        saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\n+\n+        if (minor >= 'a') // add null terminator\n+            passwordb = Arrays.copyOf(passwordb, passwordb.length + 1);\n+\n+        B = new BCrypt();\n+        hashed = B.crypt_raw(passwordb, saltb, rounds,\n+                minor == 'x',  // true for sign extension bug ('2x')\n+                minor == 'a' ? 0x10000 : 0, // safety factor for '2a'\n+                (int[])bf_crypt_ciphertext.clone());\n+\n+        rs.append(\"$2\");\n+        if (minor >= 'a') {\n+            rs.append(minor);\n+        }\n+        rs.append(\"$\");\n+        if (rounds < 10) {\n+            rs.append(\"0\");\n+        }\n+        if (rounds > 30) {\n+            throw new IllegalArgumentException(\n+                    \"rounds exceeds maximum (30)\");\n+        }\n+        rs.append(Integer.toString(rounds));\n+        rs.append(\"$\");\n+        rs.append(encode_base64(saltb, saltb.length));\n+        rs.append(encode_base64(hashed,\n+                bf_crypt_ciphertext.length * 4 - 1));\n+        return rs.toString();\n+    }\n+\n+    /**\n+     * Generate a salt for use with the BCrypt.hashpw() method\n+     * @param prefix\t\tthe prefix value (default $2y)\n+     * @param log_rounds\tthe log2 of the number of rounds of\n+     * hashing to apply - the work factor therefore increases as\n+     * 2**log_rounds.\n+     * @param random\t\tan instance of SecureRandom to use\n+     * @return\tan encoded salt value\n+     * @exception IllegalArgumentException if prefix or log_rounds is invalid\n+     */\n+    public static String gensalt(String prefix, int log_rounds, SecureRandom random)\n+            throws IllegalArgumentException {\n+        StringBuilder rs = new StringBuilder();\n+        byte rnd[] = new byte[BCRYPT_SALT_LEN];\n+\n+        if (!prefix.startsWith(\"$2\") ||\n+                (prefix.charAt(2) != 'a' && prefix.charAt(2) != 'y') &&\n+                 prefix.charAt(2) != 'b') {\n+            throw new IllegalArgumentException (\"Invalid prefix\");\n+        }\n+        if (log_rounds < 4 || log_rounds > 31) {\n+            throw new IllegalArgumentException (\"Invalid log_rounds\");\n+        }\n+\n+        random.nextBytes(rnd);\n+\n+        rs.append(\"$2\");\n+        rs.append(prefix.charAt(2));\n+        rs.append(\"$\");\n+        if (log_rounds < 10) {\n+            rs.append(\"0\");\n+        }\n+        if (log_rounds > 30) {\n+            throw new IllegalArgumentException(\n+                    \"log_rounds exceeds maximum (30)\");\n+        }\n+        rs.append(Integer.toString(log_rounds));\n+        rs.append(\"$\");\n+        rs.append(encode_base64(rnd, rnd.length));\n+        return rs.toString();\n+    }\n+\n+    /**\n+     * Generate a salt for use with the BCrypt.hashpw() method\n+     * @param prefix\t\tthe prefix value (default $2y)\n+     * @param log_rounds\tthe log2 of the number of rounds of\n+     * hashing to apply - the work factor therefore increases as\n+     * 2**log_rounds.\n+     * @return\tan encoded salt value\n+     * @exception IllegalArgumentException if prefix or log_rounds is invalid\n+     */\n+    public static String gensalt(String prefix, int log_rounds)\n+            throws IllegalArgumentException {\n+        return gensalt(prefix, log_rounds, new SecureRandom());\n+    }\n+\n+    /**\n+     * Generate a salt for use with the BCrypt.hashpw() method\n+     * @param log_rounds\tthe log2 of the number of rounds of\n+     * hashing to apply - the work factor therefore increases as\n+     * 2**log_rounds.\n+     * @param random\t\tan instance of SecureRandom to use\n+     * @return\tan encoded salt value\n+     * @exception IllegalArgumentException if prefix or log_rounds is invalid\n+     */\n+    public static String gensalt(int log_rounds, SecureRandom random)\n+            throws IllegalArgumentException {\n+        return gensalt(\"$2y\", log_rounds, random);\n+    }\n+\n+    /**\n+     * Generate a salt for use with the BCrypt.hashpw() method\n+     * @param log_rounds\tthe log2 of the number of rounds of\n+     * hashing to apply - the work factor therefore increases as\n+     * 2**log_rounds.\n+     * @return\tan encoded salt value\n+     * @exception IllegalArgumentException if prefix or log_rounds is invalid\n+     */\n+    public static String gensalt(int log_rounds)\n+            throws IllegalArgumentException {\n+        return gensalt(log_rounds, new SecureRandom());\n+    }\n+\n+    /**\n+     * Generate a salt for use with the BCrypt.hashpw() method,\n+     * selecting a reasonable default for the number of hashing\n+     * rounds to apply\n+     * @return\tan encoded salt value\n+     * @exception IllegalArgumentException if prefix or log_rounds is invalid\n+     */\n+    public static String gensalt()\n+            throws IllegalArgumentException {\n+        return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);\n+    }\n+\n+    /**\n+     * Check that a plaintext password matches a previously hashed\n+     * one\n+     * @param plaintext\tthe plaintext password to verify\n+     * @param hashed\tthe previously-hashed password\n+     * @return\ttrue if the passwords match, false otherwise\n+     */\n+    public static boolean checkpw(String plaintext, String hashed) {\n+        byte plaintextb[] = stringToBytes(plaintext);\n+        return checkpw(plaintextb, hashed);\n+    }\n+\n+    /**\n+     * Check that a plaintext byte[] password matches a previously hashed\n+     * one\n+     * @param plaintext\tthe plaintext password to verify\n+     * @param hashed\tthe previously-hashed password\n+     * @return\ttrue if the passwords match, false otherwise\n+     */\n+    public static boolean checkpw(byte[] plaintext, String hashed) {\n+        byte hashed_bytes[];\n+        byte try_bytes[];\n+        try {\n+            String try_pw = hashpw(plaintext, hashed);\n+            hashed_bytes = hashed.getBytes(\"UTF-8\");\n+            try_bytes = try_pw.getBytes(\"UTF-8\");\n+        } catch (UnsupportedEncodingException uee) {\n+            return false;\n+        }\n+        if (hashed_bytes.length != try_bytes.length)\n+            return false;\n+        byte ret = 0;\n+        for (int i = 0; i < try_bytes.length; i++)\n+            ret |= hashed_bytes[i] ^ try_bytes[i];\n+        return ret == 0;\n+    }\n+}\n\\ No newline at end of file"}]}]},
