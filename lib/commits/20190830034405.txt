{"fetchDate": "2019-12-19", "content": [{"sha": "82d6d6d757e04736ab7212f522dd79f18854faa2", "node_id": "MDY6Q29tbWl0NDUwODIwMjM6ODJkNmQ2ZDc1N2UwNDczNmFiNzIxMmY1MjJkZDc5ZjE4ODU0ZmFhMg==", "commit": {"author": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2019-08-30T03:44:05Z"}, "committer": {"name": "ronancpl", "email": "rcpl2010@gmail.com", "date": "2019-08-30T03:44:05Z"}, "message": "Io write Update\n\nRemoved usage of busy loop in handling sent packets.", "tree": {"sha": "a8f254957c97ed7f81dc3a42933aacadebe4c4c9", "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/trees/a8f254957c97ed7f81dc3a42933aacadebe4c4c9"}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/git/commits/82d6d6d757e04736ab7212f522dd79f18854faa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/82d6d6d757e04736ab7212f522dd79f18854faa2", "html_url": "https://github.com/ronancpl/HeavenMS/commit/82d6d6d757e04736ab7212f522dd79f18854faa2", "comments_url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/82d6d6d757e04736ab7212f522dd79f18854faa2/comments", "author": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ronancpl", "id": 9257761, "node_id": "MDQ6VXNlcjkyNTc3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9257761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronancpl", "html_url": "https://github.com/ronancpl", "followers_url": "https://api.github.com/users/ronancpl/followers", "following_url": "https://api.github.com/users/ronancpl/following{/other_user}", "gists_url": "https://api.github.com/users/ronancpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronancpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronancpl/subscriptions", "organizations_url": "https://api.github.com/users/ronancpl/orgs", "repos_url": "https://api.github.com/users/ronancpl/repos", "events_url": "https://api.github.com/users/ronancpl/events{/privacy}", "received_events_url": "https://api.github.com/users/ronancpl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbce82a8b415d7ad7dde16aa8c540ae2a9a9973", "url": "https://api.github.com/repos/ronancpl/HeavenMS/commits/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973", "html_url": "https://github.com/ronancpl/HeavenMS/commit/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973"}], "stats": {"total": 186, "additions": 8, "deletions": 178}, "files": [{"sha": "415a87b7221c526836078b05f927a470340f68c2", "filename": "src/client/MapleClient.java", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/82d6d6d757e04736ab7212f522dd79f18854faa2/src/client/MapleClient.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/82d6d6d757e04736ab7212f522dd79f18854faa2/src/client/MapleClient.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/client/MapleClient.java?ref=82d6d6d757e04736ab7212f522dd79f18854faa2", "patch": "@@ -61,7 +61,6 @@\n \n import org.apache.mina.core.session.IoSession;\n \n-import net.server.world.announcer.MapleAnnouncerCoordinator;\n import client.inventory.MapleInventoryType;\n import constants.GameConstants;\n import constants.ServerConstants;\n@@ -95,7 +94,6 @@\n \tprivate MapleAESOFB receive;\n \tprivate final IoSession session;\n         private MapleCharacter player;\n-        private MapleAnnouncerCoordinator announcer = MapleAnnouncerCoordinator.getInstance();\n \tprivate int channel = 1;\n \tprivate int accId = -4;\n \tprivate boolean loggedIn = false;\n@@ -120,6 +118,7 @@\n         private final Semaphore actionsSemaphore = new Semaphore(7);\n \tprivate final Lock lock = MonitoredReentrantLockFactory.createLock(MonitoredLockType.CLIENT, true);\n         private final Lock encoderLock = MonitoredReentrantLockFactory.createLock(MonitoredLockType.CLIENT_ENCODER, true);\n+        private final Lock announcerLock = MonitoredReentrantLockFactory.createLock(MonitoredLockType.CLIENT_ANNOUNCER, true);\n         private static final Lock loginLocks[] = new Lock[200];  // thanks Masterrulax & try2hack for pointing out a bottleneck issue here\n         private Calendar tempBanCalendar;\n \tprivate int votePoints;\n@@ -1143,13 +1142,6 @@ public int getWorld() {\n \n \tpublic void setWorld(int world) {\n \t\tthis.world = world;\n-                \n-                World wserv = Server.getInstance().getWorld(world);\n-                if (wserv != null) {\n-                        this.announcer = wserv.getAnnouncerCoordinator();\n-                } else {\n-                        this.announcer = MapleAnnouncerCoordinator.getInstance();\n-                }\n \t}\n \n \tpublic void pongReceived() {\n@@ -1475,7 +1467,12 @@ public synchronized void announceBossHpBar(MapleMonster mm, final int mobHash, f\n \t}\n         \n         public void announce(final byte[] packet) {     // thanks GitGud for noticing an opportunity for improvement by overcoming \"synchronized announce\"\n-                announcer.append(session, packet);\n+                announcerLock.lock();\n+                try {\n+                        session.write(packet);\n+                } finally {\n+                        announcerLock.unlock();\n+                }\n \t}\n \n         public void announceHint(String msg, int length) {"}, {"sha": "723e52b1cb5d692f6e01e0085fc4ccfd731af98d", "filename": "src/net/server/Server.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/Server.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/Server.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/Server.java?ref=82d6d6d757e04736ab7212f522dd79f18854faa2", "patch": "@@ -71,7 +71,6 @@\n import net.server.worker.ReleaseLockWorker;\n import net.server.worker.RespawnWorker;\n import net.server.world.World;\n-import net.server.world.announcer.MapleAnnouncerCoordinator;\n \n import org.apache.mina.core.buffer.IoBuffer;\n import org.apache.mina.core.buffer.SimpleBufferAllocator;\n@@ -950,7 +949,6 @@ public void init() {\n             System.exit(0);\n         }\n         \n-        MapleAnnouncerCoordinator.getInstance().init();\n         System.out.println();\n         \n         if(ServerConstants.USE_FAMILY_SYSTEM) {"}, {"sha": "64eed9e9f9fe7e032ec668d7aad4a3bff21402fd", "filename": "src/net/server/audit/locks/MonitoredLockType.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/audit/locks/MonitoredLockType.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/audit/locks/MonitoredLockType.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/audit/locks/MonitoredLockType.java?ref=82d6d6d757e04736ab7212f522dd79f18854faa2", "patch": "@@ -35,6 +35,7 @@\n     CHARACTER_EVT,\n     CHARACTER_STA,\n     CLIENT,\n+    CLIENT_ANNOUNCER,\n     CLIENT_ENCODER,\n     CLIENT_SESSION,\n     CLIENT_LOGIN,"}, {"sha": "ddf1e8f7fddb5bd81eb3dc49d62d26623b6a6b31", "filename": "src/net/server/world/World.java", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/world/World.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/82d6d6d757e04736ab7212f522dd79f18854faa2/src/net/server/world/World.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/world/World.java?ref=82d6d6d757e04736ab7212f522dd79f18854faa2", "patch": "@@ -98,7 +98,6 @@\n import net.server.worker.TimedMapObjectWorker;\n import net.server.worker.TimeoutWorker;\n import net.server.worker.WeddingReservationWorker;\n-import net.server.world.announcer.MapleAnnouncerCoordinator;\n import tools.DatabaseConnection;\n import tools.MaplePacketCreator;\n import tools.Pair;\n@@ -125,7 +124,6 @@\n     private PlayerStorage players = new PlayerStorage();\n     private MapleMatchCheckerCoordinator matchChecker = new MapleMatchCheckerCoordinator();\n     private MaplePartySearchCoordinator partySearch = new MaplePartySearchCoordinator();\n-    private MapleAnnouncerCoordinator announcer = new MapleAnnouncerCoordinator();\n     \n     private final ReentrantReadWriteLock chnLock = new MonitoredReentrantReadWriteLock(MonitoredLockType.WORLD_CHANNELS, true);\n     private ReadLock chnRLock = chnLock.readLock();\n@@ -224,8 +222,6 @@ public World(int world, int flag, String eventmsg, int exprate, int droprate, in\n             FamilyDailyResetWorker.resetEntitlementUsage(this);\n             tman.register(new FamilyDailyResetWorker(this), 24 * 60 * 60 * 1000, timeLeft);\n         }\n-        \n-        announcer.init();\n     }\n \n     public int getChannelsSize() {\n@@ -557,10 +553,6 @@ public MaplePartySearchCoordinator getPartySearchCoordinator() {\n         return partySearch;\n     }\n     \n-    public MapleAnnouncerCoordinator getAnnouncerCoordinator() {\n-        return announcer;\n-    }\n-\n     public void addPlayer(MapleCharacter chr) {\n         players.addPlayer(chr);\n     }\n@@ -2170,7 +2162,6 @@ public final void shutdown() {\n         players.disconnectAll();\n         players = null;\n         \n-        announcer.shutdown();\n         clearWorldData();\n         System.out.println(\"Finished shutting down world \" + id + \"\\r\\n\");\n     }"}, {"sha": "92cb1d0d009e285ad723154ed822d4c92ee202ee", "filename": "src/net/server/world/announcer/MapleAnnouncerCoordinator.java", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973/src/net/server/world/announcer/MapleAnnouncerCoordinator.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973/src/net/server/world/announcer/MapleAnnouncerCoordinator.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/world/announcer/MapleAnnouncerCoordinator.java?ref=efbce82a8b415d7ad7dde16aa8c540ae2a9a9973", "patch": "@@ -1,83 +0,0 @@\n-/*\n-    This file is part of the HeavenMS MapleStory Server\n-    Copyleft (L) 2016 - 2019 RonanLana\n-\n-    This program is free software: you can redistribute it and/or modify\n-    it under the terms of the GNU Affero General Public License as\n-    published by the Free Software Foundation version 3 as published by\n-    the Free Software Foundation. You may not use, modify or distribute\n-    this program under any other version of the GNU Affero General Public\n-    License.\n-\n-    This program is distributed in the hope that it will be useful,\n-    but WITHOUT ANY WARRANTY; without even the implied warranty of\n-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-    GNU Affero General Public License for more details.\n-\n-    You should have received a copy of the GNU Affero General Public License\n-    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-*/\n-package net.server.world.announcer;\n-\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import org.apache.mina.core.session.IoSession;\n-import net.server.world.announcer.MapleAnnouncerEntryPool.SessionPacket;\n-\n-/**\n- *\n- * @author Ronan\n- */\n-public class MapleAnnouncerCoordinator {\n-    \n-    private static final MapleAnnouncerCoordinator instance = new MapleAnnouncerCoordinator();\n-    \n-    public static MapleAnnouncerCoordinator getInstance() {   // world-agnostic Announcer coordinator\n-        return instance;\n-    }\n-    \n-    private MapleAnnouncerEntryPool pool = new MapleAnnouncerEntryPool();\n-    private ConcurrentLinkedQueue<SessionPacket> queue = new ConcurrentLinkedQueue<>();\n-    private Thread t;\n-    \n-    public void append(IoSession io, byte[] packet) {\n-        queue.offer(pool.getSessionPacket(io, packet));\n-    }\n-    \n-    public void init() {\n-        final Runnable r = new Runnable() {\n-            @Override\n-            public void run() {\n-                while (!Thread.interrupted()) {\n-                    try {\n-                        SessionPacket p = queue.poll();\n-                        if (p != null) {\n-                            IoSession session = p.getSession();\n-                            byte[] packet = p.getPacket();\n-\n-                            session.write(packet);\n-                            pool.returnSessionPacket(p);\n-                        }\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n-                }\n-            }\n-        };\n-        \n-        t = new Thread(r);\n-        t.start();\n-    }\n-    \n-    public void shutdown() {\n-        t.interrupt();\n-        try {\n-            t.join();\n-        } catch (InterruptedException ie) {\n-            ie.printStackTrace();\n-        }\n-        \n-        queue.clear();\n-        pool.shutdown();\n-    }\n-    \n-}"}, {"sha": "81933732238442a30edcfa6c004804c4563481b2", "filename": "src/net/server/world/announcer/MapleAnnouncerEntryPool.java", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/ronancpl/HeavenMS/blob/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973/src/net/server/world/announcer/MapleAnnouncerEntryPool.java", "raw_url": "https://github.com/ronancpl/HeavenMS/raw/efbce82a8b415d7ad7dde16aa8c540ae2a9a9973/src/net/server/world/announcer/MapleAnnouncerEntryPool.java", "contents_url": "https://api.github.com/repos/ronancpl/HeavenMS/contents/src/net/server/world/announcer/MapleAnnouncerEntryPool.java?ref=efbce82a8b415d7ad7dde16aa8c540ae2a9a9973", "patch": "@@ -1,74 +0,0 @@\n-/*\n-    This file is part of the HeavenMS MapleStory Server\n-    Copyleft (L) 2016 - 2019 RonanLana\n-\n-    This program is free software: you can redistribute it and/or modify\n-    it under the terms of the GNU Affero General Public License as\n-    published by the Free Software Foundation version 3 as published by\n-    the Free Software Foundation. You may not use, modify or distribute\n-    this program under any other version of the GNU Affero General Public\n-    License.\n-\n-    This program is distributed in the hope that it will be useful,\n-    but WITHOUT ANY WARRANTY; without even the implied warranty of\n-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-    GNU Affero General Public License for more details.\n-\n-    You should have received a copy of the GNU Affero General Public License\n-    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-*/\n-package net.server.world.announcer;\n-\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import org.apache.mina.core.session.IoSession;\n-\n-/**\n- *\n- * @author Ronan\n- */\n-public class MapleAnnouncerEntryPool {\n-    \n-    private ConcurrentLinkedQueue<SessionPacket> instancedPairs = new ConcurrentLinkedQueue<>();\n-    private final static int initialCount = 20000;     // initial length of the instanced pool\n-    \n-    public MapleAnnouncerEntryPool() {\n-        for (int i = 0; i < initialCount; i++) {\n-            instancedPairs.offer(new SessionPacket());\n-        }\n-    }\n-    \n-    public class SessionPacket {\n-        \n-        private IoSession session;\n-        private byte[] packet;\n-        \n-        public IoSession getSession() {\n-            return session;\n-        }\n-        \n-        public byte[] getPacket() {\n-            return packet;\n-        }\n-        \n-    }\n-    \n-    public SessionPacket getSessionPacket(IoSession session, byte[] packet) {\n-        SessionPacket sp = instancedPairs.poll();\n-        if (sp == null) {\n-            sp = new SessionPacket();\n-        }\n-        \n-        sp.session = session;\n-        sp.packet = packet;\n-        return sp;\n-    }\n-    \n-    public void returnSessionPacket(SessionPacket sp) {\n-        instancedPairs.offer(sp);\n-    }\n-    \n-    public void shutdown() {\n-        instancedPairs.clear();\n-    }\n-    \n-}"}]}]},
