{"fetchDate": "2019-12-20", "content": {"events": [{"id": "11128383354", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359992995", "pull_request_review_id": 334807729, "id": 359992995, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTk5Mjk5NQ==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1132, "original_position": 1132, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Thank you kind sir!", "created_at": "2019-12-19T18:00:04Z", "updated_at": "2019-12-19T18:00:05Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359992995", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359992995"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359992995"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}, "in_reply_to_id": 359824818}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T18:00:05Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T15:49:39Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 19, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 19, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T18:00:04Z"}, {"id": "11128377772", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359992652", "pull_request_review_id": 334807281, "id": 359992652, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTk5MjY1Mg==", "diff_hunk": "@@ -54,7 +54,7 @@ namespace ms\n \tclass ChangeKeyMapPacket : public OutPacket\n \t{\n \tpublic:\n-\t\tChangeKeyMapPacket(std::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions) : OutPacket(OutPacket::Opcode::CHANGE_KEYMAP)", "path": "Net/Packets/PlayerPackets.h", "position": 4, "original_position": 4, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I see. That makes a lot of sense.", "created_at": "2019-12-19T17:59:16Z", "updated_at": "2019-12-19T17:59:16Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359992652", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359992652"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359992652"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}, "in_reply_to_id": 359816754}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T17:59:16Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T15:49:39Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 19, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 19, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T17:59:16Z"}, {"id": "11125663541", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/21", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/21/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/21/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/21", "id": 530617904, "node_id": "MDU6SXNzdWU1MzA2MTc5MDQ=", "number": 21, "title": "Player does not die after reaching 0 HP.", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-11-30T19:03:32Z", "updated_at": "2019-12-19T12:32:42Z", "closed_at": null, "author_association": "COLLABORATOR", "body": "Title pretty much says it all. This leads to some additional strange behaviors. Notably, if a player dies, and they walk through a portal, the portal takes them to the nearest town instead of its coded destination. Presumably, this is because the player *would* have been taken to the nearest town on death, but is a very jarring behavior when debugging other issues.\r\n\r\n**Repro Steps**:\r\n\r\n1. Enter a map with mobs\r\n1. Stand in mobs until hp reaches 0\r\n1. Character will remain at 0 hp and not become a ghost.\r\n\r\n**Desired Behavior**:\r\n\r\nPlayer will be transformed into a ghost with a dialogue option to respawn. NOTE: We need to double check exactly how this functions on GMS. Take any relevant screenshots to mirror behavior."}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/567471328", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/21#issuecomment-567471328", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/21", "id": 567471328, "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzQ3MTMyOA==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-12-19T12:32:41Z", "updated_at": "2019-12-19T12:32:41Z", "author_association": "OWNER", "body": "If anyone else wants to take this I'm going to look at other things for now."}}, "public": true, "created_at": "2019-12-19T12:32:42Z"}, {"id": "11125633061", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830090", "pull_request_review_id": 334574666, "id": 359830090, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMDA5MA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2024, "original_position": 2024, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "This should be `KeyType::Id::SKILL`", "created_at": "2019-12-19T12:13:16Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830090", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830090"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830090"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:13:16Z"}, {"id": "11125633069", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830650", "pull_request_review_id": 334574666, "id": 359830650, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMDY1MA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2056, "original_position": 2056, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "If we are going to stick with consistency like @nansonzheng pointed out in line 933 this should be:\r\n`for (auto key : maplekeys)`", "created_at": "2019-12-19T12:14:53Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830650", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830650"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830650"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:14:53Z"}, {"id": "11125633067", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359829342", "pull_request_review_id": 334574666, "id": 359829342, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyOTM0Mg==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1912, "original_position": 1912, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "To me this kinda looks weird. If it has to be this way, no problem, but wouldn't this be better if it were:\r\n\r\n```\r\nif (prior_staged == mapping)\r\n    return;\r\n\r\nunstage_mapping(prior_staged);\r\n```", "created_at": "2019-12-19T12:11:11Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359829342", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359829342"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359829342"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:11:11Z"}, {"id": "11125633059", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833634", "pull_request_review_id": 334574666, "id": 359833634, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMzYzNA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1973, "original_position": 1973, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`KeyType::Id::SKILL`", "created_at": "2019-12-19T12:23:11Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833634", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833634"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833634"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:23:11Z"}, {"id": "11125633055", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359832162", "pull_request_review_id": 334574666, "id": 359832162, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMjE2Mg==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2189, "original_position": 2189, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Can we move the `{` down to a newline?", "created_at": "2019-12-19T12:19:05Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359832162", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359832162"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359832162"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:19:05Z"}, {"id": "11125633056", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359832191", "pull_request_review_id": 334574666, "id": 359832191, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMjE5MQ==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2194, "original_position": 2194, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Can we move the `{` down to a newline?", "created_at": "2019-12-19T12:19:11Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359832191", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359832191"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359832191"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:19:11Z"}, {"id": "11125633054", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833514", "pull_request_review_id": 334574666, "id": 359833514, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMzUxNA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1619, "original_position": 1619, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`KeyType::Id::SKILL`", "created_at": "2019-12-19T12:22:52Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833514", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833514"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833514"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:22:52Z"}, {"id": "11125633063", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833791", "pull_request_review_id": 334574666, "id": 359833791, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMzc5MQ==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2195, "original_position": 2195, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`KeyType::Id::SKILL`", "created_at": "2019-12-19T12:23:40Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833791", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833791"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833791"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:23:40Z"}, {"id": "11125633058", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833576", "pull_request_review_id": 334574666, "id": 359833576, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMzU3Ng==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1813, "original_position": 1813, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`KeyType::Id::SKILL`", "created_at": "2019-12-19T12:23:03Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833576", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359833576"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359833576"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:23:03Z"}, {"id": "11125633050", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359824818", "pull_request_review_id": 334574666, "id": 359824818, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyNDgxOA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1132, "original_position": 1132, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "This actually looks like a previous issue of mine but sticking to consistency, Nino and I have been placing equal folder depth includes in there own lines, for example, this would end up looking like this with all include you have:\r\n\r\n```\r\n#include \"UIKeyConfig.h\"\r\n\r\n#include \"../UI.h\"\r\n#include \"../Console.h\"\r\n\r\n#include \"../Components/MapleButton.h\"\r\n#include \"../Data/SkillData.h\"\r\n#include \"../UITypes/UINotice.h\"\r\n#include \"../UITypes/UILoginNotice.h\"\r\n\r\n#include \"../Net/Packets/PlayerPackets.h\"\r\n\r\n#include <nlnx/nx.hpp>\r\n```\r\n\r\nNot a huge deal \ud83d\ude04 ", "created_at": "2019-12-19T11:58:52Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359824818", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359824818"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359824818"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:58:52Z"}, {"id": "11125633057", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359831334", "pull_request_review_id": 334574666, "id": 359831334, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMTMzNA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2079, "original_position": 2079, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`for (auto action : updated_actions)`", "created_at": "2019-12-19T12:16:49Z", "updated_at": "2019-12-19T12:28:21Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359831334", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359831334"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359831334"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:16:49Z"}, {"id": "11125633049", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830974", "pull_request_review_id": 334574666, "id": 359830974, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgzMDk3NA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 2061, "original_position": 2061, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "`for (auto tkey : staged_mappings)`\r\nThis seems very nitpicky lmao", "created_at": "2019-12-19T12:15:46Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830974", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359830974"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359830974"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T12:15:46Z"}, {"id": "11125633037", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359823117", "pull_request_review_id": 334574666, "id": 359823117, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyMzExNw==", "diff_hunk": "@@ -1,205 +1,307 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#pragma once\n-\n-#include \"../UIDragElement.h\"\n-#include \"../KeyAction.h\"\n-#include \"../KeyConfig.h\"\n-#include \"../Keyboard.h\"\n-\n-#include \"../Template/EnumMap.h\"\n-\n-namespace ms\n-{\n-\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\n-\t{\n-\tpublic:\n-\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\n-\t\tstatic constexpr bool FOCUSED = false;\n-\t\tstatic constexpr bool TOGGLED = true;\n-\n-\t\tUIKeyConfig();\n-\n-\t\tvoid draw(float inter) const override;\n-\t\tvoid update() override;\n-\n-\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\n-\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\n-\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\n-\n-\t\tvoid remove_key(KeyAction::Id action);\n-\t\tvoid add_key(Point<int16_t> cursorposition, KeyAction::Id action);\r\n-\n-\t\tvoid close();\n-\n-\tprotected:\n-\t\tButton::State button_pressed(uint16_t buttonid) override;\n-\n-\tprivate:\n-\t\tvoid load_keys_pos();\n-\t\tvoid load_icons_pos();\n-\t\tvoid load_keys();\n-\t\tvoid load_icons();\n-\t\tvoid map_keys();\n-\t\tvoid clear();\n-\t\tvoid reset();\n-\t\tvoid save_keys();\n-\t\tvoid safe_close();\n-\n-\t\tKeyAction::Id icon_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key key_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key all_keys_by_position(Point<int16_t> position) const;\n-\t\tint32_t get_tempkey(KeyAction::Id action) const;\n-\t\tKeyboard::Mapping get_tempkey_mapping(int32_t keycode) const;\n-\t\tKeyType::Id get_keytype(KeyAction::Id action) const;\n-\n-\t\tenum Buttons : uint16_t\n-\t\t{\n-\t\t\tCLOSE,\n-\t\t\tCANCEL,\n-\t\t\tDEFAULT,\n-\t\t\tDELETE,\n-\t\t\tKEYSETTING,\n-\t\t\tOK\n-\t\t};\n-\n-\t\tbool dirty;\n-\n-\t\tclass KeyIcon : public Icon::Type\n-\t\t{\n-\t\tpublic:\n-\t\t\tKeyIcon(KeyAction::Id keyId);\n-\n-\t\t\tvoid drop_on_stage() const override {}\n-\t\t\tvoid drop_on_equips(Equipslot::Id) const override {}\n-\t\t\tbool drop_on_items(InventoryType::Id, Equipslot::Id, int16_t, bool) const override { return true; }\n-\t\t\tvoid drop_on_bindings(Point<int16_t> cursorposition, bool remove) const override;\n-\t\t\tvoid set_count(int16_t) override {}\n-\n-\t\tprivate:\n-\t\t\tKeyAction::Id source;\n-\t\t};\n-\n-\t\tnl::node icon;\n-\t\tEnumMap<KeyAction::Id, std::unique_ptr<Icon>> icons;\n-\t\tEnumMap<KeyAction::Id, Point<int16_t>> icons_pos;\n-\n-\t\tnl::node key;\n-\t\tEnumMap<KeyConfig::Key, Texture> keys;\n-\t\tEnumMap<KeyConfig::Key, Point<int16_t>> keys_pos;\n-\n-\t\tKeyboard* keyboard = nullptr;\n-\t\tstd::vector<KeyAction::Id> found_actions;\n-\t\tstd::map<int32_t, Keyboard::Mapping> tempkeys;\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> alternate_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::INSERT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::HOME, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::PAGE_UP, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::DELETE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::END, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::J, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::N, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::PERIOD, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> basic_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::NUM1, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::NUM2, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::NUM3, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::NUM4, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::NUM5, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::Q, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::W, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::E, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::R, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUIDE) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::O, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ENHANCEEQUIP) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::S, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAPLECHAT) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\t};\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#pragma once\r\n+\r\n+#include \"../UIDragElement.h\"\r\n+#include \"../KeyAction.h\"\r\n+#include \"../KeyConfig.h\"\r\n+#include \"../Keyboard.h\"\r\n+#include \"../KeyType.h\"\r\n+\r\n+#include \"../Template/EnumMap.h\"\r\n+\r\n+namespace ms\r\n+{\r\n+\t// TODO: reorganize functions based on ordering in .cpp file\r\n+\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\r\n+\t{\r\n+\tpublic:\r\n+\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\r\n+\t\tstatic constexpr bool FOCUSED = false;\r\n+\t\tstatic constexpr bool TOGGLED = true;\r\n+\r\n+\t\tUIKeyConfig();\r\n+\r\n+\t\tvoid draw(float inter) const override;\r\n+\t\tvoid update() override;\r\n+\r\n+\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\r\n+\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\r\n+\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\r\n+\r\n+\t\tvoid close();\r\n+\r\n+\t\tvoid stage_mapping(Point<int16_t> cursorposition, Keyboard::Mapping);\r\n+\t\tvoid unstage_mapping(Keyboard::Mapping);\r\n+\r\n+\tprotected:\r\n+\t\tButton::State button_pressed(uint16_t buttonid) override;\r\n+\r\n+\tprivate:\r\n+\t\tvoid load_keys_pos();\r\n+\t\tvoid load_unbound_actions_pos();\r\n+\t\tvoid load_key_textures();\r\n+\t\tvoid load_action_mappings();\r\n+\t\tvoid load_action_icons();\r\n+\t\tvoid load_skill_icons();\r\n+\r\n+\t\tvoid safe_close();\r\n+\r\n+\t\tvoid save_staged_mappings();\r\n+\t\tvoid bind_staged_action_keys();\r\n+\t\tvoid clear();\r\n+\t\tvoid reset();\r\n+\r\n+\t\tTexture get_skill_texture(int32_t skill_id) const;\r\n+\t\tKeyConfig::Key key_by_position(Point<int16_t> position) const;\r\n+\t\tKeyAction::Id unbound_action_by_position(Point<int16_t> position) const;\r\n+\t\tKeyboard::Mapping get_staged_mapping(int32_t keycode) const;\r\n+\t\tbool UIKeyConfig::is_action_mapping(Keyboard::Mapping mapping) const;\r\n+\r\n+\t\tstatic KeyType::Id get_keytype(KeyAction::Id action)\r\n+\t\t{\r\n+\t\t\tswitch (action)\r\n+\t\t\t{\r\n+\t\t\tcase KeyAction::Id::EQUIPMENT:\r\n+\t\t\tcase KeyAction::Id::ITEMS:\r\n+\t\t\tcase KeyAction::Id::STATS:\r\n+\t\t\tcase KeyAction::Id::SKILLS:\r\n+\t\t\tcase KeyAction::Id::FRIENDS:\r\n+\t\t\tcase KeyAction::Id::WORLDMAP:\r\n+\t\t\tcase KeyAction::Id::MAPLECHAT:\r\n+\t\t\tcase KeyAction::Id::MINIMAP:\r\n+\t\t\tcase KeyAction::Id::QUESTLOG:\r\n+\t\t\tcase KeyAction::Id::KEYBINDINGS:\r\n+\t\t\tcase KeyAction::Id::TOGGLECHAT:\r\n+\t\t\tcase KeyAction::Id::WHISPER:\r\n+\t\t\tcase KeyAction::Id::SAY:\r\n+\t\t\tcase KeyAction::Id::PARTYCHAT:\r\n+\t\t\tcase KeyAction::Id::MENU:\r\n+\t\t\tcase KeyAction::Id::QUICKSLOTS:\r\n+\t\t\tcase KeyAction::Id::GUILD:\r\n+\t\t\tcase KeyAction::Id::FRIENDSCHAT:\r\n+\t\t\tcase KeyAction::Id::PARTY:\r\n+\t\t\tcase KeyAction::Id::NOTIFIER:\r\n+\t\t\tcase KeyAction::Id::CASHSHOP:\r\n+\t\t\tcase KeyAction::Id::GUILDCHAT:\r\n+\t\t\tcase KeyAction::Id::MEDALS:\r\n+\t\t\tcase KeyAction::Id::BITS:\r\n+\t\t\tcase KeyAction::Id::ALLIANCECHAT:\r\n+\t\t\tcase KeyAction::Id::MAPLENEWS:\r\n+\t\t\tcase KeyAction::Id::MANAGELEGION:\r\n+\t\t\tcase KeyAction::Id::PROFESSION:\r\n+\t\t\tcase KeyAction::Id::BOSSPARTY:\r\n+\t\t\tcase KeyAction::Id::ITEMPOT:\r\n+\t\t\tcase KeyAction::Id::EVENT:\r\n+\t\t\tcase KeyAction::Id::SILENTCRUSADE:\r\n+\t\t\tcase KeyAction::Id::BATTLEANALYSIS:\r\n+\t\t\tcase KeyAction::Id::GUIDE:\r\n+\t\t\tcase KeyAction::Id::VIEWERSCHAT:\r\n+\t\t\tcase KeyAction::Id::ENHANCEEQUIP:\r\n+\t\t\tcase KeyAction::Id::MONSTERCOLLECTION:\r\n+\t\t\tcase KeyAction::Id::SOULWEAPON:\r\n+\t\t\tcase KeyAction::Id::CHARINFO:\r\n+\t\t\tcase KeyAction::Id::CHANGECHANNEL:\r\n+\t\t\tcase KeyAction::Id::MAINMENU:\r\n+\t\t\tcase KeyAction::Id::SCREENSHOT:\r\n+\t\t\tcase KeyAction::Id::PICTUREMODE:\r\n+\t\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\r\n+\t\t\t\treturn KeyType::Id::MENU;\r\n+\t\t\tcase KeyAction::Id::PICKUP:\r\n+\t\t\tcase KeyAction::Id::SIT:\r\n+\t\t\tcase KeyAction::Id::ATTACK:\r\n+\t\t\tcase KeyAction::Id::JUMP:\r\n+\t\t\t\treturn KeyType::Id::ACTION;\r\n+\t\t\tcase KeyAction::Id::INTERACT_HARVEST:\r\n+\t\t\tcase KeyAction::Id::MAPLESTORAGE:\r\n+\t\t\tcase KeyAction::Id::SAFEMODE:\r\n+\t\t\tcase KeyAction::Id::MUTE:\r\n+\t\t\tcase KeyAction::Id::MONSTERBOOK:\r\n+\t\t\tcase KeyAction::Id::TOSPOUSE:\r\n+\t\t\t\treturn KeyType::Id::MENU;\r\n+\t\t\tcase KeyAction::Id::FACE1:\r\n+\t\t\tcase KeyAction::Id::FACE2:\r\n+\t\t\tcase KeyAction::Id::FACE3:\r\n+\t\t\tcase KeyAction::Id::FACE4:\r\n+\t\t\tcase KeyAction::Id::FACE5:\r\n+\t\t\tcase KeyAction::Id::FACE6:\r\n+\t\t\tcase KeyAction::Id::FACE7:\r\n+\t\t\t\treturn KeyType::Id::FACE;\r\n+\t\t\tcase KeyAction::Id::LEFT:\r\n+\t\t\tcase KeyAction::Id::RIGHT:\r\n+\t\t\tcase KeyAction::Id::UP:\r\n+\t\t\tcase KeyAction::Id::DOWN:\r\n+\t\t\tcase KeyAction::Id::BACK:\r\n+\t\t\tcase KeyAction::Id::TAB:\r\n+\t\t\tcase KeyAction::Id::RETURN:\r\n+\t\t\tcase KeyAction::Id::ESCAPE:\r\n+\t\t\tcase KeyAction::Id::SPACE:\r\n+\t\t\tcase KeyAction::Id::DELETE:\r\n+\t\t\tcase KeyAction::Id::HOME:\r\n+\t\t\tcase KeyAction::Id::END:\r\n+\t\t\tcase KeyAction::Id::COPY:\r\n+\t\t\tcase KeyAction::Id::PASTE:\r\n+\t\t\tcase KeyAction::Id::LENGTH:\r\n+\t\t\tdefault:\r\n+\t\t\t\treturn KeyType::Id::NONE;\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tenum Buttons : uint16_t\r\n+\t\t{\r\n+\t\t\tCLOSE,\r\n+\t\t\tCANCEL,\r\n+\t\t\tDEFAULT,\r\n+\t\t\tDELETE,\r\n+\t\t\tKEYSETTING,\r\n+\t\t\tOK\r\n+\t\t};\r\n+\r\n+\t\tclass MappingIcon : public Icon::Type\r\n+\t\t{\r\n+\t\tpublic:\r\n+\t\t\tMappingIcon(Keyboard::Mapping);\r\n+\t\t\tMappingIcon(KeyAction::Id keyId);\r\n+\r\n+\t\t\tvoid drop_on_stage() const override;\r\n+\t\t\tvoid drop_on_equips(Equipslot::Id) const override {}\r", "path": "IO/UITypes/UIKeyConfig.h", "position": 388, "original_position": 388, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Parameter names here too, if there is a good reason to exclude these that's fine just making sure.", "created_at": "2019-12-19T11:54:20Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359823117", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359823117"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359823117"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:54:20Z"}, {"id": "11125633029", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359822694", "pull_request_review_id": 334574666, "id": 359822694, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyMjY5NA==", "diff_hunk": "@@ -1,205 +1,307 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#pragma once\n-\n-#include \"../UIDragElement.h\"\n-#include \"../KeyAction.h\"\n-#include \"../KeyConfig.h\"\n-#include \"../Keyboard.h\"\n-\n-#include \"../Template/EnumMap.h\"\n-\n-namespace ms\n-{\n-\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\n-\t{\n-\tpublic:\n-\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\n-\t\tstatic constexpr bool FOCUSED = false;\n-\t\tstatic constexpr bool TOGGLED = true;\n-\n-\t\tUIKeyConfig();\n-\n-\t\tvoid draw(float inter) const override;\n-\t\tvoid update() override;\n-\n-\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\n-\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\n-\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\n-\n-\t\tvoid remove_key(KeyAction::Id action);\n-\t\tvoid add_key(Point<int16_t> cursorposition, KeyAction::Id action);\r\n-\n-\t\tvoid close();\n-\n-\tprotected:\n-\t\tButton::State button_pressed(uint16_t buttonid) override;\n-\n-\tprivate:\n-\t\tvoid load_keys_pos();\n-\t\tvoid load_icons_pos();\n-\t\tvoid load_keys();\n-\t\tvoid load_icons();\n-\t\tvoid map_keys();\n-\t\tvoid clear();\n-\t\tvoid reset();\n-\t\tvoid save_keys();\n-\t\tvoid safe_close();\n-\n-\t\tKeyAction::Id icon_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key key_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key all_keys_by_position(Point<int16_t> position) const;\n-\t\tint32_t get_tempkey(KeyAction::Id action) const;\n-\t\tKeyboard::Mapping get_tempkey_mapping(int32_t keycode) const;\n-\t\tKeyType::Id get_keytype(KeyAction::Id action) const;\n-\n-\t\tenum Buttons : uint16_t\n-\t\t{\n-\t\t\tCLOSE,\n-\t\t\tCANCEL,\n-\t\t\tDEFAULT,\n-\t\t\tDELETE,\n-\t\t\tKEYSETTING,\n-\t\t\tOK\n-\t\t};\n-\n-\t\tbool dirty;\n-\n-\t\tclass KeyIcon : public Icon::Type\n-\t\t{\n-\t\tpublic:\n-\t\t\tKeyIcon(KeyAction::Id keyId);\n-\n-\t\t\tvoid drop_on_stage() const override {}\n-\t\t\tvoid drop_on_equips(Equipslot::Id) const override {}\n-\t\t\tbool drop_on_items(InventoryType::Id, Equipslot::Id, int16_t, bool) const override { return true; }\n-\t\t\tvoid drop_on_bindings(Point<int16_t> cursorposition, bool remove) const override;\n-\t\t\tvoid set_count(int16_t) override {}\n-\n-\t\tprivate:\n-\t\t\tKeyAction::Id source;\n-\t\t};\n-\n-\t\tnl::node icon;\n-\t\tEnumMap<KeyAction::Id, std::unique_ptr<Icon>> icons;\n-\t\tEnumMap<KeyAction::Id, Point<int16_t>> icons_pos;\n-\n-\t\tnl::node key;\n-\t\tEnumMap<KeyConfig::Key, Texture> keys;\n-\t\tEnumMap<KeyConfig::Key, Point<int16_t>> keys_pos;\n-\n-\t\tKeyboard* keyboard = nullptr;\n-\t\tstd::vector<KeyAction::Id> found_actions;\n-\t\tstd::map<int32_t, Keyboard::Mapping> tempkeys;\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> alternate_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::INSERT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::HOME, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::PAGE_UP, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::DELETE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::END, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::J, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::N, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::PERIOD, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> basic_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::NUM1, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::NUM2, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::NUM3, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::NUM4, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::NUM5, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::Q, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::W, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::E, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::R, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUIDE) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::O, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ENHANCEEQUIP) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::S, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAPLECHAT) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\t};\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#pragma once\r\n+\r\n+#include \"../UIDragElement.h\"\r\n+#include \"../KeyAction.h\"\r\n+#include \"../KeyConfig.h\"\r\n+#include \"../Keyboard.h\"\r\n+#include \"../KeyType.h\"\r\n+\r\n+#include \"../Template/EnumMap.h\"\r\n+\r\n+namespace ms\r\n+{\r\n+\t// TODO: reorganize functions based on ordering in .cpp file\r\n+\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\r\n+\t{\r\n+\tpublic:\r\n+\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\r\n+\t\tstatic constexpr bool FOCUSED = false;\r\n+\t\tstatic constexpr bool TOGGLED = true;\r\n+\r\n+\t\tUIKeyConfig();\r\n+\r\n+\t\tvoid draw(float inter) const override;\r\n+\t\tvoid update() override;\r\n+\r\n+\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\r\n+\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\r\n+\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\r\n+\r\n+\t\tvoid close();\r\n+\r\n+\t\tvoid stage_mapping(Point<int16_t> cursorposition, Keyboard::Mapping);\r\n+\t\tvoid unstage_mapping(Keyboard::Mapping);\r\n+\r\n+\tprotected:\r\n+\t\tButton::State button_pressed(uint16_t buttonid) override;\r\n+\r\n+\tprivate:\r\n+\t\tvoid load_keys_pos();\r\n+\t\tvoid load_unbound_actions_pos();\r\n+\t\tvoid load_key_textures();\r\n+\t\tvoid load_action_mappings();\r\n+\t\tvoid load_action_icons();\r\n+\t\tvoid load_skill_icons();\r\n+\r\n+\t\tvoid safe_close();\r\n+\r\n+\t\tvoid save_staged_mappings();\r\n+\t\tvoid bind_staged_action_keys();\r\n+\t\tvoid clear();\r\n+\t\tvoid reset();\r\n+\r\n+\t\tTexture get_skill_texture(int32_t skill_id) const;\r\n+\t\tKeyConfig::Key key_by_position(Point<int16_t> position) const;\r\n+\t\tKeyAction::Id unbound_action_by_position(Point<int16_t> position) const;\r\n+\t\tKeyboard::Mapping get_staged_mapping(int32_t keycode) const;\r\n+\t\tbool UIKeyConfig::is_action_mapping(Keyboard::Mapping mapping) const;\r\n+\r\n+\t\tstatic KeyType::Id get_keytype(KeyAction::Id action)\r", "path": "IO/UITypes/UIKeyConfig.h", "position": 282, "original_position": 282, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "More curious than anything, should this be in the header file instead of the cpp file?", "created_at": "2019-12-19T11:53:06Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359822694", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359822694"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359822694"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:53:06Z"}, {"id": "11125633022", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359822165", "pull_request_review_id": 334574666, "id": 359822165, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyMjE2NQ==", "diff_hunk": "@@ -1,205 +1,307 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#pragma once\n-\n-#include \"../UIDragElement.h\"\n-#include \"../KeyAction.h\"\n-#include \"../KeyConfig.h\"\n-#include \"../Keyboard.h\"\n-\n-#include \"../Template/EnumMap.h\"\n-\n-namespace ms\n-{\n-\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\n-\t{\n-\tpublic:\n-\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\n-\t\tstatic constexpr bool FOCUSED = false;\n-\t\tstatic constexpr bool TOGGLED = true;\n-\n-\t\tUIKeyConfig();\n-\n-\t\tvoid draw(float inter) const override;\n-\t\tvoid update() override;\n-\n-\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\n-\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\n-\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\n-\n-\t\tvoid remove_key(KeyAction::Id action);\n-\t\tvoid add_key(Point<int16_t> cursorposition, KeyAction::Id action);\r\n-\n-\t\tvoid close();\n-\n-\tprotected:\n-\t\tButton::State button_pressed(uint16_t buttonid) override;\n-\n-\tprivate:\n-\t\tvoid load_keys_pos();\n-\t\tvoid load_icons_pos();\n-\t\tvoid load_keys();\n-\t\tvoid load_icons();\n-\t\tvoid map_keys();\n-\t\tvoid clear();\n-\t\tvoid reset();\n-\t\tvoid save_keys();\n-\t\tvoid safe_close();\n-\n-\t\tKeyAction::Id icon_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key key_by_position(Point<int16_t> position) const;\n-\t\tKeyConfig::Key all_keys_by_position(Point<int16_t> position) const;\n-\t\tint32_t get_tempkey(KeyAction::Id action) const;\n-\t\tKeyboard::Mapping get_tempkey_mapping(int32_t keycode) const;\n-\t\tKeyType::Id get_keytype(KeyAction::Id action) const;\n-\n-\t\tenum Buttons : uint16_t\n-\t\t{\n-\t\t\tCLOSE,\n-\t\t\tCANCEL,\n-\t\t\tDEFAULT,\n-\t\t\tDELETE,\n-\t\t\tKEYSETTING,\n-\t\t\tOK\n-\t\t};\n-\n-\t\tbool dirty;\n-\n-\t\tclass KeyIcon : public Icon::Type\n-\t\t{\n-\t\tpublic:\n-\t\t\tKeyIcon(KeyAction::Id keyId);\n-\n-\t\t\tvoid drop_on_stage() const override {}\n-\t\t\tvoid drop_on_equips(Equipslot::Id) const override {}\n-\t\t\tbool drop_on_items(InventoryType::Id, Equipslot::Id, int16_t, bool) const override { return true; }\n-\t\t\tvoid drop_on_bindings(Point<int16_t> cursorposition, bool remove) const override;\n-\t\t\tvoid set_count(int16_t) override {}\n-\n-\t\tprivate:\n-\t\t\tKeyAction::Id source;\n-\t\t};\n-\n-\t\tnl::node icon;\n-\t\tEnumMap<KeyAction::Id, std::unique_ptr<Icon>> icons;\n-\t\tEnumMap<KeyAction::Id, Point<int16_t>> icons_pos;\n-\n-\t\tnl::node key;\n-\t\tEnumMap<KeyConfig::Key, Texture> keys;\n-\t\tEnumMap<KeyConfig::Key, Point<int16_t>> keys_pos;\n-\n-\t\tKeyboard* keyboard = nullptr;\n-\t\tstd::vector<KeyAction::Id> found_actions;\n-\t\tstd::map<int32_t, Keyboard::Mapping> tempkeys;\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> alternate_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::INSERT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::HOME, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::PAGE_UP, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::DELETE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::END, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::J, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::N, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::PERIOD, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\n-\t\tstd::map<int32_t, Keyboard::Mapping> basic_keys = {\n-\t\t   { KeyConfig::Key::ESCAPE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAINMENU) },\n-\t\t   { KeyConfig::Key::F1, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE1) },\n-\t\t   { KeyConfig::Key::F2, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE2) },\n-\t\t   { KeyConfig::Key::F3, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE3) },\n-\t\t   { KeyConfig::Key::F5, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE4) },\n-\t\t   { KeyConfig::Key::F6, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE5) },\n-\t\t   { KeyConfig::Key::F7, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE6) },\n-\t\t   { KeyConfig::Key::F8, Keyboard::Mapping(KeyType::Id::FACE, KeyAction::Id::FACE7) },\n-\t\t   { KeyConfig::Key::SCROLL_LOCK, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SCREENSHOT) },\n-\t\t   { KeyConfig::Key::GRAVE_ACCENT, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::CASHSHOP) },\n-\t\t   { KeyConfig::Key::NUM1, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SAY) },\n-\t\t   { KeyConfig::Key::NUM2, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTYCHAT) },\n-\t\t   { KeyConfig::Key::NUM3, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDSCHAT) },\n-\t\t   { KeyConfig::Key::NUM4, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILDCHAT) },\n-\t\t   { KeyConfig::Key::NUM5, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ALLIANCECHAT) },\n-\t\t   { KeyConfig::Key::Q, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUESTLOG) },\n-\t\t   { KeyConfig::Key::W, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WORLDMAP) },\n-\t\t   { KeyConfig::Key::E, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EQUIPMENT) },\n-\t\t   { KeyConfig::Key::R, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::FRIENDS) },\n-\t\t   { KeyConfig::Key::T, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::BOSSPARTY) },\n-\t\t   { KeyConfig::Key::Y, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMPOT) },\n-\t\t   { KeyConfig::Key::U, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUIDE) },\n-\t\t   { KeyConfig::Key::I, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ITEMS) },\n-\t\t   { KeyConfig::Key::O, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::ENHANCEEQUIP) },\n-\t\t   { KeyConfig::Key::P, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PARTY) },\n-\t\t   { KeyConfig::Key::LEFT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MENU) },\n-\t\t   { KeyConfig::Key::RIGHT_BRACKET, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::QUICKSLOTS) },\n-\t\t   { KeyConfig::Key::BACKSLASH, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::KEYBINDINGS) },\n-\t\t   { KeyConfig::Key::S, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::STATS) },\n-\t\t   { KeyConfig::Key::G, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::GUILD) },\n-\t\t   { KeyConfig::Key::H, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::WHISPER) },\n-\t\t   { KeyConfig::Key::K, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::SKILLS) },\n-\t\t   { KeyConfig::Key::L, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::NOTIFIER) },\n-\t\t   { KeyConfig::Key::SEMICOLON, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MEDALS) },\n-\t\t   { KeyConfig::Key::APOSTROPHE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::TOGGLECHAT) },\n-\t\t   { KeyConfig::Key::Z, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::PICKUP) },\n-\t\t   { KeyConfig::Key::X, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::SIT) },\n-\t\t   { KeyConfig::Key::C, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MAPLECHAT) },\n-\t\t   { KeyConfig::Key::V, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::EVENT) },\n-\t\t   { KeyConfig::Key::B, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::PROFESSION) },\n-\t\t   { KeyConfig::Key::M, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::MINIMAP) },\n-\t\t   { KeyConfig::Key::LEFT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) },\n-\t\t   { KeyConfig::Key::LEFT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::SPACE, Keyboard::Mapping(KeyType::Id::MENU, KeyAction::Id::INTERACT_HARVEST) },\n-\t\t   { KeyConfig::Key::RIGHT_ALT, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::JUMP) },\n-\t\t   { KeyConfig::Key::RIGHT_CONTROL, Keyboard::Mapping(KeyType::Id::ACTION, KeyAction::Id::ATTACK) }\n-\t\t};\n-\t};\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#pragma once\r\n+\r\n+#include \"../UIDragElement.h\"\r\n+#include \"../KeyAction.h\"\r\n+#include \"../KeyConfig.h\"\r\n+#include \"../Keyboard.h\"\r\n+#include \"../KeyType.h\"\r\n+\r\n+#include \"../Template/EnumMap.h\"\r\n+\r\n+namespace ms\r\n+{\r\n+\t// TODO: reorganize functions based on ordering in .cpp file\r\n+\tclass UIKeyConfig : public UIDragElement<PosKEYCONFIG>\r\n+\t{\r\n+\tpublic:\r\n+\t\tstatic constexpr Type TYPE = UIElement::Type::KEYCONFIG;\r\n+\t\tstatic constexpr bool FOCUSED = false;\r\n+\t\tstatic constexpr bool TOGGLED = true;\r\n+\r\n+\t\tUIKeyConfig();\r\n+\r\n+\t\tvoid draw(float inter) const override;\r\n+\t\tvoid update() override;\r\n+\r\n+\t\tCursor::State send_cursor(bool clicked, Point<int16_t> cursorpos) override;\r\n+\t\tbool send_icon(const Icon& icon, Point<int16_t> cursorpos) override;\r\n+\t\tvoid send_key(int32_t keycode, bool pressed, bool escape) override;\r\n+\r\n+\t\tvoid close();\r\n+\r\n+\t\tvoid stage_mapping(Point<int16_t> cursorposition, Keyboard::Mapping);\r\n+\t\tvoid unstage_mapping(Keyboard::Mapping);\r", "path": "IO/UITypes/UIKeyConfig.h", "position": 256, "original_position": 256, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I'm assuming you are using these, can we add in parameter names?", "created_at": "2019-12-19T11:51:40Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359822165", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359822165"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359822165"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:51:40Z"}, {"id": "11125633019", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359816754", "pull_request_review_id": 334574666, "id": 359816754, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgxNjc1NA==", "diff_hunk": "@@ -54,7 +54,7 @@ namespace ms\n \tclass ChangeKeyMapPacket : public OutPacket\n \t{\n \tpublic:\n-\t\tChangeKeyMapPacket(std::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions) : OutPacket(OutPacket::Opcode::CHANGE_KEYMAP)", "path": "Net/Packets/PlayerPackets.h", "position": 4, "original_position": 4, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Are you not using KeyAction::Id anymore?", "created_at": "2019-12-19T11:36:17Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359816754", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359816754"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359816754"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:36:17Z"}, {"id": "11125633012", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359820481", "pull_request_review_id": 334574666, "id": 359820481, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyMDQ4MQ==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1136, "original_position": 1136, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I believe this can just be `#include \"../Console.h\"`", "created_at": "2019-12-19T11:46:44Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359820481", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359820481"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359820481"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:46:44Z"}, {"id": "11125633013", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359821059", "pull_request_review_id": 334574666, "id": 359821059, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTgyMTA1OQ==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1639, "original_position": 1639, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Can we add brackets around `if (action)` and `for (auto const& it : action_icons)`?", "created_at": "2019-12-19T11:48:26Z", "updated_at": "2019-12-19T12:28:20Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359821059", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359821059"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359821059"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T12:28:20Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T11:48:26Z"}, {"id": "11124668643", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359785518", "pull_request_review_id": 334533791, "id": 359785518, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTc4NTUxOA==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r\n+\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\r\n+\r\n+\t\tsprites.emplace_back(backgrnd);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\r\n+\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\r\n+\r\n+\t\tnl::node BtClose3 = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\r\n+\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(BtClose3, Point<int16_t>(bg_dimensions.x() - 18, 3));\r\n+\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\r\n+\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\r\n+\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\r\n+\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\r\n+\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\r\n+\r\n+\t\tdimension = bg_dimensions;\r\n+\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\r\n+\r\n+\t\tload_keys_pos();\r\n+\t\tload_unbound_actions_pos();\r\n+\t\tload_key_textures();\r\n+\t\tload_action_mappings();\r\n+\t\tload_action_icons();\r\n+\t\tload_skill_icons();\r\n+\r\n+\t\tbind_staged_action_keys();\r\n+\t}\r\n+\r\n+\t// Load\r\n+\r\n+\tvoid UIKeyConfig::load_keys_pos()\r\n+\t{\r\n+\t\tint16_t slot_width = 33;\r\n+\t\tint16_t slot_width_lg = 98;\r\n+\t\tint16_t slot_height = 33;\r\n+\r\n+\t\tint16_t row_y = 126;\r\n+\t\tint16_t row_special_y = row_y - slot_height - 5;\r\n+\r\n+\t\tint16_t row_quickslot_x = 535;\r\n+\r\n+\t\tint16_t row_one_x = 31;\r\n+\t\tint16_t row_two_x = 80;\r\n+\t\tint16_t row_three_x = 96;\r\n+\t\tint16_t row_four_x = 55;\r\n+\t\tint16_t row_five_x = 39;\r\n+\r\n+\t\tint16_t row_special_x = row_one_x;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\r\n+\r\n+\t\trow_special_x += slot_width * 2;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\r\n+\r\n+\t\t\trow_special_x += slot_width;\r\n+\r\n+\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\r\n+\t\t\t\trow_special_x += 17;\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\r\n+\t\t}\r\n+\r\n+\t\trow_two_x += 9;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\r\n+\t\t}\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\r\n+\t\t{\r\n+\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\r\n+\r\n+\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\r\n+\t\t}\r\n+\r\n+\t\trow_four_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\r\n+\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 24;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 27;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\r\n+\r\n+\t\trow_five_x += 2;\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\r\n+\r\n+\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_unbound_actions_pos()\r\n+\t{\r\n+\t\tint16_t row_x = 26;\r\n+\t\tint16_t row_y = 307;\r\n+\r\n+\t\tint16_t slot_width = 36;\r\n+\t\tint16_t slot_height = 36;\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\r\n+\t\tunbound_actions_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\r\n+\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\r\n+\t\tunbound_actions_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\r\n+\t\t//unbound_actions_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_key_textures()\r\n+\t{\r\n+\t\tkey_textures[KeyConfig::Key::ESCAPE] = key[1];\r\n+\t\tkey_textures[KeyConfig::Key::NUM1] = key[2];\r\n+\t\tkey_textures[KeyConfig::Key::NUM2] = key[3];\r\n+\t\tkey_textures[KeyConfig::Key::NUM3] = key[4];\r\n+\t\tkey_textures[KeyConfig::Key::NUM4] = key[5];\r\n+\t\tkey_textures[KeyConfig::Key::NUM5] = key[6];\r\n+\t\tkey_textures[KeyConfig::Key::NUM6] = key[7];\r\n+\t\tkey_textures[KeyConfig::Key::NUM7] = key[8];\r\n+\t\tkey_textures[KeyConfig::Key::NUM8] = key[9];\r\n+\t\tkey_textures[KeyConfig::Key::NUM9] = key[10];\r\n+\t\tkey_textures[KeyConfig::Key::NUM0] = key[11];\r\n+\t\tkey_textures[KeyConfig::Key::MINUS] = key[12];\r\n+\t\tkey_textures[KeyConfig::Key::EQUAL] = key[13];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::Q] = key[16];\r\n+\t\tkey_textures[KeyConfig::Key::W] = key[17];\r\n+\t\tkey_textures[KeyConfig::Key::E] = key[18];\r\n+\t\tkey_textures[KeyConfig::Key::R] = key[19];\r\n+\t\tkey_textures[KeyConfig::Key::T] = key[20];\r\n+\t\tkey_textures[KeyConfig::Key::Y] = key[21];\r\n+\t\tkey_textures[KeyConfig::Key::U] = key[22];\r\n+\t\tkey_textures[KeyConfig::Key::I] = key[23];\r\n+\t\tkey_textures[KeyConfig::Key::O] = key[24];\r\n+\t\tkey_textures[KeyConfig::Key::P] = key[25];\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_BRACKET] = key[26];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_BRACKET] = key[27];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_CONTROL] = key[29];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_CONTROL] = key[29];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::A] = key[30];\r\n+\t\tkey_textures[KeyConfig::Key::S] = key[31];\r\n+\t\tkey_textures[KeyConfig::Key::D] = key[32];\r\n+\t\tkey_textures[KeyConfig::Key::F] = key[33];\r\n+\t\tkey_textures[KeyConfig::Key::G] = key[34];\r\n+\t\tkey_textures[KeyConfig::Key::H] = key[35];\r\n+\t\tkey_textures[KeyConfig::Key::J] = key[36];\r\n+\t\tkey_textures[KeyConfig::Key::K] = key[37];\r\n+\t\tkey_textures[KeyConfig::Key::L] = key[38];\r\n+\t\tkey_textures[KeyConfig::Key::SEMICOLON] = key[39];\r\n+\t\tkey_textures[KeyConfig::Key::APOSTROPHE] = key[40];\r\n+\t\tkey_textures[KeyConfig::Key::GRAVE_ACCENT] = key[41];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_SHIFT] = key[42];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_SHIFT] = key[42];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::BACKSLASH] = key[43];\r\n+\t\tkey_textures[KeyConfig::Key::Z] = key[44];\r\n+\t\tkey_textures[KeyConfig::Key::X] = key[45];\r\n+\t\tkey_textures[KeyConfig::Key::C] = key[46];\r\n+\t\tkey_textures[KeyConfig::Key::V] = key[47];\r\n+\t\tkey_textures[KeyConfig::Key::B] = key[48];\r\n+\t\tkey_textures[KeyConfig::Key::N] = key[49];\r\n+\t\tkey_textures[KeyConfig::Key::M] = key[50];\r\n+\t\tkey_textures[KeyConfig::Key::COMMA] = key[51];\r\n+\t\tkey_textures[KeyConfig::Key::PERIOD] = key[52];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::LEFT_ALT] = key[56];\r\n+\t\tkey_textures[KeyConfig::Key::RIGHT_ALT] = key[56];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SPACE] = key[57];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F1] = key[59];\r\n+\t\tkey_textures[KeyConfig::Key::F2] = key[60];\r\n+\t\tkey_textures[KeyConfig::Key::F3] = key[61];\r\n+\t\tkey_textures[KeyConfig::Key::F4] = key[62];\r\n+\t\tkey_textures[KeyConfig::Key::F5] = key[63];\r\n+\t\tkey_textures[KeyConfig::Key::F6] = key[64];\r\n+\t\tkey_textures[KeyConfig::Key::F7] = key[65];\r\n+\t\tkey_textures[KeyConfig::Key::F8] = key[66];\r\n+\t\tkey_textures[KeyConfig::Key::F9] = key[67];\r\n+\t\tkey_textures[KeyConfig::Key::F10] = key[68];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::SCROLL_LOCK] = key[70];\r\n+\t\tkey_textures[KeyConfig::Key::HOME] = key[71];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_UP] = key[73];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::END] = key[79];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::PAGE_DOWN] = key[81];\r\n+\t\tkey_textures[KeyConfig::Key::INSERT] = key[82];\r\n+\t\tkey_textures[KeyConfig::Key::DELETE] = key[83];\r\n+\r\n+\t\tkey_textures[KeyConfig::Key::F11] = key[87];\r\n+\t\tkey_textures[KeyConfig::Key::F12] = key[88];\r\n+\t}\r\n+\r\n+\tvoid UIKeyConfig::load_action_mappings()\r\n+\t{\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::EQUIPMENT), KeyAction::Id::EQUIPMENT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::ITEMS), KeyAction::Id::ITEMS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::STATS), KeyAction::Id::STATS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SKILLS), KeyAction::Id::SKILLS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDS), KeyAction::Id::FRIENDS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WORLDMAP), KeyAction::Id::WORLDMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MAPLECHAT), KeyAction::Id::MAPLECHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MINIMAP), KeyAction::Id::MINIMAP));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUESTLOG), KeyAction::Id::QUESTLOG));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::KEYBINDINGS), KeyAction::Id::KEYBINDINGS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::SAY), KeyAction::Id::SAY));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::WHISPER), KeyAction::Id::WHISPER));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::PARTYCHAT), KeyAction::Id::PARTYCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::FRIENDSCHAT), KeyAction::Id::FRIENDSCHAT));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::MENU), KeyAction::Id::MENU));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAction::Id::QUICKSLOTS), KeyAction::Id::QUICKSLOTS));\r\n+\t\taction_mappings.push_back(Keyboard::Mapping(get_keytype(KeyAct", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1621, "original_position": 1621, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Good explanation, I didn't fully understand this either.", "created_at": "2019-12-19T10:19:05Z", "updated_at": "2019-12-19T10:19:06Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359785518", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359785518"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359785518"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}, "in_reply_to_id": 359703390}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T10:19:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T10:19:05Z"}, {"id": "11124657772", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359784967", "pull_request_review_id": 334533006, "id": 359784967, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTc4NDk2Nw==", "diff_hunk": "@@ -1,1107 +1,1104 @@\n-//////////////////////////////////////////////////////////////////////////////////\n-//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n-//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is free software: you can redistribute it and/or modify\t\t//\n-//\tit under the terms of the GNU Affero General Public License as published by\t//\n-//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n-//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n-//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n-//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n-//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n-//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n-//\tYou should have received a copy of the GNU Affero General Public License\t//\n-//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n-//////////////////////////////////////////////////////////////////////////////////\n-#include \"UIKeyConfig.h\"\n-\n-#include \"../UI.h\"\n-\n-#include \"../Components/MapleButton.h\"\n-#include \"../UITypes/UINotice.h\"\n-#include \"../UITypes/UILoginNotice.h\"\n-#include \"../Net/Packets/PlayerPackets.h\"\n-\n-#include <nlnx/nx.hpp>\n-\n-namespace ms\n-{\n-\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\n-\t{\n-\t\tkeyboard = &UI::get().get_keyboard();\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tnl::node close = nl::nx::ui[\"Basic.img\"][\"BtClose3\"];\n-\n-\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\n-\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\n-\t\ticon = KeyConfig[\"icon\"];\n-\t\tkey = KeyConfig[\"key\"];\n-\n-\t\tTexture bg = backgrnd;\n-\t\tPoint<int16_t> bg_dimensions = bg.get_dimensions();\n-\n-\t\tsprites.emplace_back(backgrnd);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd2\"]);\n-\t\tsprites.emplace_back(KeyConfig[\"backgrnd3\"]);\n-\n-\t\tbuttons[Buttons::CLOSE] = std::make_unique<MapleButton>(close, Point<int16_t>(bg_dimensions.x() - 18, 3));\n-\t\tbuttons[Buttons::CANCEL] = std::make_unique<MapleButton>(KeyConfig[\"button:Cancel\"]);\n-\t\tbuttons[Buttons::DEFAULT] = std::make_unique<MapleButton>(KeyConfig[\"button:Default\"]);\n-\t\tbuttons[Buttons::DELETE] = std::make_unique<MapleButton>(KeyConfig[\"button:Delete\"]);\n-\t\tbuttons[Buttons::KEYSETTING] = std::make_unique<MapleButton>(KeyConfig[\"button:keySetting\"]);\n-\t\tbuttons[Buttons::OK] = std::make_unique<MapleButton>(KeyConfig[\"button:OK\"]);\n-\n-\t\tload_keys_pos();\n-\t\tload_icons_pos();\n-\t\tload_keys();\n-\t\tload_icons();\n-\t\tmap_keys();\n-\n-\t\tdimension = bg_dimensions;\n-\t\tdragarea = Point<int16_t>(bg_dimensions.x(), 20);\n-\t}\n-\n-\tvoid UIKeyConfig::draw(float inter) const\n-\t{\n-\t\tUIElement::draw(inter);\n-\n-\t\tfor (auto ficon : icons)\n-\t\t{\n-\t\t\tif (ficon.second)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), ficon.first) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tint32_t maplekey = get_tempkey(ficon.first);\n-\n-\t\t\t\t\tif (maplekey != -1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tKeyConfig::Key fkey = KeyConfig::actionbyid(maplekey);\n-\n-\t\t\t\t\t\tif (maplekey == KeyConfig::Key::SPACE)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(0, 3));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif (fkey == KeyConfig::Key::LEFT_CONTROL || fkey == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_CONTROL] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_ALT || fkey == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_ALT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (fkey == KeyConfig::Key::LEFT_SHIFT || fkey == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::LEFT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[KeyConfig::Key::RIGHT_SHIFT] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tficon.second->draw(position + keys_pos[fkey] - Point<int16_t>(2, 3));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tficon.second->draw(position + icons_pos[ficon.first]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (auto fkey : keys)\n-\t\t\tfkey.second.draw(position + keys_pos[fkey.first]);\n-\t}\n-\n-\tvoid UIKeyConfig::update()\n-\t{\n-\t\tUIElement::update();\n-\t}\n-\n-\tvoid UIKeyConfig::send_key(int32_t keycode, bool pressed, bool escape)\n-\t{\n-\t\tif (pressed && escape)\n-\t\t\tsafe_close();\n-\t}\n-\n-\tCursor::State UIKeyConfig::send_cursor(bool clicked, Point<int16_t> cursorpos)\n-\t{\n-\t\tCursor::State dstate = UIDragElement::send_cursor(clicked, cursorpos);\n-\n-\t\tif (dragged)\n-\t\t\treturn dstate;\n-\n-\t\tKeyAction::Id icon_slot = icon_by_position(cursorpos);\n-\n-\t\tif (icon_slot != KeyAction::Id::LENGTH)\n-\t\t{\n-\t\t\tif (auto icon = icons[icon_slot].get())\n-\t\t\t{\n-\t\t\t\tif (clicked)\n-\t\t\t\t{\n-\t\t\t\t\ticon->start_drag(cursorpos - position - icons_pos[icon_slot]);\n-\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tKeyConfig::Key key_slot = key_by_position(cursorpos);\n-\n-\t\tif (key_slot != KeyConfig::Key::LENGTH)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(key_slot);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (auto icon = icons[action].get())\n-\t\t\t\t{\n-\t\t\t\t\tif (clicked)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ticon->start_drag(cursorpos - position - keys_pos[key_slot]);\n-\t\t\t\t\t\tUI::get().drag_icon(icon);\n-\n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn Cursor::State::CANGRAB;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn UIElement::send_cursor(clicked, cursorpos);\n-\t}\n-\n-\tbool UIKeyConfig::send_icon(const Icon& icon, Point<int16_t> cursorpos)\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\ticon.drop_on_bindings(cursorpos, true);\n-\t\t}\n-\n-\t\tKeyConfig::Key fkey = all_keys_by_position(cursorpos);\n-\n-\t\tif (fkey != KeyConfig::Key::LENGTH)\n-\t\t\ticon.drop_on_bindings(cursorpos, false);\n-\n-\t\treturn true;\n-\t}\n-\n-\tvoid UIKeyConfig::remove_key(KeyAction::Id action)\n-\t{\n-\t\tauto iter = std::find(found_actions.begin(), found_actions.end(), action);\n-\n-\t\tif (iter != found_actions.end())\n-\t\t{\n-\t\t\tfound_actions.erase(iter);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::add_key(Point<int16_t> cursorposition, KeyAction::Id action)\n-\t{\n-\t\tif (std::find(found_actions.begin(), found_actions.end(), action) == found_actions.end())\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tfound_actions.emplace_back(action);\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tKeyConfig::Key key = all_keys_by_position(cursorposition);\n-\t\t\tKeyType::Id type = get_keytype(action);\n-\n-\t\t\tauto it = tempkeys.begin();\n-\n-\t\t\twhile (it != tempkeys.end())\n-\t\t\t{\n-\t\t\t\tKeyboard::Mapping map = it->second;\n-\n-\t\t\t\tif (map.action == action)\n-\t\t\t\t{\n-\t\t\t\t\tif (it->first == KeyConfig::Key::LEFT_CONTROL || it->first == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_CONTROL);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_CONTROL);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_ALT || it->first == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_ALT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_ALT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (it->first == KeyConfig::Key::LEFT_SHIFT || it->first == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::LEFT_SHIFT);\n-\t\t\t\t\t\ttempkeys.erase(KeyConfig::Key::RIGHT_SHIFT);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttempkeys.erase(it->first);\n-\n-\t\t\t\t\t\tdirty = true;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t\tit++;\n-\t\t\t}\n-\n-\t\t\tKeyboard::Mapping map = tempkeys[key];\n-\t\t\tKeyAction::Id map_action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE && map_action != action)\n-\t\t\t\tremove_key(map_action);\n-\n-\t\t\tif (key == KeyConfig::Key::LEFT_CONTROL || key == KeyConfig::Key::RIGHT_CONTROL)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_CONTROL] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_CONTROL] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_ALT || key == KeyConfig::Key::RIGHT_ALT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_ALT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_ALT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse if (key == KeyConfig::Key::LEFT_SHIFT || key == KeyConfig::Key::RIGHT_SHIFT)\n-\t\t\t{\n-\t\t\t\ttempkeys[KeyConfig::Key::LEFT_SHIFT] = Keyboard::Mapping(type, action);\n-\t\t\t\ttempkeys[KeyConfig::Key::RIGHT_SHIFT] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\ttempkeys[key] = Keyboard::Mapping(type, action);\n-\n-\t\t\t\tdirty = true;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tButton::State UIKeyConfig::button_pressed(uint16_t buttonid)\n-\t{\n-\t\tswitch (buttonid)\n-\t\t{\n-\t\tcase Buttons::CLOSE:\n-\t\tcase Buttons::CANCEL:\n-\t\t\tsafe_close();\n-\t\t\tbreak;\n-\t\tcase Buttons::DEFAULT:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to revert to default settings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tauto keysel_onok = [&](bool alternate)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tclear();\n-\n-\t\t\t\t\t\tif (alternate)\n-\t\t\t\t\t\t\ttempkeys = alternate_keys;\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t\ttempkeys = basic_keys;\n-\n-\t\t\t\t\t\tmap_keys();\n-\t\t\t\t\t};\n-\n-\t\t\t\t\tUI::get().emplace<UIKeySelect>(keysel_onok, false);\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::DELETE:\n-\t\t{\n-\t\t\tconstexpr char* message = \"Would you like to clear all key bindings?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t\tclear();\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t\tbreak;\n-\t\t}\n-\t\tcase Buttons::KEYSETTING:\n-\t\t\tbreak;\n-\t\tcase Buttons::OK:\n-\t\t{\n-\t\t\tsave_keys();\n-\t\t\tclose();\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn Button::State::NORMAL;\n-\t}\n-\n-\tvoid UIKeyConfig::close()\n-\t{\n-\t\tdeactivate();\n-\t\treset();\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys_pos()\n-\t{\n-\t\tint16_t slot_width = 33;\n-\t\tint16_t slot_width_lg = 98;\n-\t\tint16_t slot_height = 33;\n-\n-\t\tint16_t row_y = 126;\n-\t\tint16_t row_special_y = row_y - slot_height - 5;\n-\n-\t\tint16_t row_quickslot_x = 535;\n-\n-\t\tint16_t row_one_x = 31;\n-\t\tint16_t row_two_x = 80;\n-\t\tint16_t row_three_x = 96;\n-\t\tint16_t row_four_x = 55;\n-\t\tint16_t row_five_x = 39;\n-\n-\t\tint16_t row_special_x = row_one_x;\n-\n-\t\tkeys_pos[KeyConfig::Key::ESCAPE] = Point<int16_t>(row_one_x, row_special_y);\n-\n-\t\trow_special_x += slot_width * 2;\n-\n-\t\tfor (size_t i = KeyConfig::Key::F1; i <= KeyConfig::Key::F12; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_special_x, row_special_y);\n-\n-\t\t\trow_special_x += slot_width;\n-\n-\t\t\tif (id == KeyConfig::Key::F4 || id == KeyConfig::Key::F8)\n-\t\t\t\trow_special_x += 17;\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::SCROLL_LOCK] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_special_y);\n-\n-\t\tkeys_pos[KeyConfig::Key::GRAVE_ACCENT] = Point<int16_t>(row_one_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM1] = Point<int16_t>(row_one_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM2] = Point<int16_t>(row_one_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM3] = Point<int16_t>(row_one_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM4] = Point<int16_t>(row_one_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM5] = Point<int16_t>(row_one_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM6] = Point<int16_t>(row_one_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM7] = Point<int16_t>(row_one_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM8] = Point<int16_t>(row_one_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM9] = Point<int16_t>(row_one_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::NUM0] = Point<int16_t>(row_one_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::MINUS] = Point<int16_t>(row_one_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::EQUAL] = Point<int16_t>(row_one_x + (slot_width * 12), row_y + (slot_height * 0));\n-\n-\t\tfor (size_t i = KeyConfig::Key::Q; i <= KeyConfig::Key::RIGHT_BRACKET; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_two_x + (slot_width * (i - KeyConfig::Key::Q)), row_y + (slot_height * 1));\n-\t\t}\n-\n-\t\trow_two_x += 9;\n-\n-\t\tkeys_pos[KeyConfig::Key::BACKSLASH] = Point<int16_t>(row_two_x + (slot_width * 12), row_y + (slot_height * 1));\n-\n-\t\tfor (size_t i = KeyConfig::Key::A; i <= KeyConfig::Key::APOSTROPHE; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_three_x + (slot_width * (i - KeyConfig::Key::A)), row_y + (slot_height * 2));\n-\t\t}\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 0), row_y + (slot_height * 3));\n-\n-\t\trow_four_x += 24;\n-\n-\t\tfor (size_t i = KeyConfig::Key::Z; i <= KeyConfig::Key::PERIOD; i++)\n-\t\t{\n-\t\t\tKeyConfig::Key id = KeyConfig::actionbyid(i);\n-\n-\t\t\tkeys_pos[id] = Point<int16_t>(row_four_x + (slot_width * (i - KeyConfig::Key::Z + 1)), row_y + (slot_height * 3));\n-\t\t}\n-\n-\t\trow_four_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_SHIFT] = Point<int16_t>(row_four_x + (slot_width * 11), row_y + (slot_height * 3));\n-\n-\t\tkeys_pos[KeyConfig::Key::LEFT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 0), row_y + (slot_height * 4));\n-\t\tkeys_pos[KeyConfig::Key::LEFT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 1), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 24;\n-\n-\t\tkeys_pos[KeyConfig::Key::SPACE] = Point<int16_t>(row_five_x + (slot_width_lg * 2), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 27;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_ALT] = Point<int16_t>(row_five_x + (slot_width_lg * 3), row_y + (slot_height * 4));\n-\n-\t\trow_five_x += 2;\n-\n-\t\tkeys_pos[KeyConfig::Key::RIGHT_CONTROL] = Point<int16_t>(row_five_x + (slot_width_lg * 4), row_y + (slot_height * 4));\n-\n-\t\tkeys_pos[KeyConfig::Key::INSERT] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::HOME] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_UP] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\tkeys_pos[KeyConfig::Key::DELETE] = Point<int16_t>(row_quickslot_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::END] = Point<int16_t>(row_quickslot_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\tkeys_pos[KeyConfig::Key::PAGE_DOWN] = Point<int16_t>(row_quickslot_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons_pos()\n-\t{\n-\t\tint16_t row_x = 26;\n-\t\tint16_t row_y = 307;\n-\n-\t\tint16_t slot_width = 36;\n-\t\tint16_t slot_height = 36;\n-\n-\t\ticons_pos[KeyAction::Id::MAPLECHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::TOGGLECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::WHISPER] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MEDALS] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::BOSSPARTY] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PROFESSION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::EQUIPMENT] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ITEMS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::CHARINFO] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::MENU] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::QUICKSLOTS] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::PICKUP] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SIT] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::ATTACK] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::JUMP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::INTERACT_HARVEST] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 0));\n-\t\ticons_pos[KeyAction::Id::SOULWEAPON] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 0));\n-\n-\t\ticons_pos[KeyAction::Id::SAY] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTYCHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDSCHAT] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::ITEMPOT] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::EVENT] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SILENTCRUSADE] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::STATS] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::SKILLS] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::QUESTLOG] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::CHANGECHANNEL] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::GUILD] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::PARTY] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::NOTIFIER] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::FRIENDS] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::WORLDMAP] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::MINIMAP] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 1));\n-\t\ticons_pos[KeyAction::Id::KEYBINDINGS] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 1));\n-\n-\t\ticons_pos[KeyAction::Id::GUILDCHAT] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ALLIANCECHAT] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::BATTLEANALYSIS] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::GUIDE] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::ENHANCEEQUIP] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MONSTERCOLLECTION] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MANAGELEGION] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAPLENEWS] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::CASHSHOP] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MAINMENU] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::SCREENSHOT] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::PICTUREMODE] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 2));\n-\t\ticons_pos[KeyAction::Id::MUTE] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 2));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 2));\n-\n-\t\ticons_pos[KeyAction::Id::FACE1] = Point<int16_t>(row_x + (slot_width * 0), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE2] = Point<int16_t>(row_x + (slot_width * 1), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE3] = Point<int16_t>(row_x + (slot_width * 2), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE4] = Point<int16_t>(row_x + (slot_width * 3), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE5] = Point<int16_t>(row_x + (slot_width * 4), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE6] = Point<int16_t>(row_x + (slot_width * 5), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::FACE7] = Point<int16_t>(row_x + (slot_width * 6), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MAPLEACHIEVEMENT] = Point<int16_t>(row_x + (slot_width * 7), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::MONSTERBOOK] = Point<int16_t>(row_x + (slot_width * 8), row_y + (slot_height * 3));\n-\t\ticons_pos[KeyAction::Id::TOSPOUSE] = Point<int16_t>(row_x + (slot_width * 9), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 10), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 11), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 12), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 13), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 14), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 15), row_y + (slot_height * 3));\n-\t\t//icons_pos[KeyAction::Id::LENGTH] = Point<int16_t>(row_x + (slot_width * 16), row_y + (slot_height * 3));\n-\t}\n-\n-\tvoid UIKeyConfig::load_keys()\n-\t{\n-\t\tkeys[KeyConfig::Key::ESCAPE] = key[1];\n-\t\tkeys[KeyConfig::Key::NUM1] = key[2];\n-\t\tkeys[KeyConfig::Key::NUM2] = key[3];\n-\t\tkeys[KeyConfig::Key::NUM3] = key[4];\n-\t\tkeys[KeyConfig::Key::NUM4] = key[5];\n-\t\tkeys[KeyConfig::Key::NUM5] = key[6];\n-\t\tkeys[KeyConfig::Key::NUM6] = key[7];\n-\t\tkeys[KeyConfig::Key::NUM7] = key[8];\n-\t\tkeys[KeyConfig::Key::NUM8] = key[9];\n-\t\tkeys[KeyConfig::Key::NUM9] = key[10];\n-\t\tkeys[KeyConfig::Key::NUM0] = key[11];\n-\t\tkeys[KeyConfig::Key::MINUS] = key[12];\n-\t\tkeys[KeyConfig::Key::EQUAL] = key[13];\n-\n-\t\tkeys[KeyConfig::Key::Q] = key[16];\n-\t\tkeys[KeyConfig::Key::W] = key[17];\n-\t\tkeys[KeyConfig::Key::E] = key[18];\n-\t\tkeys[KeyConfig::Key::R] = key[19];\n-\t\tkeys[KeyConfig::Key::T] = key[20];\n-\t\tkeys[KeyConfig::Key::Y] = key[21];\n-\t\tkeys[KeyConfig::Key::U] = key[22];\n-\t\tkeys[KeyConfig::Key::I] = key[23];\n-\t\tkeys[KeyConfig::Key::O] = key[24];\n-\t\tkeys[KeyConfig::Key::P] = key[25];\n-\t\tkeys[KeyConfig::Key::LEFT_BRACKET] = key[26];\n-\t\tkeys[KeyConfig::Key::RIGHT_BRACKET] = key[27];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_CONTROL] = key[29];\n-\t\tkeys[KeyConfig::Key::RIGHT_CONTROL] = key[29];\n-\n-\t\tkeys[KeyConfig::Key::A] = key[30];\n-\t\tkeys[KeyConfig::Key::S] = key[31];\n-\t\tkeys[KeyConfig::Key::D] = key[32];\n-\t\tkeys[KeyConfig::Key::F] = key[33];\n-\t\tkeys[KeyConfig::Key::G] = key[34];\n-\t\tkeys[KeyConfig::Key::H] = key[35];\n-\t\tkeys[KeyConfig::Key::J] = key[36];\n-\t\tkeys[KeyConfig::Key::K] = key[37];\n-\t\tkeys[KeyConfig::Key::L] = key[38];\n-\t\tkeys[KeyConfig::Key::SEMICOLON] = key[39];\n-\t\tkeys[KeyConfig::Key::APOSTROPHE] = key[40];\n-\t\tkeys[KeyConfig::Key::GRAVE_ACCENT] = key[41];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_SHIFT] = key[42];\n-\t\tkeys[KeyConfig::Key::RIGHT_SHIFT] = key[42];\n-\n-\t\tkeys[KeyConfig::Key::BACKSLASH] = key[43];\n-\t\tkeys[KeyConfig::Key::Z] = key[44];\n-\t\tkeys[KeyConfig::Key::X] = key[45];\n-\t\tkeys[KeyConfig::Key::C] = key[46];\n-\t\tkeys[KeyConfig::Key::V] = key[47];\n-\t\tkeys[KeyConfig::Key::B] = key[48];\n-\t\tkeys[KeyConfig::Key::N] = key[49];\n-\t\tkeys[KeyConfig::Key::M] = key[50];\n-\t\tkeys[KeyConfig::Key::COMMA] = key[51];\n-\t\tkeys[KeyConfig::Key::PERIOD] = key[52];\n-\n-\t\tkeys[KeyConfig::Key::LEFT_ALT] = key[56];\n-\t\tkeys[KeyConfig::Key::RIGHT_ALT] = key[56];\n-\n-\t\tkeys[KeyConfig::Key::SPACE] = key[57];\n-\n-\t\tkeys[KeyConfig::Key::F1] = key[59];\n-\t\tkeys[KeyConfig::Key::F2] = key[60];\n-\t\tkeys[KeyConfig::Key::F3] = key[61];\n-\t\tkeys[KeyConfig::Key::F4] = key[62];\n-\t\tkeys[KeyConfig::Key::F5] = key[63];\n-\t\tkeys[KeyConfig::Key::F6] = key[64];\n-\t\tkeys[KeyConfig::Key::F7] = key[65];\n-\t\tkeys[KeyConfig::Key::F8] = key[66];\n-\t\tkeys[KeyConfig::Key::F9] = key[67];\n-\t\tkeys[KeyConfig::Key::F10] = key[68];\n-\n-\t\tkeys[KeyConfig::Key::SCROLL_LOCK] = key[70];\n-\t\tkeys[KeyConfig::Key::HOME] = key[71];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_UP] = key[73];\n-\n-\t\tkeys[KeyConfig::Key::END] = key[79];\n-\n-\t\tkeys[KeyConfig::Key::PAGE_DOWN] = key[81];\n-\t\tkeys[KeyConfig::Key::INSERT] = key[82];\n-\t\tkeys[KeyConfig::Key::DELETE] = key[83];\n-\n-\t\tkeys[KeyConfig::Key::F11] = key[87];\n-\t\tkeys[KeyConfig::Key::F12] = key[88];\n-\t}\n-\n-\tvoid UIKeyConfig::load_icons()\n-\t{\n-\t\ticons[KeyAction::Id::EQUIPMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EQUIPMENT), icon[0], -1);\n-\t\ticons[KeyAction::Id::ITEMS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMS), icon[1], -1);\n-\t\ticons[KeyAction::Id::STATS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::STATS), icon[2], -1);\n-\t\ticons[KeyAction::Id::SKILLS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SKILLS), icon[3], -1);\n-\t\ticons[KeyAction::Id::FRIENDS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDS), icon[4], -1);\n-\t\ticons[KeyAction::Id::WORLDMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WORLDMAP), icon[5], -1);\n-\t\ticons[KeyAction::Id::MAPLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLECHAT), icon[6], -1);\n-\t\ticons[KeyAction::Id::MINIMAP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MINIMAP), icon[7], -1);\n-\t\ticons[KeyAction::Id::QUESTLOG] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUESTLOG), icon[8], -1);\n-\t\ticons[KeyAction::Id::KEYBINDINGS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::KEYBINDINGS), icon[9], -1);\n-\t\ticons[KeyAction::Id::SAY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAY), icon[10], -1);\n-\t\ticons[KeyAction::Id::WHISPER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::WHISPER), icon[11], -1);\n-\t\ticons[KeyAction::Id::PARTYCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTYCHAT), icon[12], -1);\n-\t\ticons[KeyAction::Id::FRIENDSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FRIENDSCHAT), icon[13], -1);\n-\t\ticons[KeyAction::Id::MENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MENU), icon[14], -1);\n-\t\ticons[KeyAction::Id::QUICKSLOTS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::QUICKSLOTS), icon[15], -1);\n-\t\ticons[KeyAction::Id::TOGGLECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOGGLECHAT), icon[16], -1);\n-\t\ticons[KeyAction::Id::GUILD] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILD), icon[17], -1);\n-\t\ticons[KeyAction::Id::GUILDCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUILDCHAT), icon[18], -1);\n-\t\ticons[KeyAction::Id::PARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PARTY), icon[19], -1);\n-\t\ticons[KeyAction::Id::NOTIFIER] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::NOTIFIER), icon[20], -1);\n-\t\ticons[KeyAction::Id::MAPLENEWS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLENEWS), icon[21], -1);\n-\t\ticons[KeyAction::Id::CASHSHOP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CASHSHOP), icon[22], -1);\n-\t\ticons[KeyAction::Id::ALLIANCECHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ALLIANCECHAT), icon[23], -1);\n-\t\ticons[KeyAction::Id::MANAGELEGION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MANAGELEGION), icon[25], -1);\n-\t\ticons[KeyAction::Id::MEDALS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MEDALS), icon[26], -1);\n-\t\ticons[KeyAction::Id::BOSSPARTY] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BOSSPARTY), icon[27], -1);\n-\t\ticons[KeyAction::Id::PROFESSION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PROFESSION), icon[29], -1);\n-\t\ticons[KeyAction::Id::ITEMPOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ITEMPOT), icon[30], -1);\n-\t\ticons[KeyAction::Id::EVENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::EVENT), icon[31], -1);\n-\t\ticons[KeyAction::Id::SILENTCRUSADE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SILENTCRUSADE), icon[33], -1);\n-\t\t//icons[KeyAction::Id::BITS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BITS), icon[34], -1);\n-\t\ticons[KeyAction::Id::BATTLEANALYSIS] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::BATTLEANALYSIS), icon[35], -1);\n-\t\ticons[KeyAction::Id::GUIDE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::GUIDE), icon[39], -1);\n-\t\t//icons[KeyAction::Id::VIEWERSCHAT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::VIEWERSCHAT), icon[40], -1);\n-\t\ticons[KeyAction::Id::ENHANCEEQUIP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ENHANCEEQUIP), icon[41], -1);\n-\t\ticons[KeyAction::Id::MONSTERCOLLECTION] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERCOLLECTION), icon[42], -1);\n-\t\ticons[KeyAction::Id::SOULWEAPON] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SOULWEAPON), icon[43], -1);\n-\t\ticons[KeyAction::Id::CHARINFO] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHARINFO), icon[44], -1);\n-\t\ticons[KeyAction::Id::CHANGECHANNEL] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::CHANGECHANNEL), icon[45], -1);\n-\t\ticons[KeyAction::Id::MAINMENU] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAINMENU), icon[46], -1);\n-\t\ticons[KeyAction::Id::SCREENSHOT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SCREENSHOT), icon[47], -1);\n-\t\ticons[KeyAction::Id::PICTUREMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICTUREMODE), icon[48], -1);\n-\t\ticons[KeyAction::Id::MAPLEACHIEVEMENT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLEACHIEVEMENT), icon[49], -1);\n-\t\ticons[KeyAction::Id::PICKUP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::PICKUP), icon[50], -1);\n-\t\ticons[KeyAction::Id::SIT] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SIT), icon[51], -1);\n-\t\ticons[KeyAction::Id::ATTACK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::ATTACK), icon[52], -1);\n-\t\ticons[KeyAction::Id::JUMP] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::JUMP), icon[53], -1);\n-\t\ticons[KeyAction::Id::INTERACT_HARVEST] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::INTERACT_HARVEST), icon[54], -1);\n-\t\ticons[KeyAction::Id::FACE1] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE1), icon[100], -1);\n-\t\ticons[KeyAction::Id::FACE2] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE2), icon[101], -1);\n-\t\ticons[KeyAction::Id::FACE3] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE3), icon[102], -1);\n-\t\ticons[KeyAction::Id::FACE4] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE4), icon[103], -1);\n-\t\ticons[KeyAction::Id::FACE5] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE5), icon[104], -1);\n-\t\ticons[KeyAction::Id::FACE6] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE6), icon[105], -1);\n-\t\ticons[KeyAction::Id::FACE7] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::FACE7), icon[106], -1);\n-\t\t//icons[KeyAction::Id::MAPLESTORAGE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MAPLESTORAGE), icon[200], -1);\n-\t\t//icons[KeyAction::Id::SAFEMODE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::SAFEMODE), icon[201], -1);\n-\t\ticons[KeyAction::Id::MUTE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MUTE), icon[202], -1);\n-\t\ticons[KeyAction::Id::MONSTERBOOK] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::MONSTERBOOK), icon[1000], -1);\n-\t\ticons[KeyAction::Id::TOSPOUSE] = std::make_unique<Icon>(std::make_unique<KeyIcon>(KeyAction::Id::TOSPOUSE), icon[1001], -1);\n-\t}\n-\n-\tvoid UIKeyConfig::map_keys()\n-\t{\n-\t\tfor (auto fkey : keys)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(fkey.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\t\tif (action || action == KeyAction::Id::EQUIPMENT)\n-\t\t\t\t\tfound_actions.emplace_back(action);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid UIKeyConfig::clear()\n-\t{\n-\t\tfound_actions.clear();\n-\n-\t\ttempkeys = {};\n-\n-\t\tdirty = true;\n-\t}\n-\n-\tvoid UIKeyConfig::reset()\n-\t{\n-\t\tclear();\n-\n-\t\ttempkeys = keyboard->get_maplekeys();\n-\n-\t\tmap_keys();\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::save_keys()\n-\t{\n-\t\tstd::vector<std::tuple<KeyConfig::Key, KeyType::Id, KeyAction::Id>> updated_actions;\n-\n-\t\tfor each (auto key in tempkeys)\n-\t\t{\n-\t\t\tKeyConfig::Key k = KeyConfig::actionbyid(key.first);\n-\t\t\tKeyboard::Mapping map = key.second;\n-\t\t\tKeyAction::Id action = KeyAction::actionbyid(map.action);\n-\n-\t\t\tKeyboard::Mapping fmap = keyboard->get_maple_mapping(key.first);\n-\n-\t\t\tif (map.action != fmap.action)\n-\t\t\t{\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(k, map.type, action));\n-\t\t\t}\n-\t\t}\n-\n-\t\tauto maplekeys = keyboard->get_maplekeys();\n-\n-\t\tfor each (auto key in maplekeys)\n-\t\t{\n-\t\t\tbool keyFound = false;\n-\t\t\tKeyConfig::Key keyConfig = KeyConfig::actionbyid(key.first);\n-\n-\t\t\tfor each (auto tkey in tempkeys)\n-\t\t\t{\n-\t\t\t\tKeyConfig::Key tKeyConfig = KeyConfig::actionbyid(tkey.first);\n-\n-\t\t\t\tif (keyConfig == tKeyConfig)\n-\t\t\t\t{\n-\t\t\t\t\tkeyFound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!keyFound)\n-\t\t\t\tupdated_actions.emplace_back(std::make_tuple(keyConfig, KeyType::Id::NONE, KeyAction::Id::LENGTH));\n-\t\t}\n-\n-\t\tif (updated_actions.size() > 0)\n-\t\t\tChangeKeyMapPacket(updated_actions).dispatch();\n-\n-\t\tfor each (auto action in updated_actions)\n-\t\t{\n-\t\t\tKeyConfig::Key key = std::get<0>(action);\n-\t\t\tKeyType::Id type = std::get<1>(action);\n-\t\t\tKeyAction::Id keyAction = std::get<2>(action);\n-\n-\t\t\tif (type == KeyType::Id::NONE)\n-\t\t\t\tkeyboard->remove(key);\n-\t\t\telse\n-\t\t\t\tkeyboard->assign(key, type, keyAction);\n-\t\t}\n-\n-\t\tdirty = false;\n-\t}\n-\n-\tvoid UIKeyConfig::safe_close()\n-\t{\n-\t\tif (dirty)\n-\t\t{\n-\t\t\tconstexpr char* message = \"Do you want to save your changes?\";\n-\n-\t\t\tauto onok = [&](bool ok)\n-\t\t\t{\n-\t\t\t\tif (ok)\n-\t\t\t\t{\n-\t\t\t\t\tsave_keys();\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tclose();\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\tUI::get().emplace<UIOk>(message, onok);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tclose();\n-\t\t}\n-\t}\n-\n-\tKeyAction::Id UIKeyConfig::icon_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : icons_pos)\n-\t\t{\n-\t\t\tif (std::find(found_actions.begin(), found_actions.end(), iter.first) != found_actions.end())\n-\t\t\t\tcontinue;\n-\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyAction::Id::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::key_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tKeyboard::Mapping map = get_tempkey_mapping(iter.first);\n-\n-\t\t\tif (map.type != KeyType::Id::NONE)\n-\t\t\t{\n-\t\t\t\tif (std::find(found_actions.begin(), found_actions.end(), map.action) != found_actions.end())\n-\t\t\t\t{\n-\t\t\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\t\t\tposition + iter.second,\n-\t\t\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t\t\t);\n-\n-\t\t\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\t\t\treturn iter.first;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tKeyConfig::Key UIKeyConfig::all_keys_by_position(Point<int16_t> cursorpos) const\n-\t{\n-\t\tfor (auto iter : keys_pos)\n-\t\t{\n-\t\t\tRectangle<int16_t> icon_rect = Rectangle<int16_t>(\n-\t\t\t\tposition + iter.second,\n-\t\t\t\tposition + iter.second + Point<int16_t>(32, 32)\n-\t\t\t\t);\n-\n-\t\t\tif (icon_rect.contains(cursorpos))\n-\t\t\t\treturn iter.first;\n-\t\t}\n-\n-\t\treturn KeyConfig::Key::LENGTH;\n-\t}\n-\n-\tint32_t UIKeyConfig::get_tempkey(KeyAction::Id action) const\n-\t{\n-\t\tfor (auto map : tempkeys)\n-\t\t{\n-\t\t\tKeyboard::Mapping m = map.second;\n-\n-\t\t\tif (m.action == action)\n-\t\t\t\treturn map.first;\n-\t\t}\n-\n-\t\treturn -1;\n-\t}\n-\n-\tKeyboard::Mapping UIKeyConfig::get_tempkey_mapping(int32_t keycode) const\n-\t{\n-\t\tauto iter = tempkeys.find(keycode);\n-\n-\t\tif (iter == tempkeys.end())\n-\t\t\treturn {};\n-\n-\t\treturn iter->second;\n-\t}\n-\n-\tKeyType::Id UIKeyConfig::get_keytype(KeyAction::Id action) const\n-\t{\n-\t\tswitch (action)\n-\t\t{\n-\t\tcase KeyAction::Id::EQUIPMENT:\n-\t\tcase KeyAction::Id::ITEMS:\n-\t\tcase KeyAction::Id::STATS:\n-\t\tcase KeyAction::Id::SKILLS:\n-\t\tcase KeyAction::Id::FRIENDS:\n-\t\tcase KeyAction::Id::WORLDMAP:\n-\t\tcase KeyAction::Id::MAPLECHAT:\n-\t\tcase KeyAction::Id::MINIMAP:\n-\t\tcase KeyAction::Id::QUESTLOG:\n-\t\tcase KeyAction::Id::KEYBINDINGS:\n-\t\tcase KeyAction::Id::TOGGLECHAT:\n-\t\tcase KeyAction::Id::WHISPER:\n-\t\tcase KeyAction::Id::SAY:\n-\t\tcase KeyAction::Id::PARTYCHAT:\n-\t\tcase KeyAction::Id::MENU:\n-\t\tcase KeyAction::Id::QUICKSLOTS:\n-\t\tcase KeyAction::Id::GUILD:\n-\t\tcase KeyAction::Id::FRIENDSCHAT:\n-\t\tcase KeyAction::Id::PARTY:\n-\t\tcase KeyAction::Id::NOTIFIER:\n-\t\tcase KeyAction::Id::CASHSHOP:\n-\t\tcase KeyAction::Id::GUILDCHAT:\n-\t\tcase KeyAction::Id::MEDALS:\n-\t\tcase KeyAction::Id::BITS:\n-\t\tcase KeyAction::Id::ALLIANCECHAT:\n-\t\tcase KeyAction::Id::MAPLENEWS:\n-\t\tcase KeyAction::Id::MANAGELEGION:\n-\t\tcase KeyAction::Id::PROFESSION:\n-\t\tcase KeyAction::Id::BOSSPARTY:\n-\t\tcase KeyAction::Id::ITEMPOT:\n-\t\tcase KeyAction::Id::EVENT:\n-\t\tcase KeyAction::Id::SILENTCRUSADE:\n-\t\tcase KeyAction::Id::BATTLEANALYSIS:\n-\t\tcase KeyAction::Id::GUIDE:\n-\t\tcase KeyAction::Id::VIEWERSCHAT:\n-\t\tcase KeyAction::Id::ENHANCEEQUIP:\n-\t\tcase KeyAction::Id::MONSTERCOLLECTION:\n-\t\tcase KeyAction::Id::SOULWEAPON:\n-\t\tcase KeyAction::Id::CHARINFO:\n-\t\tcase KeyAction::Id::CHANGECHANNEL:\n-\t\tcase KeyAction::Id::MAINMENU:\n-\t\tcase KeyAction::Id::SCREENSHOT:\n-\t\tcase KeyAction::Id::PICTUREMODE:\n-\t\tcase KeyAction::Id::MAPLEACHIEVEMENT:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::PICKUP:\n-\t\tcase KeyAction::Id::SIT:\n-\t\tcase KeyAction::Id::ATTACK:\n-\t\tcase KeyAction::Id::JUMP:\n-\t\t\treturn KeyType::Id::ACTION;\n-\t\tcase KeyAction::Id::INTERACT_HARVEST:\n-\t\tcase KeyAction::Id::MAPLESTORAGE:\n-\t\tcase KeyAction::Id::SAFEMODE:\n-\t\tcase KeyAction::Id::MUTE:\n-\t\tcase KeyAction::Id::MONSTERBOOK:\n-\t\tcase KeyAction::Id::TOSPOUSE:\n-\t\t\treturn KeyType::Id::MENU;\n-\t\tcase KeyAction::Id::FACE1:\n-\t\tcase KeyAction::Id::FACE2:\n-\t\tcase KeyAction::Id::FACE3:\n-\t\tcase KeyAction::Id::FACE4:\n-\t\tcase KeyAction::Id::FACE5:\n-\t\tcase KeyAction::Id::FACE6:\n-\t\tcase KeyAction::Id::FACE7:\n-\t\t\treturn KeyType::Id::FACE;\n-\t\tcase KeyAction::Id::LEFT:\n-\t\tcase KeyAction::Id::RIGHT:\n-\t\tcase KeyAction::Id::UP:\n-\t\tcase KeyAction::Id::DOWN:\n-\t\tcase KeyAction::Id::BACK:\n-\t\tcase KeyAction::Id::TAB:\n-\t\tcase KeyAction::Id::RETURN:\n-\t\tcase KeyAction::Id::ESCAPE:\n-\t\tcase KeyAction::Id::SPACE:\n-\t\tcase KeyAction::Id::DELETE:\n-\t\tcase KeyAction::Id::HOME:\n-\t\tcase KeyAction::Id::END:\n-\t\tcase KeyAction::Id::COPY:\n-\t\tcase KeyAction::Id::PASTE:\n-\t\tcase KeyAction::Id::LENGTH:\n-\t\tdefault:\n-\t\t\treturn KeyType::Id::NONE;\n-\t\t}\n-\t}\n-\n-\tUIKeyConfig::KeyIcon::KeyIcon(KeyAction::Id keyId)\n-\t{\n-\t\tsource = keyId;\n-\t}\n-\n-\tvoid UIKeyConfig::KeyIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n-\t{\n-\t\tauto keyconfig = UI::get().get_element<UIKeyConfig>();\n-\n-\t\tif (remove)\n-\t\t\tkeyconfig->remove_key(source);\n-\t\telse\n-\t\t\tkeyconfig->add_key(cursorposition, source);\n-\t}\n-}\n\\ No newline at end of file\n+//////////////////////////////////////////////////////////////////////////////////\r\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\r\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\r\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\r\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\r\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\r\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\r\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\r\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\r\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\r\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\r\n+//////////////////////////////////////////////////////////////////////////////////\r\n+#include \"UIKeyConfig.h\"\r\n+\r\n+#include \"../UI.h\"\r\n+\r\n+#include \"../Components/MapleButton.h\"\r\n+#include \"../Data/SkillData.h\"\r\n+#include \"../Net/Packets/PlayerPackets.h\"\r\n+#include \"../UITypes/UINotice.h\"\r\n+#include \"../UITypes/UILoginNotice.h\"\r\n+\r\n+#include \"../../../Console.h\"\r\n+\r\n+#include <nlnx/nx.hpp>\r\n+\r\n+namespace ms\r\n+{\r\n+\tUIKeyConfig::UIKeyConfig() : UIDragElement<PosKEYCONFIG>(), dirty(false)\r\n+\t{\r\n+\t\tkeyboard = &UI::get().get_keyboard();\r\n+\t\tstaged_mappings = keyboard->get_maplekeys();\r\n+\r\n+\t\tnl::node KeyConfig = nl::nx::ui[\"StatusBar3.img\"][\"KeyConfig\"];\r\n+\r\n+\t\ticon = KeyConfig[\"icon\"];\r\n+\t\tkey = KeyConfig[\"key\"];\r\n+\r\n+\t\tnl::node backgrnd = KeyConfig[\"backgrnd\"];\r\n+\t\tTexture bg = backgrnd;\r", "path": "IO/UITypes/UIKeyConfig.cpp", "position": 1153, "original_position": 1153, "commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "original_commit_id": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I believe this is due to the fact that when you add it to sprites it has to be a node which is what `nl::node` backgrnd = KeyConfig[\"backgrnd\"];` is for. On the other hand, if you want to get dimensions or anything else from the node, you have to convert it to a Texture. So later on in the code bg is used for the dimensions which is used to set the UI's dimensions. Specifically line 60 `dimension = bg_dimensions;`", "created_at": "2019-12-19T10:17:46Z", "updated_at": "2019-12-19T10:17:47Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359784967", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/359784967"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33#discussion_r359784967"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}}, "in_reply_to_id": 359697997}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33", "id": 354932462, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTMyNDYy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/33", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/33.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/33.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33", "number": 33, "state": "open", "locked": false, "title": "Enable skills in keyconfig", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Continues from the work in PR https://github.com/ryantpayton/HeavenClient/pull/24.\r\nResolves Issue #17.\r\n\r\nThis allows players to:\r\n* Drag skills from the skillbook onto keybindings\r\n* Remove skills from keybindings by dropping them in the bottom actions tray or dragging them onto the stage\r\n* Save skill keybindings to the server\r\n\r\nThis was built on a fresh refactor of UIKeyConfig which contains significant changes to types and namings. **For UIKeyConfig.h and  UIKeyConfig.cpp I _highly_ recommend reading through the new files rather than the diffs when doing the review to avoid confusion.**", "created_at": "2019-12-19T03:59:56Z", "updated_at": "2019-12-19T10:17:47Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "7cd3548e3638d6c0adb498a3a57a3758a462c5b3", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18", "head": {"label": "SomeMushroom:skills_keyconfig", "ref": "skills_keyconfig", "sha": "18c412ac77a871eb4cc25feb069a1f087aa22b18", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-17T23:10:01Z", "pushed_at": "2019-12-19T04:03:57Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11341, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T03:49:10Z", "pushed_at": "2019-12-19T04:03:58Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 17, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 17, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/33"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/33/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/33/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/18c412ac77a871eb4cc25feb069a1f087aa22b18"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-19T10:17:46Z"}, {"id": "11108285704", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/25", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/25/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/25/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/25", "id": 535473765, "node_id": "MDU6SXNzdWU1MzU0NzM3NjU=", "number": 25, "title": "UI Menubars not draggable when overlapping other UI", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-10T03:45:13Z", "updated_at": "2019-12-17T15:29:06Z", "closed_at": "2019-12-17T15:29:06Z", "author_association": "COLLABORATOR", "body": "When a UI menubar overlaps another UI element, the player can no longer drag the UI wherever the menubar overlaps.\r\n\r\nThis is a bit difficult to describe, so here's an image to better explain the issue. Afaict, this behavior is consistent across all UI menubars.\r\n\r\nBlue = Draggable Area\r\nRed = Non-draggable Area\r\n![image](https://user-images.githubusercontent.com/58151192/70493348-5daa0080-1ad5-11ea-8fe1-d52fe8931c10.png)\r\n"}}, "public": true, "created_at": "2019-12-17T15:29:06Z"}, {"id": "11108282121", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4407659608, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "before": "72c1cbc2647965f102d764dd4f6fe98930eec6b1", "commits": [{"sha": "9fb25e4fdec00155834f0335ad0cddb6544f3a0f", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "UI Menubars not draggable when overlapping other UI #25", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/9fb25e4fdec00155834f0335ad0cddb6544f3a0f"}]}, "public": true, "created_at": "2019-12-17T15:28:43Z"}, {"id": "11095583355", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "opened", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/30", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/30/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/30/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/30", "id": 538286283, "node_id": "MDU6SXNzdWU1MzgyODYyODM=", "number": 30, "title": "Buffs are not adapting to screen resolutions", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T09:24:51Z", "updated_at": "2019-12-16T09:24:51Z", "closed_at": null, "author_association": "OWNER", "body": "Using a buff in a screen size larger than the default of 800x600 shows in the incorrect spot.\r\n\r\n![image](https://user-images.githubusercontent.com/48335966/70894938-fb14a100-1fbb-11ea-9ca3-9c0c6fcc407f.png)"}}, "public": true, "created_at": "2019-12-16T09:24:51Z"}, {"id": "11095541410", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "opened", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/29", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/29/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/29/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/29", "id": 538283607, "node_id": "MDU6SXNzdWU1MzgyODM2MDc=", "number": 29, "title": "Tab/Arrow keys are able to be pressed while entering PIC on character selection screen", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T09:19:40Z", "updated_at": "2019-12-16T09:19:40Z", "closed_at": null, "author_association": "OWNER", "body": "**Steps to reproduce:**\r\n\r\n1. Login in\r\n2. Select a world\r\n3. Select a character\r\n4. Click Start\r\n5. Press Tab and/or any of the arrow keys\r\n\r\nYou can still interact with the screen. This should not be the case, only enter and esc should be allowed."}}, "public": true, "created_at": "2019-12-16T09:19:41Z"}, {"id": "11090648338", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4398057481, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "72c1cbc2647965f102d764dd4f6fe98930eec6b1", "before": "15a4b5071fe81a55bca83be989a4cc4e08b05519", "commits": [{"sha": "72c1cbc2647965f102d764dd4f6fe98930eec6b1", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Adjusted sounds for UI elemnts\nUISkillbook + UIQuestLog clean up\nAdded abs method to Point\nAdded default cursor position on game startup", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/72c1cbc2647965f102d764dd4f6fe98930eec6b1"}]}, "public": true, "created_at": "2019-12-15T05:30:48Z"}, {"id": "11077357902", "type": "MemberEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"member": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "action": "added"}, "public": true, "created_at": "2019-12-12T20:24:13Z"}, {"id": "11069025120", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4386177873, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "15a4b5071fe81a55bca83be989a4cc4e08b05519", "before": "044d8442fece0bbc7a312c437ead415b31655d06", "commits": [{"sha": "15a4b5071fe81a55bca83be989a4cc4e08b05519", "author": {"email": "nansonyzzheng@gmail.com", "name": "Nanson Zheng"}, "message": "Fix portals not placing characters correctly (#27)", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/15a4b5071fe81a55bca83be989a4cc4e08b05519"}]}, "public": true, "created_at": "2019-12-11T23:22:04Z"}, {"id": "11069025117", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "bugfix", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-12-11T23:22:03Z"}, {"id": "11069025041", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 27, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27", "id": 352109985, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUyMTA5OTg1", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/27", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/27.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/27.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/27", "number": 27, "state": "closed", "locked": false, "title": "[FIX] Using portals does not place players at the target portal", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "This fixes the problem of some portals placing players in seemingly arbitrary locations (specifically, the default portal) instead of the target portal indicated by the .wz file.", "created_at": "2019-12-11T20:53:41Z", "updated_at": "2019-12-11T23:22:02Z", "closed_at": "2019-12-11T23:22:02Z", "merged_at": "2019-12-11T23:22:02Z", "merge_commit_sha": "15a4b5071fe81a55bca83be989a4cc4e08b05519", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/27/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ed67771f20c4bcbfc9beec6444d56f34c9700d46", "head": {"label": "ryantpayton:bugfix", "ref": "bugfix", "sha": "ed67771f20c4bcbfc9beec6444d56f34c9700d46", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T23:20:42Z", "pushed_at": "2019-12-11T23:22:02Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 12, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 12, "watchers": 55, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "a322b4bbe65eb7f1d6c765db9a17c827842861d3", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T23:20:42Z", "pushed_at": "2019-12-11T23:22:02Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 12, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 12, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/27"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/27"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/27/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/27/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ed67771f20c4bcbfc9beec6444d56f34c9700d46"}}, "author_association": "COLLABORATOR", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 0, "review_comments": 0, "maintainer_can_modify": false, "commits": 1, "additions": 1, "deletions": 1, "changed_files": 1}}, "public": true, "created_at": "2019-12-11T23:22:03Z"}, {"id": "11069018035", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4386174081, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "044d8442fece0bbc7a312c437ead415b31655d06", "before": "a322b4bbe65eb7f1d6c765db9a17c827842861d3", "commits": [{"sha": "044d8442fece0bbc7a312c437ead415b31655d06", "author": {"email": "58151192+SomeMushroom@users.noreply.github.com", "name": "SomeMushroom"}, "message": "Refactor UISkillbook to utilize existing Icon functionality (#24)\n\n* Refactor Icon to store textures in EnumMap\r\n\r\n* Possible implementation of StatefulIcon - needs testing\r\n\r\n* Deprecate old SkillIcon and generate new SkillIcon and SkillMeta\r\n\r\n* Cleanup, renamings, and pointer fixes\r\n\r\n* Add SkillDisplayMeta::draw() and other fixes\r\n\r\n* Attempt at resolving external symbols error\r\n\r\n* Working SkillIcon implementation in UISkillbook refactor\r\n\r\n* Move State enum entirely to StatefulIcon\r\n\r\n* Change skill icon on mouseover\r\n\r\n* ICON_OFFSET -> SKILL_META_OFFSET with value adjustments\r\n\r\n* Add vcxproj files\r\n\r\n* Rebase and apply PR requests\r\n\r\n* Revert \"Add vcxproj files\"\r\n\r\nThis reverts commit 68ce4eb9e3dfb973fa6dccab7d37a38077543322.\r\n\r\n* Recommit vcxproj files with Unix (LF) line endings", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/044d8442fece0bbc7a312c437ead415b31655d06"}]}, "public": true, "created_at": "2019-12-11T23:20:40Z"}, {"id": "11069017965", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 24, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "id": 350469050, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwNDY5MDUw", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/24.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/24.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24", "number": 24, "state": "closed", "locked": false, "title": "Refactor UISkillbook to utilize existing Icon functionality", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Basic outline of how I imagine we could refactor UISkillbook to use IO/Components/Icon.h. This is the first step in resolving  #17.\r\n\r\nThe original `SkillIcon` in `UISkillbook` did a lot more than just handle the icon and seemed a little monolithic. I split this up into `SkillIcon` (new) and `SkillDisplayMeta`.\r\n\r\n* `StatefulIcon` was created to extend functionality in `Icon` that is used by other UIs in the codebase like UIKeyConfig, UIItemInventory, and UIEquipInventory. With the added feature of adding states to the icon on DISABLE and MOUSEOVER.\r\n* `SkillIcon` (new) inherits from `StatefulIcon`\r\n* `SkillDisplayMeta` is responsible for handling all visual components for displaying a skill in the UI, including the `SkillIcon` (new) for that skill.\r\n\r\n`UISkillbook` then uses a Vector of `SkillDisplayMeta` instead of the old `SkillIcon` for displaying information in the skill rows.\r\n\r\nUltimately the logic in `SkillIcon` (new) will be completed to pass along skill information to `UIKeyConfig` for registering skills to the keyconfig.", "created_at": "2019-12-08T23:31:55Z", "updated_at": "2019-12-11T23:20:39Z", "closed_at": "2019-12-11T23:20:38Z", "merged_at": "2019-12-11T23:20:38Z", "merge_commit_sha": "044d8442fece0bbc7a312c437ead415b31655d06", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/36af4e480f55ec3bf223ddb14a9fa91af0c100f9", "head": {"label": "SomeMushroom:skillicon_refactor", "ref": "skillicon_refactor", "sha": "36af4e480f55ec3bf223ddb14a9fa91af0c100f9", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-12-11T02:32:06Z", "pushed_at": "2019-12-11T16:58:26Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11245, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "a322b4bbe65eb7f1d6c765db9a17c827842861d3", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T01:59:33Z", "pushed_at": "2019-12-11T23:20:38Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 13, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 13, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/36af4e480f55ec3bf223ddb14a9fa91af0c100f9"}}, "author_association": "NONE", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 9, "maintainer_can_modify": false, "commits": 14, "additions": 252, "deletions": 112, "changed_files": 8}}, "public": true, "created_at": "2019-12-11T23:20:39Z"}, {"id": "11060096084", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356372279", "pull_request_review_id": 330260154, "id": 356372279, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjM3MjI3OQ==", "diff_hunk": "@@ -500,14 +504,15 @@ namespace ms\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\tfor (size_t i = 0; i < skills.size(); i++)\n+\t\t\t{\n+\t\t\t\tskills[i].get_icon()->set_state(StatefulIcon::NORMAL);", "path": "IO/UITypes/UISkillbook.cpp", "position": 211, "original_position": 211, "commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "original_commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Change this to `StatefulIcon::State::NORMAL`", "created_at": "2019-12-11T02:05:52Z", "updated_at": "2019-12-11T02:07:37Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356372279", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356372279"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356372279"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "id": 350469050, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwNDY5MDUw", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/24.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/24.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24", "number": 24, "state": "open", "locked": false, "title": "Refactor UISkillbook to utilize existing Icon functionality", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Basic outline of how I imagine we could refactor UISkillbook to use IO/Components/Icon.h. This is the first step in resolving  #17.\r\n\r\nThe original `SkillIcon` in `UISkillbook` did a lot more than just handle the icon and seemed a little monolithic. I split this up into `SkillIcon` (new) and `SkillDisplayMeta`.\r\n\r\n* `StatefulIcon` was created to extend functionality in `Icon` that is used by other UIs in the codebase like UIKeyConfig, UIItemInventory, and UIEquipInventory. With the added feature of adding states to the icon on DISABLE and MOUSEOVER.\r\n* `SkillIcon` (new) inherits from `StatefulIcon`\r\n* `SkillDisplayMeta` is responsible for handling all visual components for displaying a skill in the UI, including the `SkillIcon` (new) for that skill.\r\n\r\n`UISkillbook` then uses a Vector of `SkillDisplayMeta` instead of the old `SkillIcon` for displaying information in the skill rows.\r\n\r\nUltimately the logic in `SkillIcon` (new) will be completed to pass along skill information to `UIKeyConfig` for registering skills to the keyconfig.", "created_at": "2019-12-08T23:31:55Z", "updated_at": "2019-12-11T02:07:36Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "15f9f6cd59305523b79bb77b06c8211aae452c2f", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1", "head": {"label": "SomeMushroom:skillicon_refactor", "ref": "skillicon_refactor", "sha": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-11-30T10:13:31Z", "pushed_at": "2019-12-10T03:48:19Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11233, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T01:59:33Z", "pushed_at": "2019-12-11T01:59:31Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1"}}, "author_association": "NONE"}}, "public": true, "created_at": "2019-12-11T02:05:52Z"}, {"id": "11060096071", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356372166", "pull_request_review_id": 330260154, "id": 356372166, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjM3MjE2Ng==", "diff_hunk": "@@ -483,11 +473,25 @@ namespace ms\n \t\t\t\t\t\tclear_tooltip();\n \t\t\t\t\t\tgrabbing = true;\n \n-\t\t\t\t\t\treturn Cursor::State::GRABBING;\n+\t\t\t\t\t\tint32_t skill_id = skills[i].get_id();\n+\t\t\t\t\t\tint32_t skill_level = skillbook.get_level(skill_id);\n+\n+\t\t\t\t\t\tif (skill_level > 0 && !SkillData::get(skill_id).is_passive())\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tskills[i].get_icon()->start_drag(cursorpos - skill_position);\n+\t\t\t\t\t\t\tUI::get().drag_icon(skills[i].get_icon());\n+\n+\t\t\t\t\t\t\treturn Cursor::State::GRABBING;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\treturn Cursor::State::IDLE;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse\n \t\t\t\t\t{\n-\t\t\t\t\t\tshow_skill(icons[i].get_id());\n+\t\t\t\t\t\tskills[i].get_icon()->set_state(StatefulIcon::MOUSEOVER);", "path": "IO/UITypes/UISkillbook.cpp", "position": 200, "original_position": 200, "commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "original_commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Change this to `StatefulIcon::State::MOUSEOVER`", "created_at": "2019-12-11T02:05:24Z", "updated_at": "2019-12-11T02:07:37Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356372166", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356372166"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356372166"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "id": 350469050, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwNDY5MDUw", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/24.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/24.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24", "number": 24, "state": "open", "locked": false, "title": "Refactor UISkillbook to utilize existing Icon functionality", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Basic outline of how I imagine we could refactor UISkillbook to use IO/Components/Icon.h. This is the first step in resolving  #17.\r\n\r\nThe original `SkillIcon` in `UISkillbook` did a lot more than just handle the icon and seemed a little monolithic. I split this up into `SkillIcon` (new) and `SkillDisplayMeta`.\r\n\r\n* `StatefulIcon` was created to extend functionality in `Icon` that is used by other UIs in the codebase like UIKeyConfig, UIItemInventory, and UIEquipInventory. With the added feature of adding states to the icon on DISABLE and MOUSEOVER.\r\n* `SkillIcon` (new) inherits from `StatefulIcon`\r\n* `SkillDisplayMeta` is responsible for handling all visual components for displaying a skill in the UI, including the `SkillIcon` (new) for that skill.\r\n\r\n`UISkillbook` then uses a Vector of `SkillDisplayMeta` instead of the old `SkillIcon` for displaying information in the skill rows.\r\n\r\nUltimately the logic in `SkillIcon` (new) will be completed to pass along skill information to `UIKeyConfig` for registering skills to the keyconfig.", "created_at": "2019-12-08T23:31:55Z", "updated_at": "2019-12-11T02:07:36Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "15f9f6cd59305523b79bb77b06c8211aae452c2f", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1", "head": {"label": "SomeMushroom:skillicon_refactor", "ref": "skillicon_refactor", "sha": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-11-30T10:13:31Z", "pushed_at": "2019-12-10T03:48:19Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11233, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T01:59:33Z", "pushed_at": "2019-12-11T01:59:31Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1"}}, "author_association": "NONE"}}, "public": true, "created_at": "2019-12-11T02:05:24Z"}, {"id": "11060096080", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356371547", "pull_request_review_id": 330260154, "id": 356371547, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjM3MTU0Nw==", "diff_hunk": "@@ -0,0 +1,66 @@\n+//////////////////////////////////////////////////////////////////////////////////\n+//\tThis file is part of the continued Journey MMORPG client\t\t\t\t\t//\n+//\tCopyright (C) 2015-2019  Daniel Allendorf, Ryan Payton\t\t\t\t\t\t//\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n+//\tThis program is free software: you can redistribute it and/or modify\t\t//\n+//\tit under the terms of the GNU Affero General Public License as published by\t//\n+//\tthe Free Software Foundation, either version 3 of the License, or\t\t\t//\n+//\t(at your option) any later version.\t\t\t\t\t\t\t\t\t\t\t//\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n+//\tThis program is distributed in the hope that it will be useful,\t\t\t\t//\n+//\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\t\t\t\t//\n+//\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\t\t\t\t//\n+//\tGNU Affero General Public License for more details.\t\t\t\t\t\t\t//\n+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n+//\tYou should have received a copy of the GNU Affero General Public License\t//\n+//\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\t\t//\n+//////////////////////////////////////////////////////////////////////////////////\n+#pragma once\n+\n+#include \"Icon.h\"\n+\n+#include \"../Graphics/Texture.h\"\n+\n+namespace ms\n+{\n+\tclass StatefulIcon : public Icon\n+\t{\n+\tpublic:\n+\t\tenum State: uint8_t\n+\t\t{\n+\t\t\tNORMAL = 0,\n+\t\t\tDISABLED,\n+\t\t\tMOUSEOVER,\n+\t\t\tLENGTH  // requirement for EnumMap", "path": "IO/Components/StatefulIcon.h", "position": 34, "original_position": 34, "commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "original_commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I don't think we need to explicitly imply this requirement.", "created_at": "2019-12-11T02:02:11Z", "updated_at": "2019-12-11T02:07:36Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356371547", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356371547"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356371547"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "id": 350469050, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwNDY5MDUw", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/24.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/24.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24", "number": 24, "state": "open", "locked": false, "title": "Refactor UISkillbook to utilize existing Icon functionality", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Basic outline of how I imagine we could refactor UISkillbook to use IO/Components/Icon.h. This is the first step in resolving  #17.\r\n\r\nThe original `SkillIcon` in `UISkillbook` did a lot more than just handle the icon and seemed a little monolithic. I split this up into `SkillIcon` (new) and `SkillDisplayMeta`.\r\n\r\n* `StatefulIcon` was created to extend functionality in `Icon` that is used by other UIs in the codebase like UIKeyConfig, UIItemInventory, and UIEquipInventory. With the added feature of adding states to the icon on DISABLE and MOUSEOVER.\r\n* `SkillIcon` (new) inherits from `StatefulIcon`\r\n* `SkillDisplayMeta` is responsible for handling all visual components for displaying a skill in the UI, including the `SkillIcon` (new) for that skill.\r\n\r\n`UISkillbook` then uses a Vector of `SkillDisplayMeta` instead of the old `SkillIcon` for displaying information in the skill rows.\r\n\r\nUltimately the logic in `SkillIcon` (new) will be completed to pass along skill information to `UIKeyConfig` for registering skills to the keyconfig.", "created_at": "2019-12-08T23:31:55Z", "updated_at": "2019-12-11T02:07:36Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "15f9f6cd59305523b79bb77b06c8211aae452c2f", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1", "head": {"label": "SomeMushroom:skillicon_refactor", "ref": "skillicon_refactor", "sha": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-11-30T10:13:31Z", "pushed_at": "2019-12-10T03:48:19Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11233, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T01:59:33Z", "pushed_at": "2019-12-11T01:59:31Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1"}}, "author_association": "NONE"}}, "public": true, "created_at": "2019-12-11T02:02:11Z"}, {"id": "11060096070", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356371756", "pull_request_review_id": 330260154, "id": 356371756, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjM3MTc1Ng==", "diff_hunk": "@@ -30,79 +32,69 @@\n \n namespace ms\n {\n-\tSkillIcon::SkillIcon(int32_t i, int32_t l) : id(i), lv(l)\n+\tUISkillbook::SkillIcon::SkillIcon(int32_t id) : skill_id(id) {}\n+\n+\tvoid UISkillbook::SkillIcon::drop_on_bindings(Point<int16_t> cursorposition, bool remove) const\n+\t{\n+\t\t// TODO", "path": "IO/UITypes/UISkillbook.cpp", "position": 19, "original_position": 19, "commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "original_commit_id": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Maybe change this to `TODO: Implement this` or something along those lines. That way we can pick this up from Visual Studio.", "created_at": "2019-12-11T02:03:10Z", "updated_at": "2019-12-11T02:07:36Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356371756", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/356371756"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24#discussion_r356371756"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24", "id": 350469050, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwNDY5MDUw", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/24", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/24.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/24.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24", "number": 24, "state": "open", "locked": false, "title": "Refactor UISkillbook to utilize existing Icon functionality", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Basic outline of how I imagine we could refactor UISkillbook to use IO/Components/Icon.h. This is the first step in resolving  #17.\r\n\r\nThe original `SkillIcon` in `UISkillbook` did a lot more than just handle the icon and seemed a little monolithic. I split this up into `SkillIcon` (new) and `SkillDisplayMeta`.\r\n\r\n* `StatefulIcon` was created to extend functionality in `Icon` that is used by other UIs in the codebase like UIKeyConfig, UIItemInventory, and UIEquipInventory. With the added feature of adding states to the icon on DISABLE and MOUSEOVER.\r\n* `SkillIcon` (new) inherits from `StatefulIcon`\r\n* `SkillDisplayMeta` is responsible for handling all visual components for displaying a skill in the UI, including the `SkillIcon` (new) for that skill.\r\n\r\n`UISkillbook` then uses a Vector of `SkillDisplayMeta` instead of the old `SkillIcon` for displaying information in the skill rows.\r\n\r\nUltimately the logic in `SkillIcon` (new) will be completed to pass along skill information to `UIKeyConfig` for registering skills to the keyconfig.", "created_at": "2019-12-08T23:31:55Z", "updated_at": "2019-12-11T02:07:36Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "15f9f6cd59305523b79bb77b06c8211aae452c2f", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1", "head": {"label": "SomeMushroom:skillicon_refactor", "ref": "skillicon_refactor", "sha": "4f275cc61288840b434f01a847107ef5ffe433c1", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-11-30T10:13:31Z", "pushed_at": "2019-12-10T03:48:19Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11233, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-11T01:59:33Z", "pushed_at": "2019-12-11T01:59:31Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/24"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/24/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/24/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4f275cc61288840b434f01a847107ef5ffe433c1"}}, "author_association": "NONE"}}, "public": true, "created_at": "2019-12-11T02:03:10Z"}, {"id": "11060060115", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4381423241, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "a322b4bbe65eb7f1d6c765db9a17c827842861d3", "before": "6e3fa8718254ea280ea77aff97e7a11c58241ee7", "commits": [{"sha": "a322b4bbe65eb7f1d6c765db9a17c827842861d3", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Added escape functionality for NPC dialogs (NpcTalk)\nAdded fix for damage against players from monsters if weapon defense is 0", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/a322b4bbe65eb7f1d6c765db9a17c827842861d3"}]}, "public": true, "created_at": "2019-12-11T01:59:32Z"}, {"id": "11060038984", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26/events", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/26", "id": 536065324, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUxNjYzMzI1", "number": 26, "title": "Ghost monster fix", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-12-11T00:08:21Z", "updated_at": "2019-12-11T01:54:36Z", "closed_at": "2019-12-11T01:53:26Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/26", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/26.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/26.patch"}, "body": "This is an initial fix for the ghost monsters issue. Taking hints from the localhost client, __PlayerMapTransferPacket__ was moved so that the packet is sent after __ChangeMapPacket__. In order to send the __PlayerMapTransferPacket__ at every map change, including dying and GM commands, it was added to **Stage::clear()**.\r\n\r\nLet me know if there are any issues remaining, or new ones caused by this patch."}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/564341592", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/26#issuecomment-564341592", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26", "id": 564341592, "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDM0MTU5Mg==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-12-11T01:54:36Z", "updated_at": "2019-12-11T01:54:36Z", "author_association": "OWNER", "body": "This fixed issue #1"}}, "public": true, "created_at": "2019-12-11T01:54:37Z"}, {"id": "11060034165", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "ghost-monster-fix", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-12-11T01:53:28Z"}, {"id": "11060034150", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4381409029, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "6e3fa8718254ea280ea77aff97e7a11c58241ee7", "before": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "commits": [{"sha": "6e3fa8718254ea280ea77aff97e7a11c58241ee7", "author": {"email": "nansonyzzheng@gmail.com", "name": "Nanson Zheng"}, "message": "Ghost monster fix (#26)\n\n* Initial fix on ghost monsters\r\n\r\n* Remove commented code\r\n\r\n* Styling", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/6e3fa8718254ea280ea77aff97e7a11c58241ee7"}]}, "public": true, "created_at": "2019-12-11T01:53:28Z"}, {"id": "11060034096", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 26, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26", "id": 351663325, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUxNjYzMzI1", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/26", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/26.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/26.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26", "number": 26, "state": "closed", "locked": false, "title": "Ghost monster fix", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "This is an initial fix for the ghost monsters issue. Taking hints from the localhost client, __PlayerMapTransferPacket__ was moved so that the packet is sent after __ChangeMapPacket__. In order to send the __PlayerMapTransferPacket__ at every map change, including dying and GM commands, it was added to **Stage::clear()**.\r\n\r\nLet me know if there are any issues remaining, or new ones caused by this patch.", "created_at": "2019-12-11T00:08:21Z", "updated_at": "2019-12-11T01:53:26Z", "closed_at": "2019-12-11T01:53:26Z", "merged_at": "2019-12-11T01:53:26Z", "merge_commit_sha": "6e3fa8718254ea280ea77aff97e7a11c58241ee7", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/3b0057df131a27a1b624c5dfd61ebdd7ec8e8c0f", "head": {"label": "ryantpayton:ghost-monster-fix", "ref": "ghost-monster-fix", "sha": "3b0057df131a27a1b624c5dfd61ebdd7ec8e8c0f", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-09T16:11:17Z", "pushed_at": "2019-12-11T01:53:26Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-09T16:11:17Z", "pushed_at": "2019-12-11T01:53:26Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 55, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/26"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/26/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/26/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/3b0057df131a27a1b624c5dfd61ebdd7ec8e8c0f"}}, "author_association": "COLLABORATOR", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 0, "review_comments": 0, "maintainer_can_modify": false, "commits": 3, "additions": 2, "deletions": 1, "changed_files": 1}}, "public": true, "created_at": "2019-12-11T01:53:27Z"}, {"id": "11039678454", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4370701816, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "before": "caf455fae066a55ae45d150942f27097e0394de3", "commits": [{"sha": "b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Fix for UIMiniMap after PR duplicating methods", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/b8e2d5e8da47454f21ed274f6f3b3b75033f2c1b"}]}, "public": true, "created_at": "2019-12-08T21:56:01Z"}, {"id": "11039614735", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4370662039, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "caf455fae066a55ae45d150942f27097e0394de3", "before": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "commits": [{"sha": "caf455fae066a55ae45d150942f27097e0394de3", "author": {"email": "nansonyzzheng@gmail.com", "name": "Nanson Zheng"}, "message": "MiniMap tooltips on hover (#23)\n\n* Add NPC list window and its functions\r\n\r\nAdd get method for NPC name and function\r\n\r\nRe-add map ID instance variable to Stage\r\n\r\nMake Animation draw param names consistent\r\n\r\n* Add tooltips to markers on hover\r\n\r\nChange TextToolTip to make it look nicer\r\n\r\n* Update UIMiniMap.cpp", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/caf455fae066a55ae45d150942f27097e0394de3"}]}, "public": true, "created_at": "2019-12-08T21:32:26Z"}, {"id": "11039614736", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "minimap", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-12-08T21:32:26Z"}, {"id": "11039614682", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 23, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23", "id": 349706312, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5NzA2MzEy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/23", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/23.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/23.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23", "number": 23, "state": "closed", "locked": false, "title": "MiniMap tooltips on hover", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Small addition requested by Ryan. Adds tooltips displaying an NPC's name or a portal's destination name when their corresponding markers are hovered over on the MiniMap.\r\n\r\n### Changes to files outside MiniMap.h/.cpp  \r\n- **TextTooltip.cpp**: Added condition to shrink frame cover by half to make it fit a one-liner tooltip; centered text label on one-liner tooltips\r\n\r\n### Notes  \r\n- Current official client also displays a list of NPCs on the next map on portal marker hover, and NPC functions on NPC marker hover. They both require a line separator which isn't implemented in Texttooltip yet, and portal tooltip requires icons that I haven't found yet.", "created_at": "2019-12-06T00:19:52Z", "updated_at": "2019-12-08T21:32:25Z", "closed_at": "2019-12-08T21:32:25Z", "merged_at": "2019-12-08T21:32:25Z", "merge_commit_sha": "caf455fae066a55ae45d150942f27097e0394de3", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/5a1bba1015558a1073c47de427c741b6477a3269", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "5a1bba1015558a1073c47de427c741b6477a3269", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-08T21:32:25Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 13, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 13, "watchers": 54, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-08T21:32:25Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11214, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 13, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 13, "watchers": 54, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/23"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/5a1bba1015558a1073c47de427c741b6477a3269"}}, "author_association": "COLLABORATOR", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 2, "review_comments": 2, "maintainer_can_modify": false, "commits": 5, "additions": 263, "deletions": 13, "changed_files": 3}}, "public": true, "created_at": "2019-12-08T21:32:25Z"}, {"id": "11038727065", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/355195652", "pull_request_review_id": 328616497, "id": 355195652, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE5NTY1Mg==", "diff_hunk": "@@ -54,7 +54,7 @@ namespace ms\n \t\tplayer_marker = Animation(marker[\"user\"]);\n \t\tselected_marker = Animation(MiniMap[\"iconNpc\"]);\n \n-\t\tposition.shift_y(-Constants::VIEWYOFFSET);\n+\t\t//position.shift_y(-Constants::VIEWYOFFSET);", "path": "IO/UITypes/UIMiniMap.cpp", "position": 14, "original_position": 14, "commit_id": "81235edc188b3e57343049182b647940f1a5d827", "original_commit_id": "81235edc188b3e57343049182b647940f1a5d827", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Uncomment this", "created_at": "2019-12-08T15:49:31Z", "updated_at": "2019-12-08T15:51:09Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/23#discussion_r355195652", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/355195652"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/23#discussion_r355195652"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23", "id": 349706312, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5NzA2MzEy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/23", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/23.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/23.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23", "number": 23, "state": "open", "locked": false, "title": "MiniMap tooltips on hover", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Small addition requested by Ryan. Adds tooltips displaying an NPC's name or a portal's destination name when their corresponding markers are hovered over on the MiniMap.\r\n\r\n### Changes to files outside MiniMap.h/.cpp  \r\n- **TextTooltip.cpp**: Added condition to shrink frame cover by half to make it fit a one-liner tooltip; centered text label on one-liner tooltips\r\n\r\n### Notes  \r\n- Current official client also displays a list of NPCs on the next map on portal marker hover, and NPC functions on NPC marker hover. They both require a line separator which isn't implemented in Texttooltip yet, and portal tooltip requires icons that I haven't found yet.", "created_at": "2019-12-06T00:19:52Z", "updated_at": "2019-12-08T15:51:09Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "67067a7aa7154bbf1a31832557967d7c6d91e37b", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/81235edc188b3e57343049182b647940f1a5d827", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "81235edc188b3e57343049182b647940f1a5d827", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-06T00:19:53Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11202, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 14, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 14, "watchers": 54, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-06T00:19:53Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11202, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 14, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 14, "watchers": 54, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/23"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/81235edc188b3e57343049182b647940f1a5d827"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-08T15:49:31Z"}, {"id": "11038727064", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/355195669", "pull_request_review_id": 328616497, "id": 355195669, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE5NTY2OQ==", "diff_hunk": "@@ -189,8 +202,49 @@ namespace ms\n \t\t\t{\n \t\t\t\tint16_t clicked_item = listNpc_offset + clicked_point.y() / listNpc_item_height;\n \t\t\t\tselect_npclist(clicked_item < listNpc_names.size() ? clicked_item :  -1);\n+\n+\t\t\t\treturn Cursor::State::IDLE;\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tbool found = false;\n+\n+\t\tauto Npcs = Stage::get().get_npcs().get_npcs();\n+\t\tfor (auto npc = Npcs->begin(); npc != Npcs->end(); npc++)\n+\t\t{\n+\t\t\tPoint<int16_t> npc_pos = (npc->second->get_position() + center_offset) / scale + Point<int16_t>(map_draw_origin_x, map_draw_origin_y);\n+\t\t\tRectangle<int16_t> marker_spot(npc_pos - Point<int16_t>(4, 8), npc_pos);\n+\t\t\tif (type == Type::MAX)\n+\t\t\t\tmarker_spot.shift(Point<int16_t>(0, max_adj));\n+\t\t\tif (marker_spot.contains(cursor_relative))\n+\t\t\t{\n+\t\t\t\tfound = true;\n+\t\t\t\thover_tooltip.set_text(static_cast<Npc*>(npc->second.get())->get_name());\n+\t\t\t\ttooltip_pos = cursorpos + 24;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif (!found)\n+\t\t{\n+\t\t\tfor (auto sprite : static_marker_info)\n+\t\t\t{\n+\t\t\t\tRectangle<int16_t> marker_spot(sprite.second, sprite.second + 8);\n+\t\t\t\tif (type == Type::MAX)\n+\t\t\t\t\tmarker_spot.shift(Point<int16_t>(0, max_adj));\n+\t\t\t\tstd::cout << \"Cursor: \" << cursor_relative.to_string() << std::flush << \"\\r\";", "path": "IO/UITypes/UIMiniMap.cpp", "position": 113, "original_position": 113, "commit_id": "81235edc188b3e57343049182b647940f1a5d827", "original_commit_id": "81235edc188b3e57343049182b647940f1a5d827", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Remove this line", "created_at": "2019-12-08T15:49:47Z", "updated_at": "2019-12-08T15:51:09Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/23#discussion_r355195669", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/355195669"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/23#discussion_r355195669"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23", "id": 349706312, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5NzA2MzEy", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/23", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/23.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/23.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23", "number": 23, "state": "open", "locked": false, "title": "MiniMap tooltips on hover", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Small addition requested by Ryan. Adds tooltips displaying an NPC's name or a portal's destination name when their corresponding markers are hovered over on the MiniMap.\r\n\r\n### Changes to files outside MiniMap.h/.cpp  \r\n- **TextTooltip.cpp**: Added condition to shrink frame cover by half to make it fit a one-liner tooltip; centered text label on one-liner tooltips\r\n\r\n### Notes  \r\n- Current official client also displays a list of NPCs on the next map on portal marker hover, and NPC functions on NPC marker hover. They both require a line separator which isn't implemented in Texttooltip yet, and portal tooltip requires icons that I haven't found yet.", "created_at": "2019-12-06T00:19:52Z", "updated_at": "2019-12-08T15:51:09Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "67067a7aa7154bbf1a31832557967d7c6d91e37b", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/81235edc188b3e57343049182b647940f1a5d827", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "81235edc188b3e57343049182b647940f1a5d827", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-06T00:19:53Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11202, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 14, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 14, "watchers": 54, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-04T02:25:21Z", "pushed_at": "2019-12-06T00:19:53Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11202, "stargazers_count": 54, "watchers_count": 54, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 14, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 14, "watchers": 54, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/23"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/23/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/23/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/81235edc188b3e57343049182b647940f1a5d827"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-08T15:49:47Z"}, {"id": "11000599812", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4349477730, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "before": "bcc6671fee09aebe8d1c250f243d351788b02773", "commits": [{"sha": "3121388e036d86fb0a6f1345d93c63dc8b93a0d7", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Updated README for fix #12", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/3121388e036d86fb0a6f1345d93c63dc8b93a0d7"}]}, "public": true, "created_at": "2019-12-03T15:09:45Z"}, {"id": "10982680097", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/18", "id": 530549722, "node_id": "MDU6SXNzdWU1MzA1NDk3MjI=", "number": 18, "title": "\"x\" button misaligned in toolbar of all UI windows", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-30T08:24:35Z", "updated_at": "2019-12-01T09:37:31Z", "closed_at": "2019-12-01T09:37:30Z", "author_association": "NONE", "body": "Title. Be sure to use any native offset values in UI.wz, where available.\r\n\r\n**Repro steps:**\r\n1. open up any ui window, e.g. skills, abilities, key config\r\n\r\n![image](https://user-images.githubusercontent.com/58151192/69897962-dc0de200-1320-11ea-9081-1fc552b82373.png)\r\n"}}, "public": true, "created_at": "2019-12-01T09:37:31Z"}, {"id": "10982680088", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/18", "id": 530549722, "node_id": "MDU6SXNzdWU1MzA1NDk3MjI=", "number": 18, "title": "\"x\" button misaligned in toolbar of all UI windows", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-30T08:24:35Z", "updated_at": "2019-12-01T09:37:30Z", "closed_at": "2019-12-01T09:37:30Z", "author_association": "NONE", "body": "Title. Be sure to use any native offset values in UI.wz, where available.\r\n\r\n**Repro steps:**\r\n1. open up any ui window, e.g. skills, abilities, key config\r\n\r\n![image](https://user-images.githubusercontent.com/58151192/69897962-dc0de200-1320-11ea-9081-1fc552b82373.png)\r\n"}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/560082721", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/18#issuecomment-560082721", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18", "id": 560082721, "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDA4MjcyMQ==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-12-01T09:37:30Z", "updated_at": "2019-12-01T09:37:30Z", "author_association": "OWNER", "body": "Quick easy fix, button changed from BtClose to BtClose3. Also the origin was shifted three pixels to the left and up. Fixed all references."}}, "public": true, "created_at": "2019-12-01T09:37:31Z"}, {"id": "10982677777", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4339976181, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "bcc6671fee09aebe8d1c250f243d351788b02773", "before": "10e0d713baa6f80243e2067401b878e68412851b", "commits": [{"sha": "bcc6671fee09aebe8d1c250f243d351788b02773", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Fixed Issue #18\n- Changed button being referenced\n- Moved all buttons left + up 6 pixels", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/bcc6671fee09aebe8d1c250f243d351788b02773"}]}, "public": true, "created_at": "2019-12-01T09:36:19Z"}, {"id": "10982619620", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176825323, "name": "ryantpayton/NoLifeNx", "url": "https://api.github.com/repos/ryantpayton/NoLifeNx"}, "payload": {"push_id": 4339940971, "size": 1, "distinct_size": 1, "ref": "refs/heads/update", "head": "fbb67df08998af0876296a7768d40652bc89c811", "before": "c74c9f87164cac5e197fbeb8095b758e7b6c8db8", "commits": [{"sha": "fbb67df08998af0876296a7768d40652bc89c811", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Added two new map files to reference different version map.nx files", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/NoLifeNx/commits/fbb67df08998af0876296a7768d40652bc89c811"}]}, "public": true, "created_at": "2019-12-01T09:08:59Z"}, {"id": "10982618177", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 174429048, "name": "ryantpayton/MapleStory", "url": "https://api.github.com/repos/ryantpayton/MapleStory"}, "payload": {"push_id": 4339940055, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "3560ae4a106a2e844e506022760e5bdffc9d766b", "before": "85d94c0708eecddbd1aa91007c76adc9f6bad2bb", "commits": [{"sha": "3560ae4a106a2e844e506022760e5bdffc9d766b", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Changed world names to match client updates to match current GMS (v209.2)", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/MapleStory/commits/3560ae4a106a2e844e506022760e5bdffc9d766b"}]}, "public": true, "created_at": "2019-12-01T09:08:12Z"}, {"id": "10982613274", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/12", "id": 530470907, "node_id": "MDU6SXNzdWU1MzA0NzA5MDc=", "number": 12, "title": "World buttons misaligned in World Select screen", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-29T19:37:41Z", "updated_at": "2019-12-01T09:05:44Z", "closed_at": "2019-12-01T09:05:44Z", "author_association": "NONE", "body": "See \"Scania\" button at upper right. Use coded offsets in UI.wz, where available.\r\n\r\n![image](https://user-images.githubusercontent.com/58151192/69887593-c0b9bd00-12b5-11ea-9ecc-ed8123c89beb.png)\r\n"}}, "public": true, "created_at": "2019-12-01T09:05:45Z"}, {"id": "10982612049", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4339936131, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "10e0d713baa6f80243e2067401b878e68412851b", "before": "2930696a1ae96f725c09bb82c6d1e751abc119cd", "commits": [{"sha": "10e0d713baa6f80243e2067401b878e68412851b", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Fixed Issue #12\n- Updated UIWorldSelect to match current GMS (v209.2)\n- Added temporary code for EU server switch (UIRegion)\n- Adjusted version and frame for login screens\n- Updated nx to include two maps from different versions, updated references", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/10e0d713baa6f80243e2067401b878e68412851b"}]}, "public": true, "created_at": "2019-12-01T09:05:11Z"}, {"id": "10982139893", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4339639469, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "2930696a1ae96f725c09bb82c6d1e751abc119cd", "before": "0fd4c3e837f86530f71baa17868a1f240e8c8846", "commits": [{"sha": "2930696a1ae96f725c09bb82c6d1e751abc119cd", "author": {"email": "nansonyzzheng@gmail.com", "name": "Nanson Zheng"}, "message": "NPC List on Minimap (#22)\n\n* Add NPC list window and its functions\r\n\r\nAdd get method for NPC name and function\r\n\r\nRe-add map ID instance variable to Stage\r\n\r\nMake Animation draw param names consistent\r\n\r\n* Update UIMiniMap.cpp", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/2930696a1ae96f725c09bb82c6d1e751abc119cd"}]}, "public": true, "created_at": "2019-12-01T04:46:59Z"}, {"id": "10982139890", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "minimap", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-12-01T04:46:58Z"}, {"id": "10982139876", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 22, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "id": 347273887, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjczODg3", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/22.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/22.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22", "number": 22, "state": "closed", "locked": false, "title": "NPC List on Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Adds an NPC list to the MiniMap window.  \r\n\r\n### Features  \r\n- Click on an NPC name to get an arrow pointing at their marker/location. Click again to deselect  \r\n- Scroll bar when number of NPCs exceeds maximum showed  \r\n\r\n### Changes to Files not UIMiniMap.h/.cpp  \r\n- **Npc.h/.cpp**: Added getters for NPC names and functions to print onto the list  \r\n- **Stage.h/.cpp**: Re-added Map ID as an instance variable to synchronize NPC list read with map change, also fixes a bug where MiniMap's canvas isn't updated when using GM command !goto  \r\n- **Animation.h**: Changed parameter name to be consistent with **Animation.cpp**\r\n\r\n### Notes\r\n- By UIElement's design, you can use the scroll wheel to scroll the list while pointing at anywhere. This may be an issue in the future where multiple windows are scrolled at once, or one window 'snatches' the scroll away.\r\n- There are slight visual differences between this implementation and that of the official client.\r\n- I am shelving the scrolling map feature for now, as it is quite a ways beyond my knowledge. I'll be moving on to the ghost monsters issue.\r\n\r\n![image](https://user-images.githubusercontent.com/14435972/69907777-e3c59900-13a9-11ea-9269-037ab68ef4b6.png)", "created_at": "2019-12-01T00:41:58Z", "updated_at": "2019-12-01T04:46:57Z", "closed_at": "2019-12-01T04:46:57Z", "merged_at": "2019-12-01T04:46:57Z", "merge_commit_sha": "2930696a1ae96f725c09bb82c6d1e751abc119cd", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/73705b6c99c750128e6ed42189604f5bc844b081", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "73705b6c99c750128e6ed42189604f5bc844b081", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T04:46:57Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 52, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "0fd4c3e837f86530f71baa17868a1f240e8c8846", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T04:46:57Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 15, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 15, "watchers": 52, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/73705b6c99c750128e6ed42189604f5bc844b081"}}, "author_association": "COLLABORATOR", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 0, "review_comments": 6, "maintainer_can_modify": false, "commits": 3, "additions": 292, "deletions": 9, "changed_files": 7}}, "public": true, "created_at": "2019-12-01T04:46:58Z"}, {"id": "10982095829", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318792", "pull_request_review_id": 324919418, "id": 352318792, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMxODc5Mg==", "diff_hunk": "@@ -48,8 +52,9 @@ namespace ms\n \t\tmarker = Setting<MiniMapDefaultHelpers>::get().load() ? nl::nx::ui[\"UIWindow2.img\"][\"MiniMapSimpleMode\"][\"DefaultHelper\"] : nl::nx::map[\"MapHelper.img\"][\"minimap\"];\n \n \t\tplayer_marker = Animation(marker[\"user\"]);\n+\t\tselected_marker = Animation(MiniMap[\"iconNpc\"]);\n \n-\t\tposition.shift_y(-Constants::VIEWYOFFSET);\n+\t\t//position.shift_y(-Constants::VIEWYOFFSET);", "path": "IO/UITypes/UIMiniMap.cpp", "position": 30, "original_position": 30, "commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "original_commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Add this back in and then you can comment this out during testing. Should still be able to drag it, just a little harder. Eventually we'll refactor the code to fix the YOFFSET in Constants.", "created_at": "2019-12-01T04:19:39Z", "updated_at": "2019-12-01T04:21:55Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318792", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318792"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318792"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "id": 347273887, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjczODg3", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/22.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/22.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22", "number": 22, "state": "open", "locked": false, "title": "NPC List on Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Adds an NPC list to the MiniMap window.  \r\n\r\n### Features  \r\n- Click on an NPC name to get an arrow pointing at their marker/location. Click again to deselect  \r\n- Scroll bar when number of NPCs exceeds maximum showed  \r\n\r\n### Changes to Files not UIMiniMap.h/.cpp  \r\n- **Npc.h/.cpp**: Added getters for NPC names and functions to print onto the list  \r\n- **Stage.h/.cpp**: Re-added Map ID as an instance variable to synchronize NPC list read with map change, also fixes a bug where MiniMap's canvas isn't updated when using GM command !goto  \r\n- **Animation.h**: Changed parameter name to be consistent with **Animation.cpp**\r\n\r\n### Notes\r\n- By UIElement's design, you can use the scroll wheel to scroll the list while pointing at anywhere. This may be an issue in the future where multiple windows are scrolled at once, or one window 'snatches' the scroll away.\r\n- There are slight visual differences between this implementation and that of the official client.\r\n- I am shelving the scrolling map feature for now, as it is quite a ways beyond my knowledge. I'll be moving on to the ghost monsters issue.\r\n\r\n![image](https://user-images.githubusercontent.com/14435972/69907777-e3c59900-13a9-11ea-9269-037ab68ef4b6.png)", "created_at": "2019-12-01T00:41:58Z", "updated_at": "2019-12-01T04:21:54Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "d70f4e708af2637e5cef3e766d2aff193952cc5b", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "0fd4c3e837f86530f71baa17868a1f240e8c8846", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-01T04:19:39Z"}, {"id": "10982095828", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318831", "pull_request_review_id": 324919418, "id": 352318831, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMxODgzMQ==", "diff_hunk": "@@ -96,7 +110,7 @@ namespace ms\n \n \tvoid UIMiniMap::update()\n \t{\n-\t\tint32_t mid = stats.get_mapid();", "path": "IO/UITypes/UIMiniMap.cpp", "position": 61, "original_position": 61, "commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "original_commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Should we remove mapid from stats since the mapid from stage seems to update properly?", "created_at": "2019-12-01T04:20:21Z", "updated_at": "2019-12-01T04:21:55Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318831", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318831"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318831"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "id": 347273887, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjczODg3", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/22.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/22.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22", "number": 22, "state": "open", "locked": false, "title": "NPC List on Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Adds an NPC list to the MiniMap window.  \r\n\r\n### Features  \r\n- Click on an NPC name to get an arrow pointing at their marker/location. Click again to deselect  \r\n- Scroll bar when number of NPCs exceeds maximum showed  \r\n\r\n### Changes to Files not UIMiniMap.h/.cpp  \r\n- **Npc.h/.cpp**: Added getters for NPC names and functions to print onto the list  \r\n- **Stage.h/.cpp**: Re-added Map ID as an instance variable to synchronize NPC list read with map change, also fixes a bug where MiniMap's canvas isn't updated when using GM command !goto  \r\n- **Animation.h**: Changed parameter name to be consistent with **Animation.cpp**\r\n\r\n### Notes\r\n- By UIElement's design, you can use the scroll wheel to scroll the list while pointing at anywhere. This may be an issue in the future where multiple windows are scrolled at once, or one window 'snatches' the scroll away.\r\n- There are slight visual differences between this implementation and that of the official client.\r\n- I am shelving the scrolling map feature for now, as it is quite a ways beyond my knowledge. I'll be moving on to the ghost monsters issue.\r\n\r\n![image](https://user-images.githubusercontent.com/14435972/69907777-e3c59900-13a9-11ea-9269-037ab68ef4b6.png)", "created_at": "2019-12-01T00:41:58Z", "updated_at": "2019-12-01T04:21:54Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "d70f4e708af2637e5cef3e766d2aff193952cc5b", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "0fd4c3e837f86530f71baa17868a1f240e8c8846", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-01T04:20:21Z"}, {"id": "10982095821", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318760", "pull_request_review_id": 324919418, "id": 352318760, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMxODc2MA==", "diff_hunk": "@@ -173,6 +234,7 @@ namespace ms\n \t\t\tbreak;\n \t\tcase BT_NPC:\n \t\t\t// TODO: make NPC submenu", "path": "IO/UITypes/UIMiniMap.cpp", "position": 133, "original_position": 133, "commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "original_commit_id": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Remove TODO ;)", "created_at": "2019-12-01T04:18:20Z", "updated_at": "2019-12-01T04:21:54Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318760", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/352318760"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22#discussion_r352318760"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22", "id": 347273887, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjczODg3", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/22", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/22.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/22.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22", "number": 22, "state": "open", "locked": false, "title": "NPC List on Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "Adds an NPC list to the MiniMap window.  \r\n\r\n### Features  \r\n- Click on an NPC name to get an arrow pointing at their marker/location. Click again to deselect  \r\n- Scroll bar when number of NPCs exceeds maximum showed  \r\n\r\n### Changes to Files not UIMiniMap.h/.cpp  \r\n- **Npc.h/.cpp**: Added getters for NPC names and functions to print onto the list  \r\n- **Stage.h/.cpp**: Re-added Map ID as an instance variable to synchronize NPC list read with map change, also fixes a bug where MiniMap's canvas isn't updated when using GM command !goto  \r\n- **Animation.h**: Changed parameter name to be consistent with **Animation.cpp**\r\n\r\n### Notes\r\n- By UIElement's design, you can use the scroll wheel to scroll the list while pointing at anywhere. This may be an issue in the future where multiple windows are scrolled at once, or one window 'snatches' the scroll away.\r\n- There are slight visual differences between this implementation and that of the official client.\r\n- I am shelving the scrolling map feature for now, as it is quite a ways beyond my knowledge. I'll be moving on to the ghost monsters issue.\r\n\r\n![image](https://user-images.githubusercontent.com/14435972/69907777-e3c59900-13a9-11ea-9269-037ab68ef4b6.png)", "created_at": "2019-12-01T00:41:58Z", "updated_at": "2019-12-01T04:21:54Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "d70f4e708af2637e5cef3e766d2aff193952cc5b", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "ad7f277ee4125de068d1fa386ce271b8bd111ac0", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "0fd4c3e837f86530f71baa17868a1f240e8c8846", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-30T20:09:09Z", "pushed_at": "2019-12-01T00:41:59Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11445, "stargazers_count": 52, "watchers_count": 52, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 16, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 16, "watchers": 52, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/22"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/22/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/22/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/ad7f277ee4125de068d1fa386ce271b8bd111ac0"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-12-01T04:18:20Z"}, {"id": "10981185882", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/12", "id": 530470907, "node_id": "MDU6SXNzdWU1MzA0NzA5MDc=", "number": 12, "title": "World buttons misaligned in World Select screen", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-29T19:37:41Z", "updated_at": "2019-11-30T19:48:57Z", "closed_at": null, "author_association": "NONE", "body": "See \"Scania\" button at upper right. Use coded offsets in UI.wz, where available.\r\n\r\n![image](https://user-images.githubusercontent.com/58151192/69887593-c0b9bd00-12b5-11ea-9ecc-ed8123c89beb.png)\r\n"}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/560015685", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/12#issuecomment-560015685", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/12", "id": 560015685, "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDAxNTY4NQ==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-30T19:48:57Z", "updated_at": "2019-11-30T19:48:57Z", "author_association": "OWNER", "body": "I think this is similar to #18. Mine looks perfect. Can you double check your UI.nx? What version are you using? I am always running latest UI.nx"}}, "public": true, "created_at": "2019-11-30T19:48:57Z"}, {"id": "10981181471", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/16", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/16/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/16/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/16", "id": 530546335, "node_id": "MDU6SXNzdWU1MzA1NDYzMzU=", "number": 16, "title": "Not yet repro'd: Power Strike creates duplicate of character model", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-30T07:44:43Z", "updated_at": "2019-11-30T19:46:48Z", "closed_at": null, "author_association": "NONE", "body": "```NOTE: Consider removing this ticket if this issue is not common / reproducible```\r\n\r\nAfter becoming a warrior and getting the Power Strike command, somehow I managed to spawn a duplicate version of my character that remained underneath me. The character did not move and despawned once I left `Dances with Balrog`'s sanctuary and re-entered. I would imagine the spawned character was only visible client-side, but I cannot confirm this.\r\n\r\nRepro steps (only done once):\r\n1. level up via the GM \"!level 10\" command\r\n1. assign ap via the GM \"!ap 100\" command\r\n1. assign 35 points to STR to become eligible to become a warrior\r\n1. become a warrior at `Warriors' Santuary, Victoria Road` by talking with `Dances with Balrog`. \r\n1. immediately level up `Power Strike` in the skills menu\r\n1. activate a single `Power Strike` by double-clicking the skill in the skills menu"}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/560015538", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/16#issuecomment-560015538", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/16", "id": 560015538, "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDAxNTUzOA==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-30T19:46:48Z", "updated_at": "2019-11-30T19:46:48Z", "author_association": "OWNER", "body": "I've seen this before and although I can't confirm what caused it. I did have another client running and it that client could not see the duplicated character."}}, "public": true, "created_at": "2019-11-30T19:46:48Z"}, {"id": "10981176679", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/18", "id": 530549722, "node_id": "MDU6SXNzdWU1MzA1NDk3MjI=", "number": 18, "title": "\"x\" button misaligned in toolbar of all UI windows", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-30T08:24:35Z", "updated_at": "2019-11-30T19:44:36Z", "closed_at": null, "author_association": "NONE", "body": "Title. Be sure to use any native offset values in UI.wz, where available.\r\n\r\n**Repro steps:**\r\n1. open up any ui window, e.g. skills, abilities, key config\r\n\r\n![image](https://user-images.githubusercontent.com/58151192/69897962-dc0de200-1320-11ea-9081-1fc552b82373.png)\r\n"}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/560015415", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/18#issuecomment-560015415", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/18", "id": 560015415, "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDAxNTQxNQ==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-30T19:44:36Z", "updated_at": "2019-11-30T19:44:36Z", "author_association": "OWNER", "body": "Double check your wz files. The close button looks completely different than what mine looks like. Also the position for the button is almost always referenced from the wz file, although Nexon doesn't always use this position. Sometimes it needs adjusted by 1 or 2 pixels on the x and/or y."}}, "public": true, "created_at": "2019-11-30T19:44:36Z"}, {"id": "10971464772", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4333350965, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "67d8498ff17eca8020240a8a384ac985cc041f27", "before": "f90aa1d33d7258f6ee6965d1643c0fd752d1b10d", "commits": [{"sha": "67d8498ff17eca8020240a8a384ac985cc041f27", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Cleanup for UIMiniMap\nFix scrolling notice to be below the stage\nFixed UISkillbook book name too short", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/67d8498ff17eca8020240a8a384ac985cc041f27"}]}, "public": true, "created_at": "2019-11-28T19:13:13Z"}, {"id": "10970579263", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4332856626, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "f90aa1d33d7258f6ee6965d1643c0fd752d1b10d", "before": "aec2e299f2439b07df8f8c788d307827f1d96f5a", "commits": [{"sha": "f90aa1d33d7258f6ee6965d1643c0fd752d1b10d", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Missed file for UIEquipInventory changes (42b1e91)", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/f90aa1d33d7258f6ee6965d1643c0fd752d1b10d"}]}, "public": true, "created_at": "2019-11-28T16:18:31Z"}, {"id": "10966486820", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330684296, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "aec2e299f2439b07df8f8c788d307827f1d96f5a", "before": "e0552b4826de2ed2db5787b754208521b9d5f0f8", "commits": [{"sha": "aec2e299f2439b07df8f8c788d307827f1d96f5a", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Reverted level cap back to v83", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/aec2e299f2439b07df8f8c788d307827f1d96f5a"}]}, "public": true, "created_at": "2019-11-28T07:10:29Z"}, {"id": "10966430389", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330654433, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "e0552b4826de2ed2db5787b754208521b9d5f0f8", "before": "42b1e913557f11cee38de1fbae55b54837aaa598", "commits": [{"sha": "e0552b4826de2ed2db5787b754208521b9d5f0f8", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Added auto login feature for debugging", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/e0552b4826de2ed2db5787b754208521b9d5f0f8"}]}, "public": true, "created_at": "2019-11-28T06:59:59Z"}, {"id": "10966182239", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330520120, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "42b1e913557f11cee38de1fbae55b54837aaa598", "before": "9dc990b6042ea1fe0cfa3bc2b21212bf6d88554b", "commits": [{"sha": "42b1e913557f11cee38de1fbae55b54837aaa598", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "UIEquipInventory changes\n- Renamed Equip names to match current GMS (v209.2)\n- Equip tooltip fixes", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/42b1e913557f11cee38de1fbae55b54837aaa598"}]}, "public": true, "created_at": "2019-11-28T06:09:21Z"}, {"id": "10966099284", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/3", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/3/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/3/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/3", "id": 527766101, "node_id": "MDU6SXNzdWU1Mjc3NjYxMDE=", "number": 3, "title": "Action remains selected once moved to a new key in key config window", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-24T22:18:12Z", "updated_at": "2019-11-28T05:50:30Z", "closed_at": null, "author_association": "NONE", "body": "It seems like sometimes when remapping keys, once you register the key, it's still held by your cursor. The behavior isn't consistent and sometimes works correctly. Maybe it's an issue with a using a \"mousehelddown\" command being used instead of a \"mouseonclick\" command or some other timing issue.\r\n\r\nTo better explain, consider the scenario:\r\n1. Player opens up Key Config in game. `Jump` button is on `alt`\r\n1. Player clicks left `alt` to select the `Jump` block.\r\n1. Player places `Jump` block on `Spacebar`.\r\n1. `Jump` is registered to `Spacebar`. Player's cursor still has `Jump` selected."}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/559351973", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/3#issuecomment-559351973", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/3", "id": 559351973, "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTM1MTk3Mw==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-28T05:50:30Z", "updated_at": "2019-11-28T05:50:30Z", "author_association": "OWNER", "body": "I've seen this before. This is in `UIKeyConfig.cpp` in the `send_cursor` method."}}, "public": true, "created_at": "2019-11-28T05:50:30Z"}, {"id": "10966086609", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330469337, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "9dc990b6042ea1fe0cfa3bc2b21212bf6d88554b", "before": "d08076f5802c7c61c80ef7a93804175a208ea7b9", "commits": [{"sha": "9dc990b6042ea1fe0cfa3bc2b21212bf6d88554b", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Added ability to show incoming packets from the server", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/9dc990b6042ea1fe0cfa3bc2b21212bf6d88554b"}]}, "public": true, "created_at": "2019-11-28T05:47:31Z"}, {"id": "10966022200", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330433701, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "d08076f5802c7c61c80ef7a93804175a208ea7b9", "before": "b250fa8d17b40dc0fa957a442f967b35e9f597ce", "commits": [{"sha": "d08076f5802c7c61c80ef7a93804175a208ea7b9", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "UIKeyConfig Fixes:\n- Fix for ESC not asking to save changes\n- Fix for buttons having IDLE cursor\n- Fix for windows not closing properly on ESC", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/d08076f5802c7c61c80ef7a93804175a208ea7b9"}]}, "public": true, "created_at": "2019-11-28T05:31:51Z"}, {"id": "10965417802", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4330098020, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "b250fa8d17b40dc0fa957a442f967b35e9f597ce", "before": "39010bb15c35f59d17c40c13d5d6baa09711444f", "commits": [{"sha": "b250fa8d17b40dc0fa957a442f967b35e9f597ce", "author": {"email": "58151192+SomeMushroom@users.noreply.github.com", "name": "SomeMushroom"}, "message": "Prompt for save on keyconfig close (#6)", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/b250fa8d17b40dc0fa957a442f967b35e9f597ce"}]}, "public": true, "created_at": "2019-11-28T02:48:51Z"}, {"id": "10965417743", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 6, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6", "id": 345315465, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MzE1NDY1", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/6", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/6.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/6.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/6", "number": 6, "state": "closed", "locked": false, "title": "Prompt for save on keyconfig close", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "body": "Resolves: https://github.com/ryantpayton/HeavenClient/issues/4:\r\n\r\n> It's possible for a player to rearrange their key configurations and exit the window without first saving their new config.\r\n\r\n- Move save logic into its own function\r\n- Add logic for \"ok\" UI element on cancel\r\n- Cleanup switch statement", "created_at": "2019-11-25T16:47:55Z", "updated_at": "2019-11-28T02:48:49Z", "closed_at": "2019-11-28T02:48:49Z", "merged_at": "2019-11-28T02:48:49Z", "merge_commit_sha": "b250fa8d17b40dc0fa957a442f967b35e9f597ce", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/6/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4e77a026efc700fc59d1f3f5ae1c2f2cf7b1047d", "head": {"label": "SomeMushroom:feat_keyconfig_cancel_and_save", "ref": "feat_keyconfig_cancel_and_save", "sha": "4e77a026efc700fc59d1f3f5ae1c2f2cf7b1047d", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "repo": {"id": 223996487, "node_id": "MDEwOlJlcG9zaXRvcnkyMjM5OTY0ODc=", "name": "HeavenClient", "full_name": "SomeMushroom/HeavenClient", "private": false, "owner": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/SomeMushroom/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/SomeMushroom/HeavenClient", "forks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/forks", "keys_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/events", "assignees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/merges", "archive_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/SomeMushroom/HeavenClient/deployments", "created_at": "2019-11-25T16:44:44Z", "updated_at": "2019-11-25T16:44:46Z", "pushed_at": "2019-11-25T16:45:22Z", "git_url": "git://github.com/SomeMushroom/HeavenClient.git", "ssh_url": "git@github.com:SomeMushroom/HeavenClient.git", "clone_url": "https://github.com/SomeMushroom/HeavenClient.git", "svn_url": "https://github.com/SomeMushroom/HeavenClient", "homepage": "", "size": 11281, "stargazers_count": 0, "watchers_count": 0, "language": null, "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-28T02:38:06Z", "pushed_at": "2019-11-28T02:48:49Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11302, "stargazers_count": 50, "watchers_count": 50, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 3, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 3, "watchers": 50, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/6"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/6"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/6/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/6/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/4e77a026efc700fc59d1f3f5ae1c2f2cf7b1047d"}}, "author_association": "NONE", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 0, "maintainer_can_modify": false, "commits": 1, "additions": 74, "deletions": 57, "changed_files": 2}}, "public": true, "created_at": "2019-11-28T02:48:50Z"}, {"id": "10965417722", "type": "IssuesEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/4", "id": 527766582, "node_id": "MDU6SXNzdWU1Mjc3NjY1ODI=", "number": 4, "title": "Key config window does not warn user to save config before exiting", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-24T22:22:16Z", "updated_at": "2019-11-28T02:48:49Z", "closed_at": "2019-11-28T02:48:49Z", "author_association": "NONE", "body": "It's possible for a player to rearrange their key configurations and exit the window without first saving their new config.\r\n\r\nRepro steps:\r\n1. Open key config\r\n1. Move 1 action from its current key to a new key\r\n1. Close the key config window via the \"x\" in the toolbar.\r\n1. Open key config window. Action will be on original key.\r\n\r\nWhile this is correct behavior (in that closing the window does not automatically save the new config) it would be better to warn the player with a dialogue box if they have unsaved changes before allowing them to close the key config window. This is also the behavior in GMS, so resolving this issue gets us feature parity."}}, "public": true, "created_at": "2019-11-28T02:48:50Z"}, {"id": "10952010096", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 67042725, "name": "SYJourney/JourneyClient", "url": "https://api.github.com/repos/SYJourney/JourneyClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/2", "repository_url": "https://api.github.com/repos/SYJourney/JourneyClient", "labels_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/2/comments", "events_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/2/events", "html_url": "https://github.com/SYJourney/JourneyClient/pull/2", "id": 209689844, "node_id": "MDExOlB1bGxSZXF1ZXN0MTA3NTczMDIx", "number": 2, "title": "fix a bug", "user": {"login": "flwmxd", "id": 16490863, "node_id": "MDQ6VXNlcjE2NDkwODYz", "avatar_url": "https://avatars3.githubusercontent.com/u/16490863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flwmxd", "html_url": "https://github.com/flwmxd", "followers_url": "https://api.github.com/users/flwmxd/followers", "following_url": "https://api.github.com/users/flwmxd/following{/other_user}", "gists_url": "https://api.github.com/users/flwmxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/flwmxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flwmxd/subscriptions", "organizations_url": "https://api.github.com/users/flwmxd/orgs", "repos_url": "https://api.github.com/users/flwmxd/repos", "events_url": "https://api.github.com/users/flwmxd/events{/privacy}", "received_events_url": "https://api.github.com/users/flwmxd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-23T08:00:06Z", "updated_at": "2019-11-26T15:44:32Z", "closed_at": null, "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/SYJourney/JourneyClient/pulls/2", "html_url": "https://github.com/SYJourney/JourneyClient/pull/2", "diff_url": "https://github.com/SYJourney/JourneyClient/pull/2.diff", "patch_url": "https://github.com/SYJourney/JourneyClient/pull/2.patch"}, "body": "fix character will jump out of some map .When character jump , it can`t find a foothold that means phobj.fhid == 0,then char can`t collide other tile.so it will jump out of the map. you test in 104010000 ."}, "comment": {"url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/comments/558689295", "html_url": "https://github.com/SYJourney/JourneyClient/pull/2#issuecomment-558689295", "issue_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/2", "id": 558689295, "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY4OTI5NQ==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-26T15:44:32Z", "updated_at": "2019-11-26T15:44:32Z", "author_association": "NONE", "body": "I fixed this bug in the project I forked from JourneyClient's project:\r\nhttps://github.com/ryantpayton/HeavenClient"}}, "public": true, "created_at": "2019-11-26T15:44:32Z"}, {"id": "10952000092", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 67042725, "name": "SYJourney/JourneyClient", "url": "https://api.github.com/repos/SYJourney/JourneyClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/3", "repository_url": "https://api.github.com/repos/SYJourney/JourneyClient", "labels_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/3/comments", "events_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/3/events", "html_url": "https://github.com/SYJourney/JourneyClient/issues/3", "id": 269306210, "node_id": "MDU6SXNzdWUyNjkzMDYyMTA=", "number": 3, "title": "Project Abandonned !", "user": {"login": "TokyoSU", "id": 27679699, "node_id": "MDQ6VXNlcjI3Njc5Njk5", "avatar_url": "https://avatars2.githubusercontent.com/u/27679699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TokyoSU", "html_url": "https://github.com/TokyoSU", "followers_url": "https://api.github.com/users/TokyoSU/followers", "following_url": "https://api.github.com/users/TokyoSU/following{/other_user}", "gists_url": "https://api.github.com/users/TokyoSU/gists{/gist_id}", "starred_url": "https://api.github.com/users/TokyoSU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TokyoSU/subscriptions", "organizations_url": "https://api.github.com/users/TokyoSU/orgs", "repos_url": "https://api.github.com/users/TokyoSU/repos", "events_url": "https://api.github.com/users/TokyoSU/events{/privacy}", "received_events_url": "https://api.github.com/users/TokyoSU/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-28T10:37:40Z", "updated_at": "2019-11-26T15:43:32Z", "closed_at": null, "author_association": "NONE", "body": "1 Year abandonned,\r\nyou will resume it may be someday ?\r\nIt's a good work :+1: "}, "comment": {"url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/comments/558688862", "html_url": "https://github.com/SYJourney/JourneyClient/issues/3#issuecomment-558688862", "issue_url": "https://api.github.com/repos/SYJourney/JourneyClient/issues/3", "id": 558688862, "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY4ODg2Mg==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-26T15:43:32Z", "updated_at": "2019-11-26T15:43:32Z", "author_association": "NONE", "body": "I picked up this project located here:\r\nhttps://github.com/ryantpayton/HeavenClient"}}, "public": true, "created_at": "2019-11-26T15:43:32Z"}, {"id": "10951979543", "type": "IssueCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "issue": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4", "repository_url": "https://api.github.com/repos/ryantpayton/HeavenClient", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/comments", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4/events", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/4", "id": 527766582, "node_id": "MDU6SXNzdWU1Mjc3NjY1ODI=", "number": 4, "title": "Key config window does not warn user to save config before exiting", "user": {"login": "SomeMushroom", "id": 58151192, "node_id": "MDQ6VXNlcjU4MTUxMTky", "avatar_url": "https://avatars2.githubusercontent.com/u/58151192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeMushroom", "html_url": "https://github.com/SomeMushroom", "followers_url": "https://api.github.com/users/SomeMushroom/followers", "following_url": "https://api.github.com/users/SomeMushroom/following{/other_user}", "gists_url": "https://api.github.com/users/SomeMushroom/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeMushroom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeMushroom/subscriptions", "organizations_url": "https://api.github.com/users/SomeMushroom/orgs", "repos_url": "https://api.github.com/users/SomeMushroom/repos", "events_url": "https://api.github.com/users/SomeMushroom/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeMushroom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-24T22:22:16Z", "updated_at": "2019-11-26T15:41:25Z", "closed_at": null, "author_association": "NONE", "body": "It's possible for a player to rearrange their key configurations and exit the window without first saving their new config.\r\n\r\nRepro steps:\r\n1. Open key config\r\n1. Move 1 action from its current key to a new key\r\n1. Close the key config window via the \"x\" in the toolbar.\r\n1. Open key config window. Action will be on original key.\r\n\r\nWhile this is correct behavior (in that closing the window does not automatically save the new config) it would be better to warn the player with a dialogue box if they have unsaved changes before allowing them to close the key config window. This is also the behavior in GMS, so resolving this issue gets us feature parity."}, "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments/558687931", "html_url": "https://github.com/ryantpayton/HeavenClient/issues/4#issuecomment-558687931", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/4", "id": 558687931, "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY4NzkzMQ==", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "created_at": "2019-11-26T15:41:25Z", "updated_at": "2019-11-26T15:41:25Z", "author_association": "OWNER", "body": "We should be using only UI elements from the latest stable GMS version. In this scenario, v83 would be irrelevant. Same goes for behavior of the screen."}}, "public": true, "created_at": "2019-11-26T15:41:25Z"}, {"id": "10951875044", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4322865853, "size": 16, "distinct_size": 8, "ref": "refs/heads/master", "head": "39010bb15c35f59d17c40c13d5d6baa09711444f", "before": "8b5842d899c90f196bdb8481ced91737eced6060", "commits": [{"sha": "adfc8be573b78fe5ec515184a763926e003f1c5d", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add MiniMap canvas, scaling window\n\nMake Sprite.animation gettable to retrieve canvas dimensions", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/adfc8be573b78fe5ec515184a763926e003f1c5d"}, {"sha": "f9bd090bc6feb6dcdfb2d9eede539a23a0157f72", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add map icons; Refactor\n\nMove code relevant to populating sprite vectors to an update function", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/f9bd090bc6feb6dcdfb2d9eede539a23a0157f72"}, {"sha": "e7c635781630d628474fd3940b26a2822a247fb2", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Make minimap window fully scalable\n\nRefactor code & consolidate variables\n\nChange rendering order", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/e7c635781630d628474fd3940b26a2822a247fb2"}, {"sha": "f0dabcffe98dc2b662e0f7c06794039e15c6526f", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Fix minimap frame overlap\n\nAdd stub for minimap markers\n\nAdd comments for some hard-coded values", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/f0dabcffe98dc2b662e0f7c06794039e15c6526f"}, {"sha": "f0ca608903cab504edb018d48afe6d22ed7915ac", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add Player and NPC MiniMap marker\n\nAdd has_map flag", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/f0ca608903cab504edb018d48afe6d22ed7915ac"}, {"sha": "f66547fd9c0bd0f91b9174c21cc7a42cfe367d7a", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add NPC markers (tentative)\n\nChange MapNpcs to allow iterating", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/f66547fd9c0bd0f91b9174c21cc7a42cfe367d7a"}, {"sha": "333af250becbe534e8fd2d4f0049fc899d5be2c2", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add other player markers (tent.)\n\nChange MapChars to allow iterating\n\nAdd Map ID to Stage's variables\n\nChange UIMiniMap to check map change from Stage", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/333af250becbe534e8fd2d4f0049fc899d5be2c2"}, {"sha": "3247345bd38f8d86736354cd0ebdc859f4b84bba", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Rewrite movable markers to draw directly", "distinct": false, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/3247345bd38f8d86736354cd0ebdc859f4b84bba"}, {"sha": "8fabae35466ab3da7d95814edc2fd83ac1da0853", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Add MiniMap settings to Configuration\n\nRemove unneeded Sprite get Animation method\n\nChange some MiniMap constants to constexpr", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/8fabae35466ab3da7d95814edc2fd83ac1da0853"}, {"sha": "e466daa9f646d7a8c125092291151d2e3022b56d", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Undo FPS check", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/e466daa9f646d7a8c125092291151d2e3022b56d"}, {"sha": "7dea5ce804ff8158fa52c67bee90122ccec5f108", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Make MiniMap window draggable", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/7dea5ce804ff8158fa52c67bee90122ccec5f108"}, {"sha": "93a970df5f427cba82e6594c56e8b82ab209ee1f", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Implement min and max button functions\n\nFix draggable area offset", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/93a970df5f427cba82e6594c56e8b82ab209ee1f"}, {"sha": "2db871a9898de91658d35a6ea28f17257c6f91d5", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Implement World Map button function\n\nRemove unnecessary override", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/2db871a9898de91658d35a6ea28f17257c6f91d5"}, {"sha": "d66a755166116932dda1e8cc2f70f30c40fda5f4", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Make requested changes\n\nAdd TODO to big and small buttons case", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/d66a755166116932dda1e8cc2f70f30c40fda5f4"}, {"sha": "1d59f9c2f0ffbe065c18c1135a8535bd9c84cf75", "author": {"email": "nanson.zheng@mail.utoronto.ca", "name": "nansonzheng"}, "message": "Revert Stage changes, modify MapChars and MapNpcs access\n\nUse MapObjects reference instead of exposing only iterators\n\nSmall adjustment to window in minimapless maps", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/1d59f9c2f0ffbe065c18c1135a8535bd9c84cf75"}, {"sha": "39010bb15c35f59d17c40c13d5d6baa09711444f", "author": {"email": "48335966+ryantpayton@users.noreply.github.com", "name": "ryantpayton"}, "message": "Merge pull request #5 from ryantpayton/minimap\n\nMerged PR from nansonzheng for Minimap implementation", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/39010bb15c35f59d17c40c13d5d6baa09711444f"}]}, "public": true, "created_at": "2019-11-26T15:30:48Z"}, {"id": "10951874815", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "minimap", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-11-26T15:30:47Z"}, {"id": "10951874715", "type": "PullRequestEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "closed", "number": 5, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "id": 345003993, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MDAzOTkz", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/5.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/5.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5", "number": 5, "state": "closed", "locked": false, "title": "Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "MiniMap with basic functions.  \r\n\r\n### Features  \r\n- Draggable window  \r\n- Change between 3 modes: minimized, map only, full size  \r\n- NPCs, portals, other characters and the player shown as markers  \r\n- Shortcut to world map  \r\n\r\n### Not implemented yet  \r\n- Scrolling map  \r\n- List of NPCs on the map  \r\n\r\n### Changes to files not **UIMiniMap.h/.cpp**:  \r\n- **Configuration.h/.cpp**: Add options for initial MiniMap type, Simple Mode, and use of Default Helpers (provided in UI.wz)  \r\n- **MapNpcs.h/.cpp**, **MapChars.h/.cpp**: Add method to iterate through list of NPCs/other player characters.  \r\n- **Stage.h/.cpp**: Add map ID as object variable to synchronize map reads.  \r\n\r\n### Notes/Known Problems:\r\n- Backdrop for the MiniMap is lightly shaded, unlike official client's dark backdrop.  \r\n- Special NPCs, e.g. Quest starters, are not demarcated with their respective markers.  \r\n- Some performance impact is noticed when lots of NPCs are present, e.g. in Henesys. ", "created_at": "2019-11-25T04:01:08Z", "updated_at": "2019-11-26T15:30:46Z", "closed_at": "2019-11-26T15:30:45Z", "merged_at": "2019-11-26T15:30:45Z", "merge_commit_sha": "39010bb15c35f59d17c40c13d5d6baa09711444f", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/1d59f9c2f0ffbe065c18c1135a8535bd9c84cf75", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "1d59f9c2f0ffbe065c18c1135a8535bd9c84cf75", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-26T15:30:46Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11301, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 5, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 5, "watchers": 48, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-26T15:30:46Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11301, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 5, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 5, "watchers": 48, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/1d59f9c2f0ffbe065c18c1135a8535bd9c84cf75"}}, "author_association": "COLLABORATOR", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "comments": 1, "review_comments": 7, "maintainer_can_modify": false, "commits": 15, "additions": 361, "deletions": 118, "changed_files": 8}}, "public": true, "created_at": "2019-11-26T15:30:46Z"}, {"id": "10944818223", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350427480", "pull_request_review_id": 322582712, "id": 350427480, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQyNzQ4MA==", "diff_hunk": "@@ -186,59 +151,115 @@ namespace ms\n \t\ttoggle_buttons();\n \t}\n \n+\tButton::State UIMiniMap::button_pressed(uint16_t buttonid)\n+\t{\n+\t\tswitch (buttonid) {\n+\t\t\tcase BT_MIN:\n+\t\t\t\ttype -= 1;\n+\t\t\t\ttoggle_buttons();\n+\t\t\t\treturn type == Type::MIN ? Button::State::DISABLED : Button::State::NORMAL;\n+\t\t\tcase BT_MAX:\n+\t\t\t\ttype += 1;\n+\t\t\t\ttoggle_buttons();\n+\t\t\t\treturn type == Type::MAX ? Button::State::DISABLED : Button::State::NORMAL;\n+\t\t\t\tbreak;\n+\t\t\tcase BT_SMALL:\n+\t\t\tcase BT_BIG:\n+\t\t\t\tbig_map = !big_map;\n+\t\t\t\ttoggle_buttons();\n+\t\t\t\tbreak;\n+\t\t\tcase BT_MAP:\n+\t\t\t\t// TODO: open world map", "path": "IO/UITypes/UIMiniMap.cpp", "position": 238, "original_position": 238, "commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "original_commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Should we remove this TODO? Looks like you got it implemented.", "created_at": "2019-11-25T21:18:59Z", "updated_at": "2019-11-25T21:24:06Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350427480", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350427480"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350427480"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "id": 345003993, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MDAzOTkz", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/5.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/5.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5", "number": 5, "state": "open", "locked": false, "title": "Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "MiniMap with basic functions.  \r\n\r\n### Features  \r\n- Draggable window  \r\n- Change between 3 modes: minimized, map only, full size  \r\n- NPCs, portals, other characters and the player shown as markers  \r\n- Shortcut to world map  \r\n\r\n### Not implemented yet  \r\n- Scrolling map  \r\n- List of NPCs on the map  \r\n\r\n### Changes to files not **UIMiniMap.h/.cpp**:  \r\n- **Configuration.h/.cpp**: Add options for initial MiniMap type, Simple Mode, and use of Default Helpers (provided in UI.wz)  \r\n- **MapNpcs.h/.cpp**, **MapChars.h/.cpp**: Add method to iterate through list of NPCs/other player characters.  \r\n- **Stage.h/.cpp**: Add map ID as object variable to synchronize map reads.  \r\n\r\n### Notes/Known Problems:\r\n- Backdrop for the MiniMap is lightly shaded, unlike official client's dark backdrop.  \r\n- Special NPCs, e.g. Quest starters, are not demarcated with their respective markers.  \r\n- Some performance impact is noticed when lots of NPCs are present, e.g. in Henesys. ", "created_at": "2019-11-25T04:01:08Z", "updated_at": "2019-11-25T21:24:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "f8dba2c266163bb8c722b228238e8157d1edc0ca", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-11-25T21:18:59Z"}, {"id": "10944818214", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350426986", "pull_request_review_id": 322582712, "id": 350426986, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQyNjk4Ng==", "diff_hunk": "@@ -17,150 +17,110 @@\n //////////////////////////////////////////////////////////////////////////////////\n #include \"UIMiniMap.h\"\n \n+#include \"../UI.h\"\n+#include \"UIWorldMap.h\"\n+\n #include \"../Components/MapleButton.h\"\n \n #include <nlnx/nx.hpp>\n \n namespace ms\n {\n-\tUIMiniMap::UIMiniMap(const CharStats& st) : UIDragElement<PosMINIMAP>(Point<int16_t>(50, 50)), stats(st)\n+\tUIMiniMap::UIMiniMap(const CharStats& st) : UIDragElement<PosMINIMAP>(Point<int16_t>(128, 20)), stats(st)\n \t{\n-\t\ttype = Type::MIN;\n-\t\tbool simpleMode = false;\n+\t\ttype = Setting<MiniMapType>::get().load();\n+\t\tsimpleMode = Setting<MiniMapSimpleMode>::get().load();\n+\t\tbig_map = true;\n \n \t\tstd::string node = simpleMode ? \"MiniMapSimpleMode\" : \"MiniMap\";\n-\t\tnl::node MiniMap = nl::nx::ui[\"UIWindow2.img\"][node];\n-\n-\t\tnl::node Min, Normal, Max;\n-\n-\t\tif (simpleMode)\n-\t\t{\n-\t\t\tMin = MiniMap[\"Window\"][\"Min\"];\n-\t\t\tNormal = MiniMap[\"Window\"][\"Normal\"];\n-\t\t\tMax = MiniMap[\"Window\"][\"Max\"];\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tMin = MiniMap[\"Min\"];\n-\t\t\tNormal = MiniMap[\"MinMap\"];\n-\t\t\tMax = MiniMap[\"MaxMap\"];\n-\t\t}\n+\t\tMiniMap = nl::nx::ui[\"UIWindow2.img\"][node];\n \n-\t\tstd::string Left = simpleMode ? \"Left\" : \"w\";\n-\t\tstd::string Center = simpleMode ? \"Center\" : \"c\";\n-\t\tstd::string Right = simpleMode ? \"Right\" : \"e\";\n-\n-\t\tbt_map_pos = Point<int16_t>(237, -6);\n-\t\tbt_max_pos = Point<int16_t>(209, -6);\n-\t\tbt_min_pos = Point<int16_t>(195, -6);\n-\n-\t\tbuttons[Buttons::BT_MAP] = std::make_unique<MapleButton>(MiniMap[\"BtMap\"], bt_map_pos);\n-\t\tbuttons[Buttons::BT_MAX] = std::make_unique<MapleButton>(MiniMap[\"BtMax\"], bt_max_pos);\n-\t\tbuttons[Buttons::BT_MIN] = std::make_unique<MapleButton>(MiniMap[\"BtMin\"], bt_min_pos);\n-\t\tbuttons[Buttons::BT_NPC] = std::make_unique<MapleButton>(MiniMap[\"BtNpc\"], Point<int16_t>(276, -6));\n+\t\tbuttons[Buttons::BT_MIN] = std::make_unique<MapleButton>(MiniMap[\"BtMin\"], Point<int16_t>(195, -6));\n+\t\tbuttons[Buttons::BT_MAX] = std::make_unique<MapleButton>(MiniMap[\"BtMax\"], Point<int16_t>(209, -6));\n \t\tbuttons[Buttons::BT_SMALL] = std::make_unique<MapleButton>(MiniMap[\"BtSmall\"], Point<int16_t>(223, -6));\n-\n-\t\tmin_left = Min[Left];\n-\t\tmin_center = Min[Center];\n-\t\tmin_right = Min[Right];\n-\n+\t\tbuttons[Buttons::BT_BIG] = std::make_unique<MapleButton>(MiniMap[\"BtBig\"], Point<int16_t>(223, -6));\n+\t\tbuttons[Buttons::BT_MAP] = std::make_unique<MapleButton>(MiniMap[\"BtMap\"], Point<int16_t>(237, -6));\n+\t\tbuttons[Buttons::BT_NPC] = std::make_unique<MapleButton>(MiniMap[\"BtNpc\"], Point<int16_t>(276, -6));\n+\t\tregion_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n+\t\ttown_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n \t\tcombined_text = Text(Text::Font::A12M, Text::Alignment::LEFT, Color::Name::WHITE);\n \n-\t\tstd::string DownCenter = simpleMode ? \"DownCenter\" : \"s\";\n-\t\tstd::string DownLeft = simpleMode ? \"DownLeft\" : \"sw\";\n-\t\tstd::string DownRight = simpleMode ? \"DownRight\" : \"se\";\n-\t\tstd::string MiddleCenter = \"MiddleCenter\";\n-\t\tstd::string MiddleLeft = simpleMode ? \"MiddleLeft\" : \"w\";\n-\t\tstd::string MiddleRight = simpleMode ? \"MiddleRight\" : \"e\";\n-\t\tstd::string UpCenter = simpleMode ? \"UpCenter\" : \"n\";\n-\t\tstd::string UpLeft = simpleMode ? \"UpLeft\" : \"nw\";\n-\t\tstd::string UpRight = simpleMode ? \"UpRight\" : \"ne\";\n+\t\tmarker = Setting<MiniMapDefaultHelpers>::get().load() ? nl::nx::ui[\"UIWindow2.img\"][\"MiniMapSimpleMode\"][\"DefaultHelper\"] : nl::nx::map[\"MapHelper.img\"][\"minimap\"];\n \n-\t\tPoint<int16_t> m_pos = Point<int16_t>(0, 33);\n-\t\tDrawArgument mr_pos = DrawArgument(Point<int16_t>(315, 0));\n-\t\tDrawArgument uc_pos = DrawArgument(Point<int16_t>(0, -10)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0));\n-\t\tPoint<int16_t> ul_pos = Point<int16_t>(0, -10);\n-\t\tPoint<int16_t> ur_pos = Point<int16_t>(260, -10);\n-\n-\t\tint16_t dc_y = 68;\n-\t\tint16_t dl_dr_y = 50;\n-\t\tint16_t ml_mr_y = 17;\n-\n-\t\tnormal_sprites.emplace_back(Normal[DownCenter], DrawArgument(Point<int16_t>(0, dc_y)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0)));\n-\t\tnormal_sprites.emplace_back(Normal[DownLeft], Point<int16_t>(0, dl_dr_y));\n-\t\tnormal_sprites.emplace_back(Normal[DownRight], Point<int16_t>(260, dl_dr_y));\n-\t\tnormal_sprites.emplace_back(Normal[MiddleCenter]);\n-\t\tnormal_sprites.emplace_back(Normal[MiddleLeft], DrawArgument(Point<int16_t>(0, ml_mr_y), m_pos));\n-\t\tnormal_sprites.emplace_back(Normal[MiddleRight], mr_pos + DrawArgument(Point<int16_t>(0, ml_mr_y), m_pos));\n-\t\tnormal_sprites.emplace_back(Normal[UpCenter], uc_pos);\n-\t\tnormal_sprites.emplace_back(Normal[UpLeft], ul_pos);\n-\t\tnormal_sprites.emplace_back(Normal[UpRight], ur_pos);\n-\n-\t\tint16_t max_adj = 40;\n-\t\tint16_t max_dc_y = dc_y + max_adj;\n-\t\tint16_t max_dl_dr_y = dl_dr_y + max_adj;\n-\t\tint16_t max_ml_mr_y = ml_mr_y + max_adj;\n-\n-\t\tmax_sprites.emplace_back(Max[DownCenter], DrawArgument(Point<int16_t>(0, max_dc_y)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0)));\n-\t\tmax_sprites.emplace_back(Max[DownLeft], Point<int16_t>(0, max_dl_dr_y));\n-\t\tmax_sprites.emplace_back(Max[DownRight], Point<int16_t>(260, max_dl_dr_y));\n-\t\tmax_sprites.emplace_back(Max[MiddleCenter]);\n-\t\tmax_sprites.emplace_back(Max[MiddleLeft], DrawArgument(Point<int16_t>(0, max_ml_mr_y), m_pos));\n-\t\tmax_sprites.emplace_back(Max[MiddleRight], mr_pos + DrawArgument(Point<int16_t>(0, max_ml_mr_y), m_pos));\n-\t\tmax_sprites.emplace_back(Max[UpCenter], uc_pos);\n-\t\tmax_sprites.emplace_back(Max[UpLeft], ul_pos);\n-\t\tmax_sprites.emplace_back(Max[UpRight], ur_pos);\n+\t\tplayer_marker = Animation(marker[\"user\"]);\n \n-\t\tregion_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n-\t\ttown_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n+\t\tupdate();", "path": "IO/UITypes/UIMiniMap.cpp", "position": 117, "original_position": 117, "commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "original_commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "I usually never have to call update(); directly. The program should be calling this automatically. Does it cause issues without it?", "created_at": "2019-11-25T21:17:42Z", "updated_at": "2019-11-25T21:24:06Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350426986", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350426986"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350426986"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "id": 345003993, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MDAzOTkz", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/5.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/5.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5", "number": 5, "state": "open", "locked": false, "title": "Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "MiniMap with basic functions.  \r\n\r\n### Features  \r\n- Draggable window  \r\n- Change between 3 modes: minimized, map only, full size  \r\n- NPCs, portals, other characters and the player shown as markers  \r\n- Shortcut to world map  \r\n\r\n### Not implemented yet  \r\n- Scrolling map  \r\n- List of NPCs on the map  \r\n\r\n### Changes to files not **UIMiniMap.h/.cpp**:  \r\n- **Configuration.h/.cpp**: Add options for initial MiniMap type, Simple Mode, and use of Default Helpers (provided in UI.wz)  \r\n- **MapNpcs.h/.cpp**, **MapChars.h/.cpp**: Add method to iterate through list of NPCs/other player characters.  \r\n- **Stage.h/.cpp**: Add map ID as object variable to synchronize map reads.  \r\n\r\n### Notes/Known Problems:\r\n- Backdrop for the MiniMap is lightly shaded, unlike official client's dark backdrop.  \r\n- Special NPCs, e.g. Quest starters, are not demarcated with their respective markers.  \r\n- Some performance impact is noticed when lots of NPCs are present, e.g. in Henesys. ", "created_at": "2019-11-25T04:01:08Z", "updated_at": "2019-11-25T21:24:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "f8dba2c266163bb8c722b228238e8157d1edc0ca", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-11-25T21:17:42Z"}, {"id": "10944818218", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350427202", "pull_request_review_id": 322582712, "id": 350427202, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQyNzIwMg==", "diff_hunk": "@@ -17,150 +17,110 @@\n //////////////////////////////////////////////////////////////////////////////////\n #include \"UIMiniMap.h\"\n \n+#include \"../UI.h\"\n+#include \"UIWorldMap.h\"\n+\n #include \"../Components/MapleButton.h\"\n \n #include <nlnx/nx.hpp>\n \n namespace ms\n {\n-\tUIMiniMap::UIMiniMap(const CharStats& st) : UIDragElement<PosMINIMAP>(Point<int16_t>(50, 50)), stats(st)\n+\tUIMiniMap::UIMiniMap(const CharStats& st) : UIDragElement<PosMINIMAP>(Point<int16_t>(128, 20)), stats(st)\n \t{\n-\t\ttype = Type::MIN;\n-\t\tbool simpleMode = false;\n+\t\ttype = Setting<MiniMapType>::get().load();\n+\t\tsimpleMode = Setting<MiniMapSimpleMode>::get().load();\n+\t\tbig_map = true;\n \n \t\tstd::string node = simpleMode ? \"MiniMapSimpleMode\" : \"MiniMap\";\n-\t\tnl::node MiniMap = nl::nx::ui[\"UIWindow2.img\"][node];\n-\n-\t\tnl::node Min, Normal, Max;\n-\n-\t\tif (simpleMode)\n-\t\t{\n-\t\t\tMin = MiniMap[\"Window\"][\"Min\"];\n-\t\t\tNormal = MiniMap[\"Window\"][\"Normal\"];\n-\t\t\tMax = MiniMap[\"Window\"][\"Max\"];\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tMin = MiniMap[\"Min\"];\n-\t\t\tNormal = MiniMap[\"MinMap\"];\n-\t\t\tMax = MiniMap[\"MaxMap\"];\n-\t\t}\n+\t\tMiniMap = nl::nx::ui[\"UIWindow2.img\"][node];\n \n-\t\tstd::string Left = simpleMode ? \"Left\" : \"w\";\n-\t\tstd::string Center = simpleMode ? \"Center\" : \"c\";\n-\t\tstd::string Right = simpleMode ? \"Right\" : \"e\";\n-\n-\t\tbt_map_pos = Point<int16_t>(237, -6);\n-\t\tbt_max_pos = Point<int16_t>(209, -6);\n-\t\tbt_min_pos = Point<int16_t>(195, -6);\n-\n-\t\tbuttons[Buttons::BT_MAP] = std::make_unique<MapleButton>(MiniMap[\"BtMap\"], bt_map_pos);\n-\t\tbuttons[Buttons::BT_MAX] = std::make_unique<MapleButton>(MiniMap[\"BtMax\"], bt_max_pos);\n-\t\tbuttons[Buttons::BT_MIN] = std::make_unique<MapleButton>(MiniMap[\"BtMin\"], bt_min_pos);\n-\t\tbuttons[Buttons::BT_NPC] = std::make_unique<MapleButton>(MiniMap[\"BtNpc\"], Point<int16_t>(276, -6));\n+\t\tbuttons[Buttons::BT_MIN] = std::make_unique<MapleButton>(MiniMap[\"BtMin\"], Point<int16_t>(195, -6));\n+\t\tbuttons[Buttons::BT_MAX] = std::make_unique<MapleButton>(MiniMap[\"BtMax\"], Point<int16_t>(209, -6));\n \t\tbuttons[Buttons::BT_SMALL] = std::make_unique<MapleButton>(MiniMap[\"BtSmall\"], Point<int16_t>(223, -6));\n-\n-\t\tmin_left = Min[Left];\n-\t\tmin_center = Min[Center];\n-\t\tmin_right = Min[Right];\n-\n+\t\tbuttons[Buttons::BT_BIG] = std::make_unique<MapleButton>(MiniMap[\"BtBig\"], Point<int16_t>(223, -6));\n+\t\tbuttons[Buttons::BT_MAP] = std::make_unique<MapleButton>(MiniMap[\"BtMap\"], Point<int16_t>(237, -6));\n+\t\tbuttons[Buttons::BT_NPC] = std::make_unique<MapleButton>(MiniMap[\"BtNpc\"], Point<int16_t>(276, -6));\n+\t\tregion_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n+\t\ttown_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n \t\tcombined_text = Text(Text::Font::A12M, Text::Alignment::LEFT, Color::Name::WHITE);\n \n-\t\tstd::string DownCenter = simpleMode ? \"DownCenter\" : \"s\";\n-\t\tstd::string DownLeft = simpleMode ? \"DownLeft\" : \"sw\";\n-\t\tstd::string DownRight = simpleMode ? \"DownRight\" : \"se\";\n-\t\tstd::string MiddleCenter = \"MiddleCenter\";\n-\t\tstd::string MiddleLeft = simpleMode ? \"MiddleLeft\" : \"w\";\n-\t\tstd::string MiddleRight = simpleMode ? \"MiddleRight\" : \"e\";\n-\t\tstd::string UpCenter = simpleMode ? \"UpCenter\" : \"n\";\n-\t\tstd::string UpLeft = simpleMode ? \"UpLeft\" : \"nw\";\n-\t\tstd::string UpRight = simpleMode ? \"UpRight\" : \"ne\";\n+\t\tmarker = Setting<MiniMapDefaultHelpers>::get().load() ? nl::nx::ui[\"UIWindow2.img\"][\"MiniMapSimpleMode\"][\"DefaultHelper\"] : nl::nx::map[\"MapHelper.img\"][\"minimap\"];\n \n-\t\tPoint<int16_t> m_pos = Point<int16_t>(0, 33);\n-\t\tDrawArgument mr_pos = DrawArgument(Point<int16_t>(315, 0));\n-\t\tDrawArgument uc_pos = DrawArgument(Point<int16_t>(0, -10)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0));\n-\t\tPoint<int16_t> ul_pos = Point<int16_t>(0, -10);\n-\t\tPoint<int16_t> ur_pos = Point<int16_t>(260, -10);\n-\n-\t\tint16_t dc_y = 68;\n-\t\tint16_t dl_dr_y = 50;\n-\t\tint16_t ml_mr_y = 17;\n-\n-\t\tnormal_sprites.emplace_back(Normal[DownCenter], DrawArgument(Point<int16_t>(0, dc_y)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0)));\n-\t\tnormal_sprites.emplace_back(Normal[DownLeft], Point<int16_t>(0, dl_dr_y));\n-\t\tnormal_sprites.emplace_back(Normal[DownRight], Point<int16_t>(260, dl_dr_y));\n-\t\tnormal_sprites.emplace_back(Normal[MiddleCenter]);\n-\t\tnormal_sprites.emplace_back(Normal[MiddleLeft], DrawArgument(Point<int16_t>(0, ml_mr_y), m_pos));\n-\t\tnormal_sprites.emplace_back(Normal[MiddleRight], mr_pos + DrawArgument(Point<int16_t>(0, ml_mr_y), m_pos));\n-\t\tnormal_sprites.emplace_back(Normal[UpCenter], uc_pos);\n-\t\tnormal_sprites.emplace_back(Normal[UpLeft], ul_pos);\n-\t\tnormal_sprites.emplace_back(Normal[UpRight], ur_pos);\n-\n-\t\tint16_t max_adj = 40;\n-\t\tint16_t max_dc_y = dc_y + max_adj;\n-\t\tint16_t max_dl_dr_y = dl_dr_y + max_adj;\n-\t\tint16_t max_ml_mr_y = ml_mr_y + max_adj;\n-\n-\t\tmax_sprites.emplace_back(Max[DownCenter], DrawArgument(Point<int16_t>(0, max_dc_y)) + DrawArgument(Point<int16_t>(64, 0), Point<int16_t>(196, 0)));\n-\t\tmax_sprites.emplace_back(Max[DownLeft], Point<int16_t>(0, max_dl_dr_y));\n-\t\tmax_sprites.emplace_back(Max[DownRight], Point<int16_t>(260, max_dl_dr_y));\n-\t\tmax_sprites.emplace_back(Max[MiddleCenter]);\n-\t\tmax_sprites.emplace_back(Max[MiddleLeft], DrawArgument(Point<int16_t>(0, max_ml_mr_y), m_pos));\n-\t\tmax_sprites.emplace_back(Max[MiddleRight], mr_pos + DrawArgument(Point<int16_t>(0, max_ml_mr_y), m_pos));\n-\t\tmax_sprites.emplace_back(Max[UpCenter], uc_pos);\n-\t\tmax_sprites.emplace_back(Max[UpLeft], ul_pos);\n-\t\tmax_sprites.emplace_back(Max[UpRight], ur_pos);\n+\t\tplayer_marker = Animation(marker[\"user\"]);\n \n-\t\tregion_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n-\t\ttown_text = Text(Text::Font::A12B, Text::Alignment::LEFT, Color::Name::WHITE);\n+\t\tupdate();\n \t}\n \n \tvoid UIMiniMap::draw(float alpha) const\n \t{\n \t\tif (type == Type::MIN)\n \t\t{\n-\t\t\tDrawArgument min_left_pos = Point<int16_t>(0, -10);\n-\n-\t\t\tmin_left.draw(min_left_pos, alpha);\n-\t\t\tmin_center.draw(min_left_pos + DrawArgument(Point<int16_t>(center_start_x, 0), Point<int16_t>(final_pos - center_start_x, 0)), alpha);\n-\t\t\tmin_right.draw(Point<int16_t>(final_pos, -10), alpha);\n+\t\t\tfor each (Sprite sprite in min_sprites)\n+\t\t\t\tsprite.draw(position, alpha);\n \n-\t\t\tcombined_text.draw(position + Point<int16_t>(7, -13));\n+\t\t\tcombined_text.draw(position + Point<int16_t>(7, -3));\n \t\t}\n \t\telse if (type == Type::NORMAL)\n \t\t{\n+\n \t\t\tfor each (Sprite sprite in normal_sprites)\n \t\t\t\tsprite.draw(position, alpha);\n+\n+\t\t\tif (has_map) {\n+\t\t\t\tfor each (Sprite s in static_marker_sprites)\n+\t\t\t\t\ts.draw(position, alpha);\n+\n+\t\t\t\tdraw_movable_markers(position, alpha);\n+\t\t\t}\n+\n \t\t}\n \t\telse\n \t\t{\n \t\t\tfor each (Sprite sprite in max_sprites)\n \t\t\t\tsprite.draw(position, alpha);\n \n-\t\t\tregion_text.draw(position + Point<int16_t>(48, 4));\n-\t\t\ttown_text.draw(position + Point<int16_t>(48, 18));\n+\t\t\tregion_text.draw(position + Point<int16_t>(48, 14));\n+\t\t\ttown_text.draw(position + Point<int16_t>(48, 28));\n+\n+\t\t\tif (has_map) {\n+\t\t\t\tfor each (Sprite s in static_marker_sprites)\n+\t\t\t\t\ts.draw(position + Point<int16_t>(0, max_adj), alpha);\n+\n+\t\t\t\tdraw_movable_markers(position + Point<int16_t>(0, max_adj), alpha);\n+\t\t\t}\n \t\t}\n \n \t\tUIElement::draw(alpha);\n \t}\n \n \tvoid UIMiniMap::update()\n \t{\n-\t\tint32_t mid = stats.get_mapid();\n+\t\tint32_t mid = Stage::get().get_mapid();", "path": "IO/UITypes/UIMiniMap.cpp", "position": 173, "original_position": 173, "commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "original_commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "Did stats not give you the correct information here?", "created_at": "2019-11-25T21:18:15Z", "updated_at": "2019-11-25T21:24:06Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350427202", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350427202"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350427202"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "id": 345003993, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MDAzOTkz", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/5.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/5.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5", "number": 5, "state": "open", "locked": false, "title": "Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "MiniMap with basic functions.  \r\n\r\n### Features  \r\n- Draggable window  \r\n- Change between 3 modes: minimized, map only, full size  \r\n- NPCs, portals, other characters and the player shown as markers  \r\n- Shortcut to world map  \r\n\r\n### Not implemented yet  \r\n- Scrolling map  \r\n- List of NPCs on the map  \r\n\r\n### Changes to files not **UIMiniMap.h/.cpp**:  \r\n- **Configuration.h/.cpp**: Add options for initial MiniMap type, Simple Mode, and use of Default Helpers (provided in UI.wz)  \r\n- **MapNpcs.h/.cpp**, **MapChars.h/.cpp**: Add method to iterate through list of NPCs/other player characters.  \r\n- **Stage.h/.cpp**: Add map ID as object variable to synchronize map reads.  \r\n\r\n### Notes/Known Problems:\r\n- Backdrop for the MiniMap is lightly shaded, unlike official client's dark backdrop.  \r\n- Special NPCs, e.g. Quest starters, are not demarcated with their respective markers.  \r\n- Some performance impact is noticed when lots of NPCs are present, e.g. in Henesys. ", "created_at": "2019-11-25T04:01:08Z", "updated_at": "2019-11-25T21:24:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "f8dba2c266163bb8c722b228238e8157d1edc0ca", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-11-25T21:18:15Z"}, {"id": "10944818211", "type": "PullRequestReviewCommentEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"action": "created", "comment": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350426364", "pull_request_review_id": 322582712, "id": 350426364, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQyNjM2NA==", "diff_hunk": "@@ -17,150 +17,110 @@\n //////////////////////////////////////////////////////////////////////////////////\n #include \"UIMiniMap.h\"\n \n+#include \"../UI.h\"\n+#include \"UIWorldMap.h\"\n+", "path": "IO/UITypes/UIMiniMap.cpp", "position": 6, "original_position": 6, "commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "original_commit_id": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "body": "This isn't a huge deal but I try to break the levels apart. So UIWorldMap would be with UIMiniMap and ../UI would be where it's at.", "created_at": "2019-11-25T21:16:11Z", "updated_at": "2019-11-25T21:24:06Z", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350426364", "pull_request_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments/350426364"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5#discussion_r350426364"}, "pull_request": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}}}, "pull_request": {"url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5", "id": 345003993, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ1MDAzOTkz", "html_url": "https://github.com/ryantpayton/HeavenClient/pull/5", "diff_url": "https://github.com/ryantpayton/HeavenClient/pull/5.diff", "patch_url": "https://github.com/ryantpayton/HeavenClient/pull/5.patch", "issue_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5", "number": 5, "state": "open", "locked": false, "title": "Minimap", "user": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "body": "MiniMap with basic functions.  \r\n\r\n### Features  \r\n- Draggable window  \r\n- Change between 3 modes: minimized, map only, full size  \r\n- NPCs, portals, other characters and the player shown as markers  \r\n- Shortcut to world map  \r\n\r\n### Not implemented yet  \r\n- Scrolling map  \r\n- List of NPCs on the map  \r\n\r\n### Changes to files not **UIMiniMap.h/.cpp**:  \r\n- **Configuration.h/.cpp**: Add options for initial MiniMap type, Simple Mode, and use of Default Helpers (provided in UI.wz)  \r\n- **MapNpcs.h/.cpp**, **MapChars.h/.cpp**: Add method to iterate through list of NPCs/other player characters.  \r\n- **Stage.h/.cpp**: Add map ID as object variable to synchronize map reads.  \r\n\r\n### Notes/Known Problems:\r\n- Backdrop for the MiniMap is lightly shaded, unlike official client's dark backdrop.  \r\n- Special NPCs, e.g. Quest starters, are not demarcated with their respective markers.  \r\n- Some performance impact is noticed when lots of NPCs are present, e.g. in Henesys. ", "created_at": "2019-11-25T04:01:08Z", "updated_at": "2019-11-25T21:24:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "f8dba2c266163bb8c722b228238e8157d1edc0ca", "assignee": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits", "review_comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments", "review_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5", "head": {"label": "ryantpayton:minimap", "ref": "minimap", "sha": "2db871a9898de91658d35a6ea28f17257c6f91d5", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "base": {"label": "ryantpayton:master", "ref": "master", "sha": "8b5842d899c90f196bdb8481ced91737eced6060", "user": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "repo": {"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-11-18T13:25:39Z", "pushed_at": "2019-11-25T16:47:56Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11287, "stargazers_count": 48, "watchers_count": 48, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 6, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 6, "watchers": 48, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5"}, "html": {"href": "https://github.com/ryantpayton/HeavenClient/pull/5"}, "issue": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5"}, "comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/5/comments"}, "review_comments": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/comments"}, "review_comment": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls/5/commits"}, "statuses": {"href": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/2db871a9898de91658d35a6ea28f17257c6f91d5"}}, "author_association": "COLLABORATOR"}}, "public": true, "created_at": "2019-11-25T21:16:11Z"}, {"id": "10800491261", "type": "DeleteEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "develop", "ref_type": "branch", "pusher_type": "user"}, "public": true, "created_at": "2019-11-06T14:19:15Z"}, {"id": "10796531348", "type": "MemberEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"member": {"login": "DanielLuu", "id": 389431, "node_id": "MDQ6VXNlcjM4OTQzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/389431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielLuu", "html_url": "https://github.com/DanielLuu", "followers_url": "https://api.github.com/users/DanielLuu/followers", "following_url": "https://api.github.com/users/DanielLuu/following{/other_user}", "gists_url": "https://api.github.com/users/DanielLuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielLuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielLuu/subscriptions", "organizations_url": "https://api.github.com/users/DanielLuu/orgs", "repos_url": "https://api.github.com/users/DanielLuu/repos", "events_url": "https://api.github.com/users/DanielLuu/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielLuu/received_events", "type": "User", "site_admin": false}, "action": "added"}, "public": true, "created_at": "2019-11-06T04:51:35Z"}, {"id": "10794662219", "type": "MemberEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"member": {"login": "nansonzheng", "id": 14435972, "node_id": "MDQ6VXNlcjE0NDM1OTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/14435972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nansonzheng", "html_url": "https://github.com/nansonzheng", "followers_url": "https://api.github.com/users/nansonzheng/followers", "following_url": "https://api.github.com/users/nansonzheng/following{/other_user}", "gists_url": "https://api.github.com/users/nansonzheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/nansonzheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nansonzheng/subscriptions", "organizations_url": "https://api.github.com/users/nansonzheng/orgs", "repos_url": "https://api.github.com/users/nansonzheng/repos", "events_url": "https://api.github.com/users/nansonzheng/events{/privacy}", "received_events_url": "https://api.github.com/users/nansonzheng/received_events", "type": "User", "site_admin": false}, "action": "added"}, "public": true, "created_at": "2019-11-05T22:30:27Z"}, {"id": "10794606623", "type": "CreateEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"ref": "develop", "ref_type": "branch", "master_branch": "master", "description": "A custom client for HeavenMS", "pusher_type": "user"}, "public": true, "created_at": "2019-11-05T22:22:40Z"}, {"id": "10468974505", "type": "WatchEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 209411996, "name": "tofugu/japanese-vocabulary-pronunciation-audio", "url": "https://api.github.com/repos/tofugu/japanese-vocabulary-pronunciation-audio"}, "payload": {"action": "started"}, "public": true, "created_at": "2019-09-22T17:25:33Z", "org": {"id": 1299930, "login": "tofugu", "gravatar_id": "", "url": "https://api.github.com/orgs/tofugu", "avatar_url": "https://avatars.githubusercontent.com/u/1299930?"}}, {"id": "10420395603", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4036499174, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "8b5842d899c90f196bdb8481ced91737eced6060", "before": "9d1a4f5e422645ceaee6b90f8bd478c7b82194eb", "commits": [{"sha": "8b5842d899c90f196bdb8481ced91737eced6060", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Quick fix for UIKeyConfig", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/8b5842d899c90f196bdb8481ced91737eced6060"}]}, "public": true, "created_at": "2019-09-16T00:05:59Z"}, {"id": "10406444443", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4028411227, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "9d1a4f5e422645ceaee6b90f8bd478c7b82194eb", "before": "9fbd09ab0ebff3a73ee68cc58922f27d4f665a6b", "commits": [{"sha": "9d1a4f5e422645ceaee6b90f8bd478c7b82194eb", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Improved NPC Talk, needs more work", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/9d1a4f5e422645ceaee6b90f8bd478c7b82194eb"}]}, "public": true, "created_at": "2019-09-12T20:48:54Z"}, {"id": "10406426976", "type": "PushEvent", "actor": {"id": 48335966, "login": "ryantpayton", "display_login": "ryantpayton", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "avatar_url": "https://avatars.githubusercontent.com/u/48335966?"}, "repo": {"id": 176823594, "name": "ryantpayton/HeavenClient", "url": "https://api.github.com/repos/ryantpayton/HeavenClient"}, "payload": {"push_id": 4028402193, "size": 1, "distinct_size": 1, "ref": "refs/heads/master", "head": "9fbd09ab0ebff3a73ee68cc58922f27d4f665a6b", "before": "eecc0b1c3cb36e6c83b933cfb123168e62eae9d0", "commits": [{"sha": "9fbd09ab0ebff3a73ee68cc58922f27d4f665a6b", "author": {"email": "ryantpaytong@gmail.com", "name": "Ryan Payton"}, "message": "Added map effects for Opcode 138 - FIELD_EFFECT", "distinct": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits/9fbd09ab0ebff3a73ee68cc58922f27d4f665a6b"}]}, "public": true, "created_at": "2019-09-12T20:46:19Z"}], "repos": [{"id": 176823594, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjM1OTQ=", "name": "HeavenClient", "full_name": "ryantpayton/HeavenClient", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/HeavenClient", "description": "A custom client for HeavenMS", "fork": true, "url": "https://api.github.com/repos/ryantpayton/HeavenClient", "forks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/forks", "keys_url": "https://api.github.com/repos/ryantpayton/HeavenClient/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/HeavenClient/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/HeavenClient/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/HeavenClient/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/HeavenClient/events", "assignees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/HeavenClient/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/HeavenClient/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/HeavenClient/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/HeavenClient/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/HeavenClient/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/HeavenClient/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/HeavenClient/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/HeavenClient/merges", "archive_url": "https://api.github.com/repos/ryantpayton/HeavenClient/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/HeavenClient/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/HeavenClient/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/HeavenClient/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/HeavenClient/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/HeavenClient/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/HeavenClient/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/HeavenClient/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/HeavenClient/deployments", "created_at": "2019-03-20T21:59:41Z", "updated_at": "2019-12-19T15:49:39Z", "pushed_at": "2019-12-20T06:40:02Z", "git_url": "git://github.com/ryantpayton/HeavenClient.git", "ssh_url": "git@github.com:ryantpayton/HeavenClient.git", "clone_url": "https://github.com/ryantpayton/HeavenClient.git", "svn_url": "https://github.com/ryantpayton/HeavenClient", "homepage": "", "size": 11283, "stargazers_count": 55, "watchers_count": 55, "language": "C", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 19, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 20, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 19, "open_issues": 20, "watchers": 55, "default_branch": "master", "permissions": {"admin": false, "push": false, "pull": true}}, {"id": 174429048, "node_id": "MDEwOlJlcG9zaXRvcnkxNzQ0MjkwNDg=", "name": "MapleStory", "full_name": "ryantpayton/MapleStory", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/MapleStory", "description": "A clean server based on HeavenMS with focus on functionality and how it was originally developed", "fork": true, "url": "https://api.github.com/repos/ryantpayton/MapleStory", "forks_url": "https://api.github.com/repos/ryantpayton/MapleStory/forks", "keys_url": "https://api.github.com/repos/ryantpayton/MapleStory/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/MapleStory/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/MapleStory/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/MapleStory/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/MapleStory/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/MapleStory/events", "assignees_url": "https://api.github.com/repos/ryantpayton/MapleStory/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/MapleStory/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/MapleStory/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/MapleStory/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/MapleStory/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/MapleStory/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/MapleStory/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/MapleStory/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/MapleStory/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/MapleStory/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/MapleStory/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/MapleStory/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/MapleStory/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/MapleStory/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/MapleStory/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/MapleStory/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/MapleStory/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/MapleStory/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/MapleStory/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/MapleStory/merges", "archive_url": "https://api.github.com/repos/ryantpayton/MapleStory/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/MapleStory/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/MapleStory/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/MapleStory/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/MapleStory/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/MapleStory/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/MapleStory/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/MapleStory/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/MapleStory/deployments", "created_at": "2019-03-07T22:22:56Z", "updated_at": "2019-12-01T09:09:45Z", "pushed_at": "2019-12-08T01:02:51Z", "git_url": "git://github.com/ryantpayton/MapleStory.git", "ssh_url": "git@github.com:ryantpayton/MapleStory.git", "clone_url": "https://github.com/ryantpayton/MapleStory.git", "svn_url": "https://github.com/ryantpayton/MapleStory", "homepage": "", "size": 114433, "stargazers_count": 0, "watchers_count": 0, "language": "Java", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 1, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "forks": 0, "open_issues": 1, "watchers": 0, "default_branch": "master", "permissions": {"admin": false, "push": false, "pull": true}}, {"id": 176825323, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MjUzMjM=", "name": "NoLifeNx", "full_name": "ryantpayton/NoLifeNx", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/NoLifeNx", "description": "A library to read NX files", "fork": true, "url": "https://api.github.com/repos/ryantpayton/NoLifeNx", "forks_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/forks", "keys_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/events", "assignees_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/merges", "archive_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/NoLifeNx/deployments", "created_at": "2019-03-20T22:14:43Z", "updated_at": "2019-12-01T09:09:01Z", "pushed_at": "2019-12-01T09:08:58Z", "git_url": "git://github.com/ryantpayton/NoLifeNx.git", "ssh_url": "git@github.com:ryantpayton/NoLifeNx.git", "clone_url": "https://github.com/ryantpayton/NoLifeNx.git", "svn_url": "https://github.com/ryantpayton/NoLifeNx", "homepage": "", "size": 554, "stargazers_count": 0, "watchers_count": 0, "language": "C", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": null, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "update", "permissions": {"admin": false, "push": false, "pull": true}}, {"id": 176832056, "node_id": "MDEwOlJlcG9zaXRvcnkxNzY4MzIwNTY=", "name": "Vana", "full_name": "ryantpayton/Vana", "private": false, "owner": {"login": "ryantpayton", "id": 48335966, "node_id": "MDQ6VXNlcjQ4MzM1OTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/48335966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryantpayton", "html_url": "https://github.com/ryantpayton", "followers_url": "https://api.github.com/users/ryantpayton/followers", "following_url": "https://api.github.com/users/ryantpayton/following{/other_user}", "gists_url": "https://api.github.com/users/ryantpayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryantpayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryantpayton/subscriptions", "organizations_url": "https://api.github.com/users/ryantpayton/orgs", "repos_url": "https://api.github.com/users/ryantpayton/repos", "events_url": "https://api.github.com/users/ryantpayton/events{/privacy}", "received_events_url": "https://api.github.com/users/ryantpayton/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ryantpayton/Vana", "description": "An improved server based on Vana (v83 MapleStory private server)", "fork": false, "url": "https://api.github.com/repos/ryantpayton/Vana", "forks_url": "https://api.github.com/repos/ryantpayton/Vana/forks", "keys_url": "https://api.github.com/repos/ryantpayton/Vana/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ryantpayton/Vana/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ryantpayton/Vana/teams", "hooks_url": "https://api.github.com/repos/ryantpayton/Vana/hooks", "issue_events_url": "https://api.github.com/repos/ryantpayton/Vana/issues/events{/number}", "events_url": "https://api.github.com/repos/ryantpayton/Vana/events", "assignees_url": "https://api.github.com/repos/ryantpayton/Vana/assignees{/user}", "branches_url": "https://api.github.com/repos/ryantpayton/Vana/branches{/branch}", "tags_url": "https://api.github.com/repos/ryantpayton/Vana/tags", "blobs_url": "https://api.github.com/repos/ryantpayton/Vana/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ryantpayton/Vana/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ryantpayton/Vana/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ryantpayton/Vana/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ryantpayton/Vana/statuses/{sha}", "languages_url": "https://api.github.com/repos/ryantpayton/Vana/languages", "stargazers_url": "https://api.github.com/repos/ryantpayton/Vana/stargazers", "contributors_url": "https://api.github.com/repos/ryantpayton/Vana/contributors", "subscribers_url": "https://api.github.com/repos/ryantpayton/Vana/subscribers", "subscription_url": "https://api.github.com/repos/ryantpayton/Vana/subscription", "commits_url": "https://api.github.com/repos/ryantpayton/Vana/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ryantpayton/Vana/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ryantpayton/Vana/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ryantpayton/Vana/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ryantpayton/Vana/contents/{+path}", "compare_url": "https://api.github.com/repos/ryantpayton/Vana/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ryantpayton/Vana/merges", "archive_url": "https://api.github.com/repos/ryantpayton/Vana/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ryantpayton/Vana/downloads", "issues_url": "https://api.github.com/repos/ryantpayton/Vana/issues{/number}", "pulls_url": "https://api.github.com/repos/ryantpayton/Vana/pulls{/number}", "milestones_url": "https://api.github.com/repos/ryantpayton/Vana/milestones{/number}", "notifications_url": "https://api.github.com/repos/ryantpayton/Vana/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ryantpayton/Vana/labels{/name}", "releases_url": "https://api.github.com/repos/ryantpayton/Vana/releases{/id}", "deployments_url": "https://api.github.com/repos/ryantpayton/Vana/deployments", "created_at": "2019-03-20T23:22:31Z", "updated_at": "2019-03-21T05:55:09Z", "pushed_at": "2019-03-21T05:55:07Z", "git_url": "git://github.com/ryantpayton/Vana.git", "ssh_url": "git@github.com:ryantpayton/Vana.git", "clone_url": "https://github.com/ryantpayton/Vana.git", "svn_url": "https://github.com/ryantpayton/Vana", "homepage": null, "size": 944, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 1, "mirror_url": null, "archived": false, "disabled": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 1, "open_issues": 0, "watchers": 0, "default_branch": "master", "permissions": {"admin": false, "push": false, "pull": true}}]}},
