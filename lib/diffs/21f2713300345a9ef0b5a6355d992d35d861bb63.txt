diff --git a/src/client/command/commands/gm0/StatDexCommand.java b/src/client/command/commands/gm0/StatDexCommand.java
index 76b974f9e..8bd0fd97d 100644
--- a/src/client/command/commands/gm0/StatDexCommand.java
+++ b/src/client/command/commands/gm0/StatDexCommand.java
@@ -38,7 +38,17 @@ public void execute(MapleClient c, String[] params) {
         MapleCharacter player = c.getPlayer();
         int remainingAp = player.getRemainingAp();
 
-        int amount = (params.length > 0) ? Math.min(Integer.parseInt(params[0]), remainingAp) : Math.min(remainingAp, ServerConstants.MAX_AP - player.getDex());
+        int amount;
+        if (params.length > 0) {
+            try {
+                amount = Math.min(Integer.parseInt(params[0]), remainingAp);
+            } catch (NumberFormatException e) {
+                player.dropMessage("That is not a valid number!");
+                return;
+            }
+        } else {
+            amount = Math.min(remainingAp, ServerConstants.MAX_AP - player.getDex());
+        }
         if (!player.assignDex(Math.max(amount, 0))) {
             player.dropMessage("Please make sure your AP is not over " + ServerConstants.MAX_AP + " and you have enough to distribute.");
         }
diff --git a/src/client/command/commands/gm0/StatIntCommand.java b/src/client/command/commands/gm0/StatIntCommand.java
index 02ab5b6f7..f28233636 100644
--- a/src/client/command/commands/gm0/StatIntCommand.java
+++ b/src/client/command/commands/gm0/StatIntCommand.java
@@ -38,7 +38,17 @@ public void execute(MapleClient c, String[] params) {
         MapleCharacter player = c.getPlayer();
         int remainingAp = player.getRemainingAp();
 
-        int amount = (params.length > 0) ? Math.min(Integer.parseInt(params[0]), remainingAp) : Math.min(remainingAp, ServerConstants.MAX_AP - player.getInt());
+        int amount;
+        if (params.length > 0) {
+            try {
+                amount = Math.min(Integer.parseInt(params[0]), remainingAp);
+            } catch (NumberFormatException e) {
+                player.dropMessage("That is not a valid number!");
+                return;
+            }
+        } else {
+            amount = Math.min(remainingAp, ServerConstants.MAX_AP - player.getInt());
+        }
         if (!player.assignInt(Math.max(amount, 0))) {
             player.dropMessage("Please make sure your AP is not over " + ServerConstants.MAX_AP + " and you have enough to distribute.");
         }
diff --git a/src/client/command/commands/gm0/StatLukCommand.java b/src/client/command/commands/gm0/StatLukCommand.java
index f2a97c8bb..1ec1ae836 100644
--- a/src/client/command/commands/gm0/StatLukCommand.java
+++ b/src/client/command/commands/gm0/StatLukCommand.java
@@ -38,7 +38,17 @@ public void execute(MapleClient c, String[] params) {
         MapleCharacter player = c.getPlayer();
         int remainingAp = player.getRemainingAp();
 
-        int amount = (params.length > 0) ? Math.min(Integer.parseInt(params[0]), remainingAp) : Math.min(remainingAp, ServerConstants.MAX_AP - player.getLuk());
+        int amount;
+        if (params.length > 0) {
+            try {
+                amount = Math.min(Integer.parseInt(params[0]), remainingAp);
+            } catch (NumberFormatException e) {
+                player.dropMessage("That is not a valid number!");
+                return;
+            }
+        } else {
+            amount = Math.min(remainingAp, ServerConstants.MAX_AP - player.getLuk());
+        }
         if (!player.assignLuk(Math.max(amount, 0))) {
             player.dropMessage("Please make sure your AP is not over " + ServerConstants.MAX_AP + " and you have enough to distribute.");
         }
diff --git a/src/client/command/commands/gm0/StatStrCommand.java b/src/client/command/commands/gm0/StatStrCommand.java
index 46bac383a..512ea226a 100644
--- a/src/client/command/commands/gm0/StatStrCommand.java
+++ b/src/client/command/commands/gm0/StatStrCommand.java
@@ -37,7 +37,17 @@
     public void execute(MapleClient c, String[] params) {
         MapleCharacter player = c.getPlayer();
         int remainingAp = player.getRemainingAp();
-        int amount = (params.length > 0) ? Math.min(Integer.parseInt(params[0]), remainingAp) : Math.min(remainingAp, ServerConstants.MAX_AP - player.getStr());
+        int amount;
+        if (params.length > 0) {
+            try {
+                amount = Math.min(Integer.parseInt(params[0]), remainingAp);
+            } catch (NumberFormatException e) {
+                player.dropMessage("That is not a valid number!");
+                return;
+            }
+        } else {
+            amount = Math.min(remainingAp, ServerConstants.MAX_AP - player.getStr());
+        }
         
         if (!player.assignStr(Math.max(amount, 0))) {
             player.dropMessage("Please make sure your AP is not over " + ServerConstants.MAX_AP + " and you have enough to distribute.");
